Found 201 indicator modules to test.

Testing indicator 1/201: bamboo_ta.candles.candlestick_patterns

================================================================================
Testing candlestick_patterns...
================================================================================

=== Candlestick Patterns Test Results ===

Indicator Description:
Name:
        Comprehensive Candlestick Patterns Detection

    Description:
        Detects a wide range of candlestick patterns, from basic single-candle types to complex
        multi-candle formations. This function analyzes price data to identify both individual
        candlestick types and pattern formations that may indicate trend continuations or reversals.
        
        The function categorizes patterns into:
        1. Single Candlestick Patterns (e.g., doji, hammer, marubozu)
        2. Two-Candlestick Patterns (e.g., engulfing, harami)
        3. Three-Candlestick Patterns (e.g., morning star, three white soldiers)
        4. Rare & Advanced Patterns (e.g., abandoned baby, island reversal)

    More info:
        https://www.investopedia.com/trading/candlestick-charting-what-is-it/
        https://www.babypips.com/learn/forex/japanese-candlesticks

    Parameters:
        - df (pandas.DataFrame): Input DataFrame which should contain columns:
            'open', 'high', 'low', and 'close'.
        - include_indicators (bool, optional): If True, provides a warning that indicator-based
            pattern detection has been removed. Default is False.

    Single Candlestick Types:
        - "doji": A candle with a very small body, indicating indecision.
        - "long_legged_doji": A doji with long upper and lower shadows, showing extreme indecision.
        - "dragonfly_doji": A doji with a long lower shadow and no upper shadow, often a bullish reversal signal.
        - "gravestone_doji": A doji with a long upper shadow and no lower shadow, often a bearish reversal signal.
        - "four_price_doji": An extremely rare doji where open, high, low, and close are virtually identical.
        - "hammer": A bullish reversal candle with a small body at the top and a long lower shadow.
        - "inverted_hammer": A bullish reversal candle with a small body at the bottom and a long upper shadow.
        - "hanging_man": A bearish reversal candle with a small body at the top and a long lower shadow.
        - "shooting_star": A bearish reversal candle with a small body at the bottom and a long upper shadow.
        - "bullish_belt_hold": A bullish candle with a large body and no or minimal lower shadow.
        - "bearish_belt_hold": A bearish candle with a large body and no or minimal upper shadow.
        - "bullish_marubozu": A bullish candle with a large body and no or minimal shadows.
        - "bearish_marubozu": A bearish candle with a large body and no or minimal shadows.
        - "high_wave": A candle with a small body and very long upper and lower shadows, indicating volatility.
        - "bullish_spinning_top": A bullish candle with a small body and significant upper and lower shadows.
        - "bearish_spinning_top": A bearish candle with a small body and significant upper and lower shadows.
        - "bullish": A standard bullish candle (close > open) that doesn't match any specific pattern.
        - "bearish": A standard bearish candle (close < open) that doesn't match any specific pattern.

    Multi-Candle Patterns:
        Two-Candle Patterns:
        - "bullish_engulfing": A bullish reversal pattern where a large bullish candle engulfs the previous bearish candle.
        - "bearish_engulfing": A bearish reversal pattern where a large bearish candle engulfs the previous bullish candle.
        - "bullish_harami": A bullish reversal pattern where a small bullish candle is contained within the previous bearish candle.
        - "bearish_harami": A bearish reversal pattern where a small bearish candle is contained within the previous bullish candle.
        - "bullish_harami_cross": A stronger bullish harami where the second candle is a doji.
        - "bearish_harami_cross": A stronger bearish harami where the second candle is a doji.
        - "piercing_line": A bullish reversal pattern where a bullish candle closes above the midpoint of the previous bearish candle.
        - "dark_cloud_cover": A bearish reversal pattern where a bearish candle opens above the previous high and closes below the midpoint.
        - "tweezer_tops": A bearish reversal pattern with two candles having the same or similar highs.
        - "tweezer_bottoms": A bullish reversal pattern with two candles having the same or similar lows.
        - "up_gap_side_by_side_white_lines": A bullish continuation pattern with two bullish candles separated by a gap up.
        - "down_gap_side_by_side_white_lines": A bearish continuation pattern with two bearish candles separated by a gap down.
        - "separating_lines_bullish": A bullish continuation pattern where a bullish candle follows a bearish one with the same open.
        - "separating_lines_bearish": A bearish continuation pattern where a bearish candle follows a bullish one with the same open.
        - "hook_reversal_bullish": A bullish reversal pattern similar to piercing line but less strong.
        - "hook_reversal_bearish": A bearish reversal pattern similar to dark cloud cover but less strong.
        - "on_neck_line": A bearish continuation pattern where a bullish candle closes at the previous low.
        - "in_neck_line": A bearish continuation pattern where a bullish candle closes slightly above the previous low.
        - "thrusting_pattern": A weak bearish continuation pattern where a bullish candle closes below the midpoint of the previous bearish candle.

        Three-Candle Patterns:
        - "morning_star": A bullish reversal pattern with a bearish candle, a small-bodied candle, and a bullish candle.
        - "evening_star": A bearish reversal pattern with a bullish candle, a small-bodied candle, and a bearish candle.
        - "abandoned_baby_bullish": A strong bullish reversal with a bearish candle, a gapped-down doji, and a gapped-up bullish candle.
        - "abandoned_baby_bearish": A strong bearish reversal with a bullish candle, a gapped-up doji, and a gapped-down bearish candle.
        - "three_white_soldiers": A strong bullish reversal with three consecutive bullish candles, each closing higher.
        - "three_black_crows": A strong bearish reversal with three consecutive bearish candles, each closing lower.
        - "three_inside_up": A bullish reversal starting with a bullish harami and followed by a confirming bullish candle.
        - "three_inside_down": A bearish reversal starting with a bearish harami and followed by a confirming bearish candle.
        - "three_outside_up": A bullish reversal starting with a bullish engulfing and followed by a confirming bullish candle.
        - "three_outside_down": A bearish reversal starting with a bearish engulfing and followed by a confirming bearish candle.
        - "rising_three_methods": A bullish continuation with a large bullish candle, three small bearish candles, and a final bullish candle.
        - "falling_three_methods": A bearish continuation with a large bearish candle, three small bullish candles, and a final bearish candle.
        - "mat_hold": A bullish continuation similar to rising three methods but with a gap.
        - "tri_star_bullish": A bullish reversal with three consecutive doji candles forming a bottom.
        - "tri_star_bearish": A bearish reversal with three consecutive doji candles forming a top.
        - "unique_three_river_bottom": A bullish reversal with a long bearish candle, a bearish candle with a new low, and a small bullish candle.
        - "concealing_baby_swallow": A rare bearish reversal pattern with four bearish candles.
        - "advance_block": A weakening bullish trend with three bullish candles of decreasing size and increasing upper shadows.
        - "deliberation": A warning of potential reversal after an uptrend, with two strong bullish candles followed by a small bullish candle.

        Complex Patterns:
        - "tower_top": A bearish reversal after an uptrend, with a series of rising candles followed by a strong bearish candle.
        - "tower_bottom": A bullish reversal after a downtrend, with a series of falling candles followed by a strong bullish candle.
        - "ladder_bottom": A bullish reversal after a downtrend, with three bearish candles followed by a strong bullish candle.
        - "ladder_top": A bearish reversal after an uptrend, with three bullish candles followed by a strong bearish candle.
        - "fry_pan_bottom": A bullish reversal forming a rounded bottom pattern.
        - "dumpling_top": A bearish reversal forming a rounded top pattern.
        - "island_reversal_bullish": A bullish reversal with an isolated low surrounded by gaps.
        - "island_reversal_bearish": A bearish reversal with an isolated high surrounded by gaps.

    Pattern Interpretation Guide:
        Bullish Reversal Patterns:
        - Hammer, Dragonfly Doji: Potential reversal after downtrend, shows buyers stepping in at lows
        - Bullish Engulfing, Morning Star: Strong reversal signals, especially after extended downtrends
        - Piercing Line: Moderate reversal signal, needs confirmation
        - Bullish Harami: Indicates indecision after downtrend, weaker signal than engulfing
        - Three White Soldiers: Very strong reversal signal, especially after a prolonged downtrend
        - Abandoned Baby Bullish: Rare but extremely strong reversal signal

        Bearish Reversal Patterns:
        - Shooting Star, Gravestone Doji: Potential reversal after uptrend, shows sellers stepping in at highs
        - Bearish Engulfing, Evening Star: Strong reversal signals, especially after extended uptrends
        - Dark Cloud Cover: Moderate reversal signal, needs confirmation
        - Bearish Harami: Indicates indecision after uptrend, weaker signal than engulfing
        - Three Black Crows: Very strong reversal signal, especially after a prolonged uptrend
        - Abandoned Baby Bearish: Rare but extremely strong reversal signal

        Continuation Patterns:
        - Rising/Falling Three Methods: Strong continuation signals during trends
        - Separating Lines: Moderate continuation signals
        - On Neck Line, In Neck Line, Thrusting Pattern: Weak bearish continuation signals

        Indecision Patterns:
        - Doji, Long-legged Doji: Market indecision, potential reversal if at support/resistance
        - Spinning Tops: Weak indecision signals, less significant than doji

    Trading Strategies:
        1. Reversal Trading:
           - Look for strong reversal patterns (Morning Star, Engulfing) at support/resistance levels
           - Confirm with volume increase and/or other technical indicators
           - Set stop loss below/above the pattern's low/high point

        2. Trend Continuation:
           - Use patterns like Three Methods during established trends
           - Enter in the direction of the primary trend when continuation patterns form
           - Tighter stop losses can be used compared to reversal trades

        3. Volatility Breakout:
           - Look for indecision patterns (Doji) followed by strong momentum candles
           - Enter in the direction of the breakout candle
           - Place stop loss below/above the Doji's low/high

        4. Multiple Timeframe Confirmation:
           - Confirm patterns on higher timeframes before trading on lower timeframes
           - Higher probability setups occur when patterns align across multiple timeframes

    Call with:
        # Detect candlestick types and patterns
        candlestick_df = bta.candlestick_patterns(df)
        
        # Add type and pattern columns to original DataFrame
        df['candlestick_type'] = candlestick_df['type']
        df['candlestick_pattern'] = candlestick_df['pattern']

    Returns:
        pd.DataFrame: DataFrame with 'type' column for individual candle types and 'pattern' column
        for multi-candle patterns.

Last 32 rows of data with candlestick_patterns values:
           date       open       high        low      close         volume                  type                    pattern
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060     bearish_belt_hold                           
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520               bullish                           
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810               bearish                           
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830                  doji      hook_reversal_bullish
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280               bullish                           
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662             high_wave                           
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100               bullish                           
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900      long_legged_doji                           
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880               bullish                           
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950               bearish          bearish_engulfing
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  bearish_spinning_top         three_outside_down
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910               bullish                           
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450               bearish                           
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230               bullish                           
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260      long_legged_doji       bearish_harami_cross
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775     bullish_belt_hold   separating_lines_bullish
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740               bullish                           
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466                  doji              advance_block
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550               bearish   separating_lines_bearish
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000               bearish                           
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700        dragonfly_doji  unique_three_river_bottom
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  bearish_spinning_top                           
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360               bearish                           
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030      long_legged_doji                           
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880               bullish              ladder_bottom
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100               bullish                           
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270               bearish          bearish_engulfing
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290               bearish         three_outside_down
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900               bullish                           
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780               bearish                           
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  bearish_spinning_top                           
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890               bullish  unique_three_river_bottom

Testing indicator 2/201: bamboo_ta.candles.dynamic_exhaustion_bars

================================================================================
Testing dynamic_exhaustion_bars...
================================================================================

=== Dynamic Exhaustion Bars Test Results ===

Indicator Description:
Name:
    Dynamic Leledc Exhaustion Bars

Description:
    The lookback length and exhaustion bars adjust dynamically to the market conditions.

    This indicator dynamically adjusts the lookback length and the exhaustion 
    bars based on the market's behavior, helping to identify potential reversals
    and trend strength.

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - window (int): Lookback window for z-score calculation. Default is 500.

Call with:
    dynamic_exhaustion = bta.dynamic_exhaustion_bars(df)
    df['dynamic_leledc_major'] = dynamic_exhaustion['leledc_major']
    df['dynamic_leledc_minor'] = dynamic_exhaustion['leledc_minor']

Returns:
    pd.DataFrame: DataFrame with 'leledc_major' and 'leledc_minor' columns.

Last 32 rows of data with dynamic_exhaustion_bars values:
           date       open       high        low      close         volume  leledc_major  leledc_minor
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060             0             0
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520             0             0
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810             0             0
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830             0             0
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280             0             0
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662             0             0
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100             0             0
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900             0             0
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880             0             0
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950             0             0
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330             0             0
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910             0             0
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450             0             0
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230             0             0
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260             0             0
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775             0             0
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740             0             0
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466             0             0
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550             0             0
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000             0             0
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700             0             0
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430             0             0
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360             0             0
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030             0             0
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880             0             0
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100             0             0
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270             0             0
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290             0             0
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900             0             0
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780             0             0
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500             0             0
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890             0             0

Testing indicator 3/201: bamboo_ta.candles.exhaustion_bars

================================================================================
Testing exhaustion_bars...
================================================================================

=== Exhaustion Bars Test Results ===

Indicator Description:
Name:
    Leledc Exhaustion Bars

Description:
    Infamous S/R Reversal Indicator

    Leledc exhaustion bars are a specific type of price action pattern used in
    technical analysis to identify potential reversals in the market trend.
    These bars are characterized by a sharp move in price with an increase in
    volume, often indicating that the current trend is losing momentum and may
    reverse direction soon. Traders use them to pinpoint the end of a trend
    and the beginning of a new one, thereby making more informed trading decisions.

More info:
    https://www.abundancetradinggroup.com/leledc-exhaustion-bar-mt4-indicator/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'open',
        'high', 'low', and 'close' columns.
    - maj_qual (int): Major quality parameter. Default is 6.
    - maj_len (int): Major length parameter. Default is 30.
    - min_qual (int): Minor quality parameter. Default is 5.
    - min_len (int): Minor length parameter. Default is 5.
    - core_length (int): Core length parameter. Default is 4.

Call with:
    exhaustion = bta.exhaustion_bars(df)
    df['leledc_major'] = exhaustion['leledc_major']
    df['leledc_minor'] = exhaustion['leledc_minor']

Returns:
    pd.DataFrame: DataFrame with 'leledc_major' and 'leledc_minor' columns.

Last 32 rows of data with exhaustion_bars values:
           date       open       high        low      close         volume  leledc_major  leledc_minor
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060           1.0           0.0
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520           1.0           0.0
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810           1.0           0.0
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830           1.0           1.0
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280           1.0           0.0
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662           1.0          -1.0
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100           1.0           0.0
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900           1.0           0.0
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880           1.0           0.0
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950           1.0           0.0
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330           1.0           0.0
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910           1.0           0.0
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450           1.0           0.0
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230           1.0           0.0
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260           1.0          -1.0
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775           1.0           0.0
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740           1.0           0.0
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466           1.0           0.0
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550           1.0           0.0
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000           1.0           0.0
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700           1.0           1.0
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430           1.0           0.0
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360           1.0           0.0
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030           1.0           0.0
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880           1.0           0.0
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100           1.0           0.0
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270           1.0          -1.0
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290           1.0           0.0
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900           1.0           0.0
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780           1.0           0.0
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500           1.0           0.0
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890           1.0           0.0

Testing indicator 4/201: bamboo_ta.candles.hansen_heiken_ashi

================================================================================
Testing hansen_heiken_ashi...
================================================================================

=== Hansen Heiken Ashi Test Results ===

Indicator Description:
Name:
    Hansen Heiken Ashi (HHA)

Description:
    The Hansen Heiken Ashi is a modified version of the Heiken Ashi candlestick calculation
    with additional smoothing using a Simple Moving Average (SMA). It aims to reduce noise
    in the data for better trend visualization.

More info:
    https://www.investopedia.com/terms/h/heikenashi.asp

Parameters:
    - df (pd.DataFrame): Input DataFrame containing OHLC (open, high, low, close) data.
    - period (int): Period for the Simple Moving Average (SMA) to smooth data. Default is 6.

Call with:
    hha_result = bta.hansen_heiken_ashi(df, period=6)
    df['hha_emac'] = hha_result['emac']
    df['hha_emao'] = hha_result['emao']

Returns:
    pd.DataFrame: DataFrame containing the smoothed 'emac' and 'emao' columns.

Last 32 rows of data with hansen_heiken_ashi values:
           date       open       high        low      close         volume           emac           emao
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   95298.930000   95613.119167
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   95496.471667   95324.751667
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   96113.602917   95182.714167
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   96311.326667   95406.306667
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   96532.732917   96077.191667
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   96659.065417   96399.027500
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   96956.700000   96643.187500
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   97445.573333   96845.600833
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   98087.218750   97080.474167
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   98594.637917   97578.779167
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   98526.770417   98238.428333
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   98741.074167   98796.409167
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   99091.647083   98749.115000
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   99244.680000   98931.202500
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   99459.403750   99301.437500
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  100235.198750   99456.080000
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  101704.061250   99614.635000
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  102979.171250  100239.461667
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  103390.912917  101627.225833
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  103125.795417  102833.425000
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  102277.011667  103267.463333
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  101388.065833  102953.907500
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   99826.731667  102322.495833
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   97879.222917  101423.615833
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   96785.028333   99919.917500
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   96748.710417   98076.197500
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   96942.510833   97010.139167
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   96529.960417   97045.748333
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   96333.792917   97041.907500
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   96261.336667   96624.674167
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   95698.133750   96384.737500
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   94838.026667   96298.941667

Testing indicator 5/201: bamboo_ta.candles.heiken_ashi

================================================================================
Testing heiken_ashi...
================================================================================

=== Heiken Ashi Test Results ===

Indicator Description:
Name:
    Heiken Ashi

Description:
    Heiken Ashi (HA) with Optional Pre and Post Smoothing

    Heiken Ashi is a type of price chart that shares some characteristics with
    candlestick charts but differs due to the values used to plot them. This
    modified version allows for optional smoothing of the original data before
    the Heiken Ashi calculation and/or smoothing of the Heiken Ashi values
    themselves, aiming to provide a more refined and smoother representation
    of price action, making it easier to identify the trend.

More info:
    https://www.investopedia.com/terms/h/heikenashi.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain columns:
        'open', 'high', 'low', and 'close'.
    - pre_smoothing_period (int, optional): Period for EMA pre-smoothing of the
        original data. If provided, original price bars are smoothed before Heiken
        Ashi calculations.
    - post_smoothing_period (int, optional): Period for EMA post-smoothing of
        Heiken Ashi values. If provided, Heiken Ashi values are smoothed post calculations.

Call with:
    ha_df = bta.heiken_ashi(df)
    df['ha_open'] = ha_df['ha_open']
    df['ha_high'] = ha_df['ha_high']
    df['ha_low'] = ha_df['ha_low']
    df['ha_close'] = ha_df['ha_close']

Returns:
    pd.DataFrame: DataFrame with 'ha_open', 'ha_high', 'ha_low', and 'ha_close' columns.

Last 32 rows of data with heiken_ashi values:
           date       open       high        low      close         volume        ha_open        ha_high         ha_low     ha_close
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   95904.284121   97463.950000   95904.284121   96855.9875
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   96380.135810   97836.000000   95693.880000   96780.7625
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   96580.449155   98130.000000   94395.000000   96387.6975
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   96484.073328   96484.073328   93578.170000   95393.4975
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   95938.785414   99000.000000   94587.830000   97006.2100
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   96472.497707  104088.000000   90500.000000   97530.2375
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   97001.367603  101898.990000   95981.720000   98641.7950
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   97821.581302  100439.180000   97821.581302   99714.0025
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   98767.791901  101351.000000   98657.700000  100237.5700
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   99502.680950  101215.930000   94150.050000   98438.0125
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   98970.346725   98970.346725   94256.540000   96599.0050
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   97784.675863  101888.000000   95658.240000   98816.0600
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   98300.367931  102540.000000   98300.367931  100745.2325
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   99522.800216  101895.260000   99205.000000  100632.2000
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  100077.500108  102650.000000  100077.500108  101525.9125
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  100801.706304  105250.000000  100801.706304  103092.7825
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  101947.244402  107793.070000  101947.244402  105412.1800
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  103679.712201  108353.000000  103679.712201  106466.7200
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  105073.216100  106524.980000  100000.000000  103215.6825
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  104144.449300  104144.449300   95700.000000   99041.4950
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  101592.972150  101592.972150   92232.540000   96433.2100
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   99013.091075   99540.610000   96398.390000   97759.1075
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   98386.099288   98386.099288   94250.350000   96044.1750
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   97215.137144   97215.137144   92520.000000   94781.6675
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   95998.402322   99487.990000   93569.020000   96650.5150
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   96324.458661   99569.150000   96324.458661   98823.5875
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   97574.023080   99963.700000   95199.140000   97596.0125
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   97585.017790   97585.017790   93500.010000   95283.8050
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   96434.411395   96434.411395   94135.660000   94867.1700
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   95650.790698   95650.790698   93009.520000   94346.9300
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   94998.860349   95024.500000   91530.450000   93271.2975
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   94135.078924   96250.000000   92033.730000   93662.9450

Testing indicator 6/201: bamboo_ta.candles.linear_regression_candles

================================================================================
Testing linear_regression_candles...
================================================================================

=== Linear Regression Candles Test Results ===

Indicator Description:
Name:
    Linear Regression Candles

Description:
    Linear Regression Candles with Optional Signal Line
    The Linear Regression Candles transform the traditional OHLC bars using a
    linear regression algorithm, providing a smoothed representation of price
    action. The function also provides an optional signal line, which can be
    either an SMA or an EMA of the Linear Regression Candle close. This signal
    line can help to identify trends and potential trading signals.

More info:
    https://www.investopedia.com/terms/l/linearregression.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain columns:
        'open', 'high', 'low', and 'close'.
    - linreg_length (int, optional): Period for linear regression calculation.
        Default is 11.
    - sma_signal (bool, optional): If True, uses SMA for the signal line. If
        False, uses EMA. Default is True.
    - signal_length (int, optional): Period for the moving average signal line.
        Default is 11.

Call with:
    lr_df = bta.linear_regression_candles(df)
    df['lrc_open'] = lr_df['bopen']
    df['lrc_high'] = lr_df['bhigh']
    df['lrc_low'] = lr_df['blow']
    df['lrc_close'] = lr_df['bclose']
    df['lrc_signal'] = lr_df['signal']

Returns:
    pd.DataFrame: DataFrame with 'bopen', 'bhigh', 'blow', 'bclose' as the
    Linear Regression Candles, and 'signal' as the signal line.

Last 32 rows of data with linear_regression_candles values:
           date       open       high        low      close         volume          bopen          bhigh           blow         bclose         signal
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   95997.273636   97490.373636   94491.314091   95578.085909   96509.855496
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   95578.088636   97017.543182   94447.852727   95579.182727   96684.791570
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   95579.181364   97257.353182   94262.298636   95753.538636   96766.104339
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   95753.533636   97064.739545   94361.091364   96147.872273   96694.498512
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   96147.867273   97755.180909   94944.753182   97329.811364   96630.686694
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   97329.806364   99997.688182   94088.798636   97989.196364   96520.693512
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   97989.193182  101348.565000   94645.048182   98692.252273   96591.437355
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   98692.249545  101388.551818   95629.391818   98928.390909   96792.919339
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   98928.388636  101876.551818   96370.424545   99922.173636   97092.479174
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   99922.175000  102016.137273   95882.926818   99418.009091   97394.162231
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   99418.015455  101380.746364   95583.399091   98952.358182   97662.806488
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   98952.364545  101702.256818   95912.436364   99776.841818   98044.511570
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   99776.848182  102097.774091   97351.248636  100171.633636   98462.007107
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  100171.638182  102127.783182   98355.526364  100645.624091   98906.742149
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  100645.623182  101895.065000   99439.510909  100866.110000   99335.672851
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  100866.108636  102691.139545  100587.200455  102299.693182   99787.480289
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  102299.691364  104937.372727  101356.271364  103675.060909  100304.377066
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  103675.055455  106795.351364  103171.401818  105168.309091  100893.109504
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  105168.303636  107512.903182  103389.210455  104500.811364  101399.693182
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  104500.805909  106934.427273  102152.419091  103176.192273  101695.513058
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  103176.188636  104812.353182   99127.213182  101429.769091  101878.400331
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  101429.767727  102706.300909   97534.026364   99371.664091  101916.519050
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   99371.666818  100534.506818   95414.870000   97435.785000  101703.695702
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   97435.791364   98393.794545   93473.397273   95469.100909  101276.192727
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   95469.107273   97346.973636   92155.025455   95196.845455  100780.849215
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   95196.850000   96572.623182   92640.954545   95293.035909  100274.206116
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   95293.043182   96536.577273   92602.254091   94875.606364   99599.289132
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   94875.612727   96433.474091   92678.441364   94667.407727   98780.411570
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   94667.411364   96321.920000   93765.378636   95325.879091   97885.645207
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   95325.881364   96326.229545   94034.901818   94901.724091   97013.000909
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   94901.721818   96061.311818   93369.742727   93971.849091   96176.242438
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   93971.845909   95709.379091   92423.795909   93566.145909   95461.367603

Testing indicator 7/201: bamboo_ta.candles.smoothed_heiken_ashi

================================================================================
Testing smoothed_heiken_ashi...
================================================================================

=== Smoothed Heiken Ashi Test Results ===

Indicator Description:
Name:
    Smoothed Heiken Ashi Candles

Description:
    This function computes the Smoothed Heiken Ashi Candles using two levels of exponential 
    moving average (EMA) smoothing. The first smoothing is applied to the original OHLC 
    prices, and then the Heiken Ashi values are computed.
    A second smoothing is applied to the Heiken Ashi values to produce the final smoothed 
    candle values.

More info:
    https://www.investopedia.com/terms/h/heikenashi.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which must contain the columns 'open', 'high', 'low', and 'close'.
    - len_ (int): The period for the first level EMA smoothing of the original prices. Default is 10.
    - len2 (int): The period for the second level EMA smoothing of the Heiken Ashi values. Default is 10.
    - fillna (bool): If True, fill NaN values with 0. Default is False.

Call with:
    sha_result = bta.smoothed_heiken_ashi(df, len_=10, len2=10)
    df['sha_open'] = sha_result['sha_open']
    df['sha_high'] = sha_result['sha_high']
    df['sha_low'] = sha_result['sha_low']
    df['sha_close'] = sha_result['sha_close']
    df['sha_color'] = sha_result['sha_color']

Returns:
    pd.DataFrame: DataFrame with columns 'sha_open', 'sha_high', 'sha_low', 'sha_close', and 'sha_color'.

Last 32 rows of data with smoothed_heiken_ashi values:
           date       open       high        low      close         volume       sha_open       sha_high       sha_low      sha_close sha_color
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   91271.867398   94384.589443  90509.326190   92494.188586     green
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   91883.027992   94842.373871  91119.496105   93011.849360     green
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   92447.438676   95257.506460  91636.238079   93469.980891     green
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   92958.709784   95570.050210  92046.352356   93840.251308     green
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   93399.480546   95892.660483  92404.907455   94192.778073     green
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   93796.129310   96379.543046  92581.959796   94539.096302     green
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   94167.612806   96887.933752  92812.871204   94906.555569     green
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   94537.084187   97345.657985  93166.824421   95311.464563     green
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   94924.274375   97784.476422  93585.284858   95745.365806     green
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   95334.820090   98191.667395  93884.081189   96124.841734     green
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   95729.830912   98466.839290  94096.414561   96394.545894     green
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   96062.188403   98764.141491  94290.185675   96655.141707     green
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   96358.665055   99087.983741  94585.898713   96964.799756     green
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   96661.732406   99397.573223  94936.552938   97293.327880     green
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   96977.530143   99712.337315  95358.820876   97653.171819     green
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   97315.350981  100106.110391  95835.820706   98073.880924     green
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   97694.615952  100623.824917  96402.975280   98598.101038     green
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   98146.358495  101225.904065  97077.467671   99209.144882     green
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   98677.751688  101804.124848  97625.600010   99750.638285     green
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   99214.194987  102224.123393  97928.875377  100089.682852     green
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   99651.938919  102373.341481  97943.585817  100195.771434     green
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   99923.855177  102379.587259  97902.352448  100186.238537     green
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  100055.046857  102220.743284  97754.022591  100042.929290       red
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  100048.988074  101926.580845  97481.701858   99773.068992       red
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   99911.028533  101649.047614  97170.059652   99489.193784       red
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   99700.111158  101394.503960  96976.711080   99277.158107       red
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   99488.634632  101176.807664  96788.516711   99079.641807       red
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   99284.138220  100911.003444  96553.824391   98821.937943       red
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   99053.038081  100561.927447  96316.776990   98518.689309       red
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   98785.863695  100155.622773  96048.761556   98177.778758       red
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   98481.821226   99714.009801  95719.980595   97787.368183       red
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   98134.594705   99303.871867  95378.028031   97389.674386       red

Testing indicator 8/201: bamboo_ta.cycles.even_better_sinewave

================================================================================
Testing even_better_sinewave...
================================================================================

=== Even Better Sinewave Test Results ===

Indicator Description:
Name:
    Even Better SineWave (EBSW)

Description:
    The Even Better SineWave (EBSW) indicator measures market cycles and uses a low pass filter 
    to remove noise. Its output is a bounded signal between -1 and 1, and the maximum length 
    of a detected trend is limited by its length input. This indicator can be used to identify 
    cyclical patterns in price movements and potential turning points in the market.

More info:
    https://www.prorealcode.com/prorealtime-indicators/even-better-sinewave/
    J.F.Ehlers 'Cycle Analytics for Traders', 2014

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - length (int): Maximum cycle/trend period. Values between 40-48 work as expected 
      with minimum value of 39. Default is 40.
    - bars (int): Period of low pass filtering. Default is 10.

Call with:
    result = bta.even_better_sinewave(df)
    df['ebsw'] = result['ebsw']

Returns:
    pd.DataFrame: DataFrame with 'ebsw' column containing the Even Better SineWave values.

Last 32 rows of data with even_better_sinewave values:
           date       open       high        low      close         volume      ebsw
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  0.998298
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  0.997320
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  0.999675
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  0.995712
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.994211
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  0.999602
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.998704
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.993376
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  0.990108
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  0.997538
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  0.986197
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  0.964425
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  0.991318
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  0.995093
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  0.990945
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  0.987240
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  0.979411
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  0.982132
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  0.996715
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  0.968970
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  0.811262
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  0.234133
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -0.740949
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -0.946497
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -0.991943
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -0.988644
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -0.960695
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -0.983209
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -0.995846
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -0.992018
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -0.992325
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -0.995013

Testing indicator 9/201: bamboo_ta.momentum.absolute_price_oscillator

================================================================================
Testing absolute_price_oscillator...
================================================================================

=== Absolute Price Oscillator Test Results ===

Indicator Description:
Name:
    Absolute Price Oscillator

Description:
    The Absolute Price Oscillator (APO) is a momentum indicator that measures 
    the difference between two moving averages, typically an exponential 
    moving average (EMA). It's similar to the MACD (Moving Average Convergence 
    Divergence) but doesn't include a signal line. The APO helps identify the 
    momentum and trend direction of a security.

More info:
    https://www.tradingtechnologies.com/xtrader-help/x-study/technical-indicator-definitions/absolute-price-oscillator-apo/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - fast_length (int): Period for the faster moving average. Default is 12.
    - slow_length (int): Period for the slower moving average. Default is 26.
    - mamode (str): Moving average type, either 'sma' or 'ema'. Default is 'sma'.

Call with:
    df['apo'] = bta.absolute_price_oscillator(df)['apo']

For Signal line:
    df['apo_signal'] = df['apo'].rolling(window=9).mean()  # Using SMA for signal

Returns:
    pd.DataFrame: DataFrame with 'apo' column.

Last 32 rows of data with absolute_price_oscillator values:
           date       open       high        low      close         volume          apo
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  6567.372949
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  5903.834808
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  5253.777115
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  4279.242564
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  3404.716410
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  2564.607244
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  1972.975321
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  2111.319808
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  2367.294872
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  2219.641410
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  1942.287564
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  1859.514615
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  1796.999744
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  1705.322500
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  1748.889295
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  1999.316859
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  2169.155449
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  2634.192051
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  2622.327628
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  2432.914487
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  2161.207115
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  1997.808910
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  1756.692564
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  1274.153782
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  1046.289487
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   804.314808
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   358.988782
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  -377.085449
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -1252.847372
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -2204.597885
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -2599.366218
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -2793.586731

Testing indicator 10/201: bamboo_ta.momentum.awesome_oscillator

================================================================================
Testing awesome_oscillator...
================================================================================

=== Awesome Oscillator Test Results ===

Indicator Description:
Name:
    Awesome Oscillator

Description:
    The Awesome Oscillator is a momentum indicator used to measure market momentum.
    It is calculated by subtracting a 34-period simple moving average (SMA) of the
    median price from a 5-period SMA of the median price.

More info:
    https://www.investopedia.com/terms/a/awesomeoscillator.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame containing 'high' and 'low' columns.
    - high_col (str): The name of the 'high' column. Default is 'high'.
    - low_col (str): The name of the 'low' column. Default is 'low'.
    - window1 (int, optional): Short period. Default is 5.
    - window2 (int, optional): Long period. Default is 34.
    - fillna (bool, optional): If True, fill nan values with 0. Default is False.

Call with:
    df['ao'] = bta.awesome_oscillator(df, 'high', 'low', 5, 34)['ao']

Returns:
    pd.DataFrame: DataFrame with the 'ao' column.

Last 32 rows of data with awesome_oscillator values:
           date       open       high        low      close         volume            ao
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  10936.654676
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  10894.932735
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  10524.678912
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   9723.726000
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   8931.039382
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   8238.141765
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   7806.074765
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   7564.047912
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   7640.170971
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   6975.170676
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   6080.369676
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   5366.330765
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   4901.167206
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   4297.299676
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   4420.945471
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   5276.702676
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   6103.596412
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   6781.751118
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   6911.476500
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   6147.653412
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   4418.585912
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   2668.011118
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360    327.353206
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  -1489.788235
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  -2132.995882
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  -1520.803029
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  -1575.664912
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  -1567.515676
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  -1421.308559
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  -1846.138882
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  -2922.385588
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -3599.758059

Testing indicator 11/201: bamboo_ta.momentum.balance_of_power

================================================================================
Testing balance_of_power...
================================================================================

=== Balance Of Power Test Results ===

Indicator Description:
Name:
    Balance of Power

Description:
    The Balance of Power (BOP) indicator measures the strength of buyers vs sellers
    by assessing the ability of each to push price to an extreme level. It is calculated
    by comparing the close and open prices relative to the high and low prices.
    
    Positive BOP values indicate buying pressure, while negative values indicate
    selling pressure. A zero line crossing can signal a potential shift in control
    between buyers and sellers.

More info:
    http://www.worden.com/TeleChartHelp/Content/Indicators/Balance_of_Power.htm

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'open', 'high', 'low',
      and 'close' columns.
    - scalar (float): Factor to magnify the values. Default is 1.0.

Call with:
    df['bop'] = bta.balance_of_power(df)['bop']

For Signal line:
    df['bop_signal'] = df['bop'].rolling(window=14).mean()  # Using SMA for signal

Returns:
    pd.DataFrame: DataFrame with 'bop' column.

Last 32 rows of data with balance_of_power values:
           date       open       high        low      close         volume       bop
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060 -0.766805
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  0.362813
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810 -0.359987
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  0.003329
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.620472
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662 -0.120819
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.472382
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.057141
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  0.474362
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950 -0.542484
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -0.170297
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  0.727476
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450 -0.347145
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  0.527815
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260 -0.002078
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  0.758559
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  0.357544
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  0.024770
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550 -0.908774
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -0.386212
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  0.057259
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -0.163404
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -0.658508
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -0.075844
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  0.638981
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  0.395441
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -0.763556
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -0.369031
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  0.626260
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -0.670162
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -0.270786
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  0.185934

Testing indicator 12/201: bamboo_ta.momentum.bias

================================================================================
Testing bias...
================================================================================

=== Bias Test Results ===

Indicator Description:
Name:
    Bias

Description:
    The Bias indicator measures the percentage deviation of the current price from a
    moving average. It helps identify potential overbought or oversold conditions when
    the price deviates significantly from the moving average.

More info:
    This indicator is popular among Asian traders and is sometimes used to identify
    market extremes.

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - length (int): The period for the moving average. Default is 26.
    - mamode (str): Moving average type, either 'sma' or 'ema'. Default is 'sma'.

Call with:
    df['bias'] = bta.bias(df)['bias']

Returns:
    pd.DataFrame: DataFrame with 'bias' column.

Last 32 rows of data with bias values:
           date       open       high        low      close         volume      bias
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  0.080282
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  0.076091
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  0.052122
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  0.043414
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.063386
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  0.036959
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.058423
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.054577
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  0.062393
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  0.019275
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  0.008347
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  0.051397
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  0.035844
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  0.045732
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  0.041165
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  0.067293
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  0.078596
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  0.076069
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  0.015429
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -0.012278
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -0.008759
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -0.015606
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -0.038117
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -0.040831
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -0.003767
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  0.003200
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -0.033274
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -0.047270
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -0.036954
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -0.051959
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -0.059408
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -0.050213

Testing indicator 13/201: bamboo_ta.momentum.brar

================================================================================
Testing brar...
================================================================================

=== Brar Test Results ===

Indicator Description:
Name:
    BR and AR

Description:
    BR (Bias Ratio) and AR (Arbiter Ratio) are momentum indicators commonly used
    in Asian markets. They measure buying and selling pressure by comparing price
    movements to open, high, low, and close values.
    
    AR compares the strength of the bulls (high - open) versus the bears (open - low).
    BR compares today's high with yesterday's close (bulls) versus yesterday's close
    with today's low (bears).
    
    Values above 100 indicate bullish strength, while values below 100 indicate
    bearish strength. Extreme readings may indicate overbought or oversold conditions.

More info:
    This indicator is particularly popular in Chinese and other Asian markets.

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'open', 'high', 'low',
      and 'close' columns.
    - length (int): Lookback period for calculations. Default is 26.
    - scalar (float): Multiplier for the ratio. Default is 100.
    - drift (int): The difference period for previous close. Default is 1.

Call with:
    result = bta.brar(df)
    df['ar'] = result['ar']
    df['br'] = result['br']

Returns:
    pd.DataFrame: DataFrame with 'ar' and 'br' columns.

Last 32 rows of data with brar values:
           date       open       high        low      close         volume          ar          br
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  211.356136  211.366631
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  205.174233  205.184413
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  172.241007  172.249314
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  164.791966  164.799729
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  165.400388  165.407969
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  149.867901  149.873876
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  147.592807  147.598626
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  126.935369  126.940617
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  134.402027  134.407690
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  109.691437  109.696059
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  110.379322  110.384025
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  110.414415  110.419053
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  109.898258  109.902764
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  114.411583  114.411627
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  110.549868  110.549911
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  111.169536  111.169622
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  112.082513  112.082556
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  106.167894  106.167894
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   95.021584   95.021584
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   94.966189   94.966189
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   89.641748   89.641748
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   97.092721   97.092686
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   92.591883   92.591883
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   82.327985   82.328015
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   88.663552   88.663583
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   84.192980   84.192980
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   81.260280   81.260308
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   79.803324   79.803352
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   83.905414   83.905472
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   83.194499   83.194586
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   79.054042   79.054098
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   85.670299   85.670365

Testing indicator 14/201: bamboo_ta.momentum.calculate_intraday_momentum_index

================================================================================
Testing calculate_intraday_momentum_index...
================================================================================
Error: calculate_intraday_momentum_index did not return a DataFrame

Testing indicator 15/201: bamboo_ta.momentum.center_of_gravity

================================================================================
Testing center_of_gravity...
================================================================================

=== Center Of Gravity Test Results ===

Indicator Description:
Name:
    Center of Gravity

Description:
    The Center of Gravity (CG) oscillator was developed by John Ehlers to identify 
    turning points in price with minimal lag. Unlike many other momentum oscillators, 
    the CG aims to be more responsive to price changes while maintaining some 
    smoothing characteristics.
    
    The oscillator calculates a weighted sum where more recent prices have less 
    weight (contrary to typical weighted averages), creating a unique perspective 
    on price momentum.

More info:
    http://www.mesasoftware.com/papers/TheCGOscillator.pdf

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - length (int): The period for the CG calculation. Default is 10.

Call with:
    df['cg'] = bta.center_of_gravity(df)['cg']

Returns:
    pd.DataFrame: DataFrame with 'cg' column.

Last 32 rows of data with center_of_gravity values:
           date       open       high        low      close         volume        cg
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060 -5.523104
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520 -5.507595
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810 -5.493866
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830 -5.483852
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280 -5.457796
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662 -5.468369
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100 -5.475953
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900 -5.468895
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880 -5.461364
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950 -5.466654
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -5.480821
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910 -5.470093
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450 -5.476052
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230 -5.479694
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260 -5.473742
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775 -5.466145
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740 -5.443718
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466 -5.426964
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550 -5.435362
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -5.475876
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -5.518718
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -5.540621
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -5.574471
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -5.597587
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -5.596966
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -5.573458
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -5.552586
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -5.527243
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -5.518109
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -5.526751
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -5.534091
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -5.535456

Testing indicator 16/201: bamboo_ta.momentum.chande_forecast_oscillator

================================================================================
Testing chande_forecast_oscillator...
================================================================================

=== Chande Forecast Oscillator Test Results ===

Indicator Description:
Name:
    Chande Forecast Oscillator

Description:
    The Chande Forecast Oscillator (CFO) calculates the percentage difference between 
    the actual price and the Time Series Forecast (TSF), which is the endpoint of a 
    linear regression line. It helps identify potential price reversals when the 
    price deviates significantly from its forecasted value.
    
    Positive values indicate that the current price is above the forecasted value, 
    suggesting potential overbought conditions. Negative values indicate that the 
    current price is below the forecasted value, suggesting potential oversold conditions.

More info:
    https://www.fmlabs.com/reference/default.htm?url=ForecastOscillator.htm

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - length (int): The period for linear regression calculation. Default is 9.
    - scalar (float): Multiplier for the percentage difference. Default is 100.

Call with:
    df['cfo'] = bta.chande_forecast_oscillator(df)['cfo']

Returns:
    pd.DataFrame: DataFrame with 'cfo' column.

Last 32 rows of data with chande_forecast_oscillator values:
           date       open       high        low      close         volume       cfo
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  1.175165
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  0.899370
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810 -0.877932
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830 -1.439114
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.737386
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662 -0.331929
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  1.480037
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.844328
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  0.780400
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950 -2.518962
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -2.481271
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  1.403790
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  0.356830
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  0.953381
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  0.698499
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  1.938752
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  1.494502
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466 -0.256238
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550 -4.697316
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -4.690337
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -2.483434
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -0.947555
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -0.743803
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  1.061370
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  4.325663
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  3.502100
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -0.826682
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -1.832867
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -0.350224
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -1.208027
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -1.201575
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  0.538955

Testing indicator 17/201: bamboo_ta.momentum.chande_momentum_oscillator

================================================================================
Testing chande_momentum_oscillator...
================================================================================

=== Chande Momentum Oscillator Test Results ===

Indicator Description:
Name:
    Chande Momentum Oscillator

Description:
    The Chande Momentum Oscillator (CMO) is a technical momentum indicator developed 
    by Tushar Chande. It measures the amount that an asset's price has changed over 
    a specified period of time.

More info:
    https://www.investopedia.com/terms/c/chandemomentumoscillator.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - length (int): Length for the CMO calculation. Default is 14.

Call with:
        df['cmo'] = bta.chande_momentum_oscillator(df)

For Signal line:
        df['cmo_signal'] = df['cmo'].rolling(window=10).mean()  # Using SMA for signal

Returns:
    pd.DataFrame: DataFrame with 'cmo' column.

Last 32 rows of data with chande_momentum_oscillator values:
           date       open       high        low      close         volume        cmo
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  24.119620
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  30.310420
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  21.577885
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  15.333681
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  18.039253
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  -6.393222
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   3.585752
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   9.579389
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  13.603195
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  18.930762
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  20.868875
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  23.068499
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  18.389064
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  17.002733
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  22.508073
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  29.667761
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  41.227508
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  41.383624
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   5.765115
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   1.771363
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  -7.251008
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  -9.367937
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -21.198717
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  -9.810122
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   7.526043
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  -7.139663
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -16.040088
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -27.054934
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -22.390648
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -41.491374
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -52.640828
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -48.464899

Testing indicator 18/201: bamboo_ta.momentum.commodity_channel_index

================================================================================
Testing commodity_channel_index...
================================================================================

=== Commodity Channel Index Test Results ===

Indicator Description:
Name:
    Commodity Channel Index

Description:
    The Commodity Channel Index (CCI) is a momentum-based oscillator used to help determine 
    when an investment vehicle is reaching a condition of being overbought or oversold. 
    It is also used to assess price trend direction and strength. This information 
    helps traders and investors make buy/sell decisions.
    
    CCI measures the current price level relative to an average price level over a 
    given period of time. The indicator fluctuates above or below zero, moving 
    between overbought and oversold conditions.

More info:
    https://www.investopedia.com/terms/c/commoditychannelindex.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', 
      and 'close' columns.
    - length (int): The period for calculating CCI. Default is 14.
    - constant (float): Scaling factor. Default is 0.015.

Call with:
    df['cci'] = bta.commodity_channel_index(df)['cci']

Returns:
    pd.DataFrame: DataFrame with 'cci' column.

Last 32 rows of data with commodity_channel_index values:
           date       open       high        low      close         volume         cci
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   50.583836
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   49.684604
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   12.529204
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  -39.124344
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   58.876779
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   46.802657
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  149.652709
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  155.568167
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  156.121426
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   29.425572
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  -44.613167
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  108.001822
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  126.683062
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  109.699208
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  114.775231
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  157.947960
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  189.520568
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  176.225072
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   42.565399
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  -68.808023
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -129.580591
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  -74.813706
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -107.679578
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -117.321734
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  -63.080672
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  -24.938542
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  -58.297581
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  -85.431476
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  -78.436975
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  -91.719525
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -110.105627
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -84.416274

Testing indicator 19/201: bamboo_ta.momentum.coppock_curve

================================================================================
Testing coppock_curve...
================================================================================

=== Coppock Curve Test Results ===

Indicator Description:
Name:
    Coppock Curve

Description:
    The Coppock Curve is a long-term price momentum indicator developed by Edwin 
    Sedgwick Coppock. It was originally designed for monthly analysis of equity 
    indices, intended to identify major bottoms in the stock market. The indicator 
    uses rate of change and a weighted moving average to identify long-term trend changes.
    
    It's typically used as a buy signal when it crosses above zero from below. The indicator 
    is particularly effective in identifying major market bottoms following significant 
    declines.

More info:
    https://en.wikipedia.org/wiki/Coppock_curve
    https://www.investopedia.com/terms/c/coppockcurve.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - length (int): The period for the weighted moving average. Default is 10.
    - fast (int): The faster ROC period. Default is 11.
    - slow (int): The slower ROC period. Default is 14.

Call with:
    df['coppock'] = bta.coppock_curve(df)['coppock']

Returns:
    pd.DataFrame: DataFrame with 'coppock' column.

Last 32 rows of data with coppock_curve values:
           date       open       high        low      close         volume    coppock
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  16.598087
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  14.424444
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  11.571566
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   8.913494
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   7.802396
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   5.708760
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   5.768735
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   6.268613
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   6.422898
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   6.261591
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   5.863683
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   6.722381
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   7.065234
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   7.777239
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   8.526174
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   9.618570
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  11.625346
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  12.883134
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  11.274790
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   8.863931
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   6.928613
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   5.016920
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   1.525206
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  -0.863710
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  -1.660956
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  -2.804007
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  -5.250018
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  -8.121687
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -10.012216
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -11.657784
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -13.160731
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -14.166552

Testing indicator 20/201: bamboo_ta.momentum.correlation_trend_indicator

================================================================================
Testing correlation_trend_indicator...
================================================================================

=== Correlation Trend Indicator Test Results ===

Indicator Description:
Name:
    Correlation Trend Indicator

Description:
    The Correlation Trend Indicator (CTI) is an oscillator created by John Ehler. 
    It measures how closely prices follow a straight line over a given period. 
    The indicator calculates the correlation coefficient between price and time, 
    resulting in values that range from -1 to 1.
    
    A value near 1 indicates prices are following a strong uptrend (positively-sloping line).
    A value near -1 indicates prices are following a strong downtrend (negatively-sloping line).
    Values near 0 indicate no clear trend or sideways movement.

More info:
    https://www.mesasoftware.com/papers/TrendCorrelationIndicator.pdf

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - length (int): The period for correlation calculation. Default is 12.

Call with:
    df['cti'] = bta.correlation_trend_indicator(df)['cti']

Returns:
    pd.DataFrame: DataFrame with 'cti' column.

Last 32 rows of data with correlation_trend_indicator values:
           date       open       high        low      close         volume       cti
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  0.092891
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520 -0.073467
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810 -0.253139
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830 -0.137334
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.264186
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  0.463465
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.796150
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.793774
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  0.803762
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  0.662023
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  0.412281
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  0.575340
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  0.576939
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  0.649059
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  0.628150
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  0.649050
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  0.746826
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  0.766339
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  0.639013
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  0.360339
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  0.207725
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -0.115125
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -0.530556
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -0.670124
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -0.728117
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -0.698604
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -0.755330
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -0.743784
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -0.665785
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -0.636134
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -0.629765
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -0.664204

Testing indicator 21/201: bamboo_ta.momentum.directional_movement

================================================================================
Testing directional_movement...
================================================================================

=== Directional Movement Test Results ===

Indicator Description:
Name:
    Directional Movement

Description:
    The Directional Movement (DM) indicator was developed by J. Welles Wilder to 
    determine which direction the price of an asset is moving. It compares prior 
    highs and lows to yield two series: +DM (positive directional movement) and 
    -DM (negative directional movement).
    
    +DM measures upward price movement, while -DM measures downward price movement.
    These values are often used as components in calculating the Directional Movement
    Index (DMI) and Average Directional Index (ADX).

More info:
    https://www.investopedia.com/terms/d/directionalmovement.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high' and 'low' columns.
    - length (int): The period for the moving average calculation. Default is 14.
    - mamode (str): Moving average type, one of 'rma', 'sma', or 'ema'. Default is 'rma'.
    - drift (int): The difference period for calculating movements. Default is 1.

Call with:
    result = bta.directional_movement(df)
    df['dmp'] = result['dmp']  # Positive Directional Movement
    df['dmn'] = result['dmn']  # Negative Directional Movement

Returns:
    pd.DataFrame: DataFrame with 'dmp' (+DM) and 'dmn' (-DM) columns.

Last 32 rows of data with directional_movement values:
           date       open       high        low      close         volume          dmp          dmn
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  1006.722706   422.015123
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   934.813942   420.309043
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   868.041517   483.064111
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   806.038552   506.904532
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   940.927227   470.697065
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  1237.146710   437.075846
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  1148.779088   405.856143
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  1066.723439   376.866419
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  1055.658908   349.947389
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   980.254700   646.926147
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   910.236507   600.717136
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  1103.648185   557.808769
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  1071.387601   517.965286
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   994.859915   488.584908
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   977.708492   453.685986
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  1093.586457   421.279844
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  1197.120996   391.188427
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  1151.607353   363.246396
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  1069.349685   717.406654
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   992.967565   973.306178
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   922.041310  1151.460023
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   949.581931  1069.212878
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   881.754650  1146.271959
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   818.772175  1187.991819
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   970.936305  1103.135260
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   907.380855  1024.339884
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   842.567937  1124.949893
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   782.384513  1165.962757
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   726.499905  1082.679703
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   674.607054  1085.784010
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   626.420836  1113.875867
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   669.212205  1034.313305

Testing indicator 22/201: bamboo_ta.momentum.efficiency_ratio

================================================================================
Testing efficiency_ratio...
================================================================================

=== Efficiency Ratio Test Results ===

Indicator Description:
Name:
    Efficiency Ratio

Description:
    The Efficiency Ratio (ER) was developed by Perry J. Kaufman to measure market noise 
    or volatility. It quantifies the efficiency of price movement by comparing the net 
    directional movement to the total volatility over a specified period.
    
    The indicator ranges from 0 to 1, where values close to 1 indicate a strong trend 
    with minimal noise, and values close to 0 indicate a choppy market with high noise. 
    It's often used to adjust the responsiveness of other indicators based on market 
    conditions.

More info:
    https://www.investopedia.com/terms/k/kaufman-efficiency-ratio.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - length (int): The period for the efficiency calculation. Default is 10.
    - drift (int): The period for calculating price changes. Default is 1.

Call with:
    df['er'] = bta.efficiency_ratio(df)['er']

Returns:
    pd.DataFrame: DataFrame with 'er' column.

Last 32 rows of data with efficiency_ratio values:
           date       open       high        low      close         volume        er
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  0.111815
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  0.072010
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  0.185056
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  0.119299
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.038636
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  0.270674
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.477315
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.317926
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  0.403600
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  0.011796
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  0.012179
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  0.207955
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  0.222399
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  0.276893
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  0.162806
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  0.399882
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  0.358948
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  0.358362
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  0.040724
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  0.008767
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  0.058273
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  0.228324
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  0.271093
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  0.392785
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  0.134885
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  0.277265
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  0.508254
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  0.547444
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  0.293840
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  0.240096
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  0.311167
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  0.226832

Testing indicator 23/201: bamboo_ta.momentum.ehlers_fisher_stochastic_center_of_gravity

================================================================================
Testing ehlers_fisher_stochastic_center_of_gravity...
================================================================================

=== Ehlers Fisher Stochastic Center Of Gravity Test Results ===

Indicator Description:
Name:
    Ehlers Fisher Stochastic Center of Gravity Indicator

Description:
    The Fisher Stochastic Center of Gravity indicator, developed by John Ehlers, 
    is used to identify potential turning points in the market by calculating 
    the center of gravity of price movements.

More info:
    https://ninjatraderecosystem.com/user-app-share-download/john-ehlers-the-fisher-stochastic-center-of-gravity/
    https://fxstill.com/indikators/the-fisher-stochastic-center-of-gravity
    https://viewer.mathworks.com/?viewer=plain_code&url=https%3A%2F%2Fes.mathworks.com%2Fmatlabcentral%2Fmlc-downloads%2Fdownloads%2F5a9e5f01-906c-4152-98c6-87484eed86bf%2F853ab8ad-8751-4bcd-ae00-60a9444e9182%2Ffiles%2Fmatlab%2FChapter4-Ehlers%2FEhlerStochCG.m&embed=web
    https://www.tradingview.com/script/TLjl71aL-Ehlers-Fisher-Stochastic-Center-Of-Gravity-CC/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain columns: 'high', 'low'.
    - length (int): Period for the indicator. Default is 8.

Call with:
    fscg = bta.ehlers_fisher_stochastic_center_of_gravity(df)
    df['cg'] = fscg['cg']
    df['trigger'] = fscg['trigger']

Returns:
    pd.DataFrame: DataFrame with 'CG' and 'Trigger' columns.

Last 32 rows of data with ehlers_fisher_stochastic_center_of_gravity values:
           date       open       high        low      close         volume        cg   trigger
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060 -1.032978 -1.722525
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520 -0.583256 -1.032978
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810 -0.163461 -0.583256
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  0.332237 -0.163461
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.495546  0.332237
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  0.468863  0.495546
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.479141  0.468863
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.753346  0.479141
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  1.144250  0.753346
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  1.176979  1.144250
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  0.435022  1.176979
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910 -0.228174  0.435022
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450 -0.616294 -0.228174
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230 -0.873552 -0.616294
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260 -0.482042 -0.873552
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  0.187184 -0.482042
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  0.727363  0.187184
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  1.420277  0.727363
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  0.887833  1.420277
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  0.042526  0.887833
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -0.542853  0.042526
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -1.203733 -0.542853
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -2.214646 -1.203733
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -2.646652 -2.214646
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -1.518747 -2.646652
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -0.661247 -1.518747
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  0.013818 -0.661247
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  0.580210  0.013818
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  0.914123  0.580210
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  1.002448  0.914123
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  0.726427  1.002448
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  0.355716  0.726427

Testing indicator 24/201: bamboo_ta.momentum.ehlers_ray_index

================================================================================
Testing ehlers_ray_index...
================================================================================

=== Ehlers Ray Index Test Results ===

Indicator Description:
Name:
    Ehlers Ray Index

Description:
    The Ehlers Ray Index, also known as Elder Ray Index, was developed by Dr. Alexander 
    Elder. It consists of two separate indicators: Bull Power and Bear Power, which 
    are designed to measure the strength of buyers and sellers in the market.
    
    Bull Power measures the ability of buyers to push prices above an average consensus 
    value (the EMA). Positive values indicate buying pressure, with higher values 
    showing stronger buying pressure.
    
    Bear Power measures the ability of sellers to push prices below the same average 
    consensus value. Negative values indicate selling pressure, with lower values 
    showing stronger selling pressure.
    
    Both indicators are typically used together with trend analysis to identify 
    favorable entry points.

More info:
    https://www.investopedia.com/terms/e/elderray.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', 
      and 'close' columns.
    - length (int): The period for the EMA calculation. Default is 13.

Call with:
    result = bta.ehlers_ray_index(df)
    df['bull_power'] = result['bull_power']
    df['bear_power'] = result['bear_power']

Returns:
    pd.DataFrame: DataFrame with 'bull_power' and 'bear_power' columns.

Last 32 rows of data with ehlers_ray_index values:
           date       open       high        low      close         volume   bull_power   bear_power
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  3269.695197  1897.755197
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  3214.470169  1072.350169
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  3334.314430  -400.685570
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  1359.262369 -1368.087631
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  3533.590602  -878.579398
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  8410.273373 -5177.726627
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  5640.818605  -276.451395
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  3670.463090  2075.283090
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  3962.158363  1268.858363
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  3843.141454 -3222.738546
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  1008.609818 -3004.850182
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  4074.665558 -2155.094442
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  4413.671907  1185.311907
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  3297.800206   607.540206
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  3649.320177  1608.730177
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  5468.847294  1455.987294
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  7115.130538  2655.060538
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  6895.660461  3864.150461
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  5246.687538 -1278.292462
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  2067.022175 -5033.087825
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -2081.852421 -8082.312421
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  -342.404932 -3484.624932
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -1763.971371 -4961.701371
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -2054.476889 -6073.396889
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   884.566952 -5034.403048
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   847.701673 -1089.428327
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  1660.801434 -3103.758566
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  -186.337342 -4230.907342
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -1649.653436 -3247.983436
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -1522.865802 -3853.345802
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -1256.820688 -4750.870688
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   355.153696 -3861.116304

Testing indicator 25/201: bamboo_ta.momentum.elliott_wave_oscillator

================================================================================
Testing elliott_wave_oscillator...
================================================================================

=== Elliott Wave Oscillator Test Results ===

Indicator Description:
Name:
    Elliott Wave Oscillator

Description:
    The Elliott Wave Oscillator (EWO) is a tool to help identify the trend and 
    overall market pattern, assisting in finding future trading opportunities.
    It is derived by calculating the difference between a short and long period 
    simple moving average, then normalizing the result with the close price.

More info:
    https://www.investopedia.com/terms/e/elliottwavetheory.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain at least the 
      column specified.
    - column (str): The column on which EWO is to be calculated. Default is 'close'.
    - sma1_period (int): The period for the shorter SMA used in EWO calculation. 
      Default is 5.
    - sma2_period (int): The period for the longer SMA used in EWO calculation. 
      Default is 35.

Call with:
    df['ewo'] = bta.elliott_wave_oscillator(df, 'close', 5, 35)

Returns:
    pd.DataFrame: DataFrame with 'ewo' column.

Last 32 rows of data with elliott_wave_oscillator values:
           date       open       high        low      close         volume        ewo
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  11.623213
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  11.747128
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  11.135765
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  10.488661
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   9.665569
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   9.154638
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   8.544158
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   8.464303
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   8.484106
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   7.684612
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   6.860798
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   6.105114
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   5.518122
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   4.801070
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   4.921342
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   5.625885
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   6.002629
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   6.663970
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   6.534518
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   5.608977
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   4.029815
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   2.052041
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  -0.362780
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  -1.618900
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  -1.497209
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  -1.306766
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  -1.594328
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  -1.668578
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  -1.492092
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  -2.440979
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  -3.889786
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -4.379923

Testing indicator 26/201: bamboo_ta.momentum.fisher_transform

================================================================================
Testing fisher_transform...
================================================================================

=== Fisher Transform Test Results ===

Indicator Description:
Name:
    Fisher Transform

Description:
    The Fisher Transform is a technical indicator created by John F. Ehlers that 
    converts prices into a Gaussian normal distribution. The indicator aims to 
    identify significant price reversals by normalizing prices over a specified 
    period and applying a mathematical formula to amplify and clarify price turning points.
    
    The indicator consists of two lines: the Fisher Transform line and its signal line. 
    A reversal signal is suggested when these two lines cross. The indicator helps 
    traders identify potential overbought and oversold conditions and price reversal points.

More info:
    https://www.investopedia.com/terms/f/fisher-transform.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high' and 'low' columns.
    - length (int): The period for price normalization. Default is 9.
    - signal (int): The period for the signal line. Default is 1.

Call with:
    result = bta.fisher_transform(df)
    df['fisher'] = result['fisher']
    df['fisher_signal'] = result['fisher_signal']

Returns:
    pd.DataFrame: DataFrame with 'fisher' and 'fisher_signal' columns.

Last 32 rows of data with fisher_transform values:
           date       open       high        low      close         volume    fisher  fisher_signal
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  0.558461       0.519322
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  0.659547       0.558461
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  0.797084       0.659547
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  0.700229       0.797084
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.891886       0.700229
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  1.240884       0.891886
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  1.648190       1.240884
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  2.072773       1.648190
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  2.498701       2.072773
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  1.989262       2.498701
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  1.264783       1.989262
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  0.993519       1.264783
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  1.132451       0.993519
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  1.347316       1.132451
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  1.688440       1.347316
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  2.080464       1.688440
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  2.490446       2.080464
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  2.904669       2.490446
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  2.381209       2.904669
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  1.391442       2.381209
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  0.495883       1.391442
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -0.068721       0.495883
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -0.584048      -0.068721
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -1.094092      -0.584048
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -1.355037      -1.094092
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -1.309724      -1.355037
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -1.170414      -1.309724
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -1.146508      -1.170414
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -1.274684      -1.146508
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -1.578021      -1.274684
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -1.954460      -1.578021
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -2.007727      -1.954460

Testing indicator 27/201: bamboo_ta.momentum.inertia

================================================================================
Testing inertia...
================================================================================

=== Inertia Test Results ===

Indicator Description:
Name:
    Inertia

Description:
    Inertia was developed by Donald Dorsey and was introduced in his article in 
    September 1995. It combines the Relative Vigor Index (RVI) with a Least Squares 
    Moving Average (LSQRMA) to create a momentum oscillator that attempts to identify 
    the "inertia" of price movement.
    
    The indicator is essentially the Relative Vigor Index smoothed by the Least 
    Squares Moving Average. Traditionally, values above 50 indicate positive inertia
    (bullish), while values below 50 indicate negative inertia (bearish).

More info:
    https://www.investopedia.com/terms/r/relative_vigor_index.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'open', 'high', 
      'low', and 'close' columns.
    - length (int): The period for the linear regression calculation. Default is 20.
    - rvi_length (int): The period for the RVI calculation. Default is 14.
    - swma_length (int): The period for the SWMA used in RVI calculation. Default is 4.

Call with:
    df['inertia'] = bta.inertia(df)['inertia']

Returns:
    pd.DataFrame: DataFrame with 'inertia' column.

Last 32 rows of data with inertia values:
           date       open       high        low      close         volume   inertia
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  0.186938
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  0.159229
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  0.135893
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  0.114456
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.091541
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  0.064582
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.036308
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.010658
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880 -0.008066
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950 -0.017357
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -0.019024
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910 -0.014333
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450 -0.004541
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  0.009067
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  0.025199
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  0.040584
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  0.053976
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  0.065913
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  0.075023
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  0.078951
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  0.074504
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  0.063683
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  0.049092
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  0.032424
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  0.018502
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  0.007412
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -0.004695
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -0.023569
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -0.048007
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -0.074299
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -0.103559
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -0.135614

Testing indicator 28/201: bamboo_ta.momentum.kaufmans_adaptive_moving_average

================================================================================
Testing kaufmans_adaptive_moving_average...
================================================================================

=== Kaufmans Adaptive Moving Average Test Results ===

Indicator Description:
Name:
    Kaufman's Adaptive Moving Average (KAMA)

Description:
    Moving average designed to account for market noise or volatility. KAMA
    will closely follow prices when the price swings are relatively small and
    the noise is low. KAMA will adjust when the price swings widen and follow
    prices from a greater distance. This trend-following indicator can be
    used to identify the overall trend, time turning points, and filter price
    movements.

More info:
    https://www.investopedia.com/terms/k/kama.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - close_col (str): Column name for the close prices. Default is 'close'.
    - window (int): Number of periods for the efficiency ratio. Default is 10.
    - pow1 (int): Number of periods for the fastest EMA constant. Default is 2.
    - pow2 (int): Number of periods for the slowest EMA constant. Default is 30.
    - fillna (bool): If True, fill nan values with the close prices. Default is False.

Call with:
    df['kama'] = bta.kaufmans_adaptive_moving_average(df)['kama']

Returns:
    pd.DataFrame: DataFrame with 'kama' column.

Last 32 rows of data with kaufmans_adaptive_moving_average values:
           date       open       high        low      close         volume          kama
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  95018.912550
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  95151.106990
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  95177.177354
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  95193.722030
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  95295.452993
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  95312.964124
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  95345.794810
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  95412.784771
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  95534.930611
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  95590.424834
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  95626.685709
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  95854.211487
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  95981.665179
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  96133.268382
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  96344.840463
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  96824.902474
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  97728.182718
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  98555.395570
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  98571.629068
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  98565.356216
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  98556.463293
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  98537.973018
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  98414.204264
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  98360.245450
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  98363.904745
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  98376.221937
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  98309.141367
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  98101.725190
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  97990.392901
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  97570.190722
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  96874.794307
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  96455.901069

Testing indicator 29/201: bamboo_ta.momentum.kdj

================================================================================
Testing kdj...
================================================================================

=== Kdj Test Results ===

Indicator Description:
Name:
    KDJ

Description:
    The KDJ indicator, also known as the Random Index, is a technical indicator used 
    to analyze market momentum and trend reversals. It is a modification of the 
    Stochastic Oscillator with an additional J line that represents the divergence 
    of the D value from the K.
    
    The indicator consists of three lines:
    - K line: Similar to %K in the Stochastic Oscillator
    - D line: Similar to %D in the Stochastic Oscillator
    - J line: Represents the divergence of D from K (calculated as 3K - 2D)
    
    Unlike the Stochastic Oscillator, which is bounded between 0 and 100, the J line 
    can go beyond these boundaries, providing additional signals about market extremes.

More info:
    https://www.investopedia.com/terms/s/stochasticoscillator.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', 
      and 'close' columns.
    - length (int): The period for calculating highest high and lowest low. Default is 9.
    - signal (int): The smoothing period. Default is 3.

Call with:
    result = bta.kdj(df)
    df['k'] = result['k']
    df['d'] = result['d']
    df['j'] = result['j']

Returns:
    pd.DataFrame: DataFrame with 'k', 'd', and 'j' columns.

Last 32 rows of data with kdj values:
           date       open       high        low      close         volume          k          d          j
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  63.302950  63.798306  62.312239
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  68.457518  65.351377  74.669801
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  66.467894  65.723549  67.956584
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  65.178892  65.541997  64.452683
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  75.110186  68.731393  87.867771
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  65.885522  67.782769  62.091027
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  66.592801  67.386113  65.006177
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  67.287925  67.353384  67.157007
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  70.885478  68.530749  75.594938
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  63.880649  66.980715  57.680515
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  57.534111  63.831847  44.938639
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  64.420739  64.028144  65.205928
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  66.262560  64.772950  69.241781
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  70.973809  66.839903  79.241621
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  75.825648  69.835151  87.806642
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  81.523364  73.731222  97.107649
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  83.444642  76.969029  96.395870
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  83.754647  79.230901  92.802137
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  69.900175  76.120659  57.459206
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  51.335981  67.859100  18.289744
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  45.747439  60.488546  16.265224
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  40.960049  53.979047  14.922054
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  33.414321  47.124138   5.994686
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  27.753580  40.667286   1.926170
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  31.800270  37.711614  19.977583
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  36.082014  37.168414  33.909213
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  32.355241  35.564023  25.937678
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  28.088499  33.072182  18.121135
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  31.951193  32.698519  30.456542
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  26.755968  30.717669  18.832567
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  22.823923  28.086420  12.298928
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  23.301206  26.491349  16.920921

Testing indicator 30/201: bamboo_ta.momentum.know_sure_thing

================================================================================
Testing know_sure_thing...
================================================================================

=== Know Sure Thing Test Results ===

Indicator Description:
Name:
    Know Sure Thing

Description:
    The Know Sure Thing (KST) is a momentum oscillator developed by Martin Pring. 
    It is based on the Rate of Change (ROC) of different time periods, which are 
    then smoothed and weighted to create a composite momentum indicator.
    
    The KST uses four different ROC periods, each smoothed with a simple moving 
    average (SMA) and assigned different weights. These weighted values are then 
    summed to create the KST line. A signal line (typically a 9-period SMA of the KST) 
    is used to identify potential buy and sell signals.
    
    The indicator is designed to capture momentum across different timeframes, 
    making it potentially more responsive and less prone to false signals than 
    simpler momentum indicators.

More info:
    https://www.investopedia.com/terms/k/know-sure-thing-kst.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - roc1 (int): First ROC period. Default is 10.
    - roc2 (int): Second ROC period. Default is 15.
    - roc3 (int): Third ROC period. Default is 20.
    - roc4 (int): Fourth ROC period. Default is 30.
    - sma1 (int): SMA period for the first ROC. Default is 10.
    - sma2 (int): SMA period for the second ROC. Default is 10.
    - sma3 (int): SMA period for the third ROC. Default is 10.
    - sma4 (int): SMA period for the fourth ROC. Default is 15.
    - signal (int): Period for the signal line. Default is 9.

Call with:
    result = bta.know_sure_thing(df)
    df['kst'] = result['kst']
    df['kst_signal'] = result['kst_signal']

Returns:
    pd.DataFrame: DataFrame with 'kst' and 'kst_signal' columns.

Last 32 rows of data with know_sure_thing values:
           date       open       high        low      close         volume           kst    kst_signal
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  28962.430267  31620.836743
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  27576.588211  31118.716813
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  26122.158510  30391.195526
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  24698.288952  29405.574163
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  23533.672082  28328.820124
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  22463.698713  27265.932131
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  21770.650479  26200.123136
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  20680.097754  25097.641960
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  19941.445887  23972.114539
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  18456.110671  22804.745695
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  17377.365913  21671.498773
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  16716.375702  20626.411795
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  15886.719842  19647.348560
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  15385.039232  18741.944910
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  14577.644786  17865.716696
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  14300.871131  17035.741213
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  13982.878787  16291.605772
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  13654.501974  15593.056449
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  12636.252353  14946.405524
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  11409.380885  14283.296077
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  10370.396473  13578.187274
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   9080.628222  12821.954871
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   7812.613823  11980.574270
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   6366.738821  11068.251385
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   5456.950711  10085.593561
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   4576.016901   9040.386685
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   3284.874032   7888.205802
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   1884.733802   6693.592630
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900    982.110599   5535.007043
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780    171.931595   4401.844278
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   -788.105066   3305.318357
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -1756.414769   2242.092958

Testing indicator 31/201: bamboo_ta.momentum.ma_streak

================================================================================
Testing ma_streak...
================================================================================

=== Ma Streak Test Results ===

Indicator Description:
Name:
    MA Streak Indicator

Description:
    This indicator tracks how many bars a given moving average is rising or falling.
    It's color-coded green (positive) or red (negative).

More info:
    https://www.tradingview.com/script/Yq1z7cIv-MA-Streak-Can-Show-When-a-Run-Is-Getting-Long-in-the-Tooth/

Call with:
    df['ma_streak'] = bta.ma_streak(df, length=10, src='close', matype=1)['ma_streak']

Parameters:
    - df (pd.DataFrame): Input DataFrame containing the data.
    - length (int): Period for the moving average calculation. Default is 10.
    - src (str): The column name to use for the moving average calculation. Default is 'close'.
    - matype (int): Type of moving average to use. Default is 1 (SMA).

    MA types:
    1 - Simple Moving Average (SMA)
    2 - Exponential Moving Average (EMA)
    3 - Hull Moving Average (HMA)
    4 - Weighted Moving Average (WMA)
    5 - Volume Weighted Moving Average (VWMA)

Returns:
    pd.DataFrame: DataFrame with 'ma_streak' column.

Last 32 rows of data with ma_streak values:
           date       open       high        low      close         volume  ma_streak
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060         35
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520         -1
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810         -2
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830         -3
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280          1
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662          2
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100          3
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900          4
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880          5
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950         -1
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330          1
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910          2
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450          3
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230          4
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260          5
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775          6
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740          7
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466          8
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550         -1
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000          1
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700          2
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430         -1
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360         -2
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030         -3
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880         -4
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100         -5
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270         -6
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290         -7
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900         -8
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780         -9
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500        -10
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890        -11

Testing indicator 32/201: bamboo_ta.momentum.momentum

================================================================================
Testing momentum...
================================================================================

=== Momentum Test Results ===

Indicator Description:
Name:
    Momentum

Description:
    The Momentum indicator measures the amount that a security's price has changed over 
    a given time period. It simply shows the difference between the current price and 
    the price "n" periods ago.
    
    It is one of the simplest momentum indicators to use and understand. The momentum 
    indicator can be used as a trend-following oscillator similar to the Moving Average 
    Convergence Divergence (MACD). When used this way, buy signals are generated when 
    the indicator crosses above zero, and sell signals when it crosses below zero.

More info:
    https://www.investopedia.com/terms/m/momentum.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - length (int): The period for momentum calculation. Default is 10.

Call with:
    df['mom'] = bta.momentum(df)['mom']

Returns:
    pd.DataFrame: DataFrame with 'mom' column.

Last 32 rows of data with momentum values:
           date       open       high        low      close         volume       mom
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   2121.43
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  -1131.94
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  -3051.38
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  -1822.71
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280    687.28
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   3935.62
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   7775.68
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   3968.88
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   5465.61
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   -183.53
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330    185.01
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   3939.82
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   4163.67
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   5574.56
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   2832.68
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   7518.36
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   6317.82
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   6301.75
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   -905.58
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000    185.39
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   1212.44
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  -3833.01
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  -4818.02
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  -6542.78
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  -2756.42
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  -5034.39
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -10267.06
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -11834.71
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  -4904.01
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  -3723.66
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  -5013.39
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -3715.99

Testing indicator 33/201: bamboo_ta.momentum.momentum_divergence

================================================================================
Testing momentum_divergence...
================================================================================

=== Momentum Divergence Test Results ===

Indicator Description:
Name:
    Momentum Divergence (momdiv)

Description:
    A self-contained implementation of the Momentum Divergence indicator. It calculates
    momentum and applies Bollinger Bands to identify potential buy and sell signals
    based on momentum divergence. Additionally, it detects if the current high or low
    breaks the highest high or lowest low over a specified lookback period.

More info:
    https://www.tradingview.com/script/Yq1z7cIv-MA-Streak-Can-Show-When-a-Run-Is-Getting-Long-in-the-Tooth/

Call with:
    momdiv_result = bta.momentum_divergence(df, mom_length=5, bb_length=5, bb_dev=1.0, lookback=5)
    df['momentum_divergence_mom'] = momdiv_result['momentum_divergence_mom']
    df['momentum_divergence_upperb'] = momdiv_result['momentum_divergence_upperb']
    df['momentum_divergence_lowerb'] = momdiv_result['momentum_divergence_lowerb']
    df['momentum_divergence_buy'] = momdiv_result['momentum_divergence_buy']
    df['momentum_divergence_sell'] = momdiv_result['momentum_divergence_sell']
    df['momentum_divergence_coh'] = momdiv_result['momentum_divergence_coh']
    df['momentum_divergence_col'] = momdiv_result['momentum_divergence_col']

Parameters:
    - df (pd.DataFrame): Input DataFrame containing OHLC data.
    - mom_length (int, default=10): Lookback period for momentum calculation.
    - bb_length (int, default=20): Lookback period for Bollinger Bands calculation.
    - bb_dev (float, default=2.0): Number of standard deviations for Bollinger Bands.
    - lookback (int, default=30): Lookback period for detecting highest high and lowest low.

Returns:
    - pd.DataFrame: DataFrame with the following columns:
    - 'momentum_divergence_mom': Calculated momentum.
    - 'momentum_divergence_upperb': Upper Bollinger Band for momentum.
    - 'momentum_divergence_lowerb': Lower Bollinger Band for momentum.
    - 'momentum_divergence_buy': Boolean indicating a buy signal (momentum crossed below lower band).
    - 'momentum_divergence_sell': Boolean indicating a sell signal (momentum crossed above upper band).
    - 'momentum_divergence_coh': Boolean indicating the current high is the highest high over the lookback period.
    - 'momentum_divergence_col': Boolean indicating the current low is the lowest low over the lookback period.

Last 32 rows of data with momentum_divergence values:
           date       open       high        low      close         volume  momentum_divergence_mom  momentum_divergence_upperb  momentum_divergence_lowerb  momentum_divergence_buy  momentum_divergence_sell  momentum_divergence_coh  momentum_divergence_col
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060                  2121.43                24947.649931                -1620.057931                        0                         0                        0                        0
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520                 -1131.94                24606.486790                -3307.286790                        0                         0                        0                        0
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810                 -3051.38                24270.503500                -5134.168500                        0                         0                        0                        0
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830                 -1822.71                22792.469435                -5998.326435                        0                         0                        0                        0
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280                   687.28                21248.485349                -6333.172349                        0                         0                        0                        0
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662                  3935.62                18696.890532                -5554.021532                        0                         0                        1                        0
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100                  7775.68                17688.643095                -5269.699095                        0                         0                        0                        0
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900                  3968.88                16616.648491                -5200.626491                        0                         0                        0                        0
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880                  5465.61                15478.485959                -4911.332959                        0                         0                        0                        0
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950                  -183.53                13714.675899                -4729.208899                        0                         0                        0                        0
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330                   185.01                12068.696665                -4456.383665                        0                         0                        0                        0
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910                  3939.82                11310.138800                -4270.756800                        0                         0                        0                        0
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450                  4163.67                10159.648252                -3797.898252                        0                         0                        0                        0
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230                  5574.56                 9899.969837                -3710.483837                        0                         0                        0                        0
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260                  2832.68                 8531.447684                -3116.138684                        0                         0                        0                        0
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775                  7518.36                 9177.698484                -3208.347484                        0                         0                        1                        0
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740                  6317.82                 9547.691393                -3084.382393                        0                         0                        1                        0
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466                  6301.75                 9590.989459                -3098.217459                        0                         0                        1                        0
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550                  -905.58                 9477.121506                -3592.897506                        0                         0                        0                        0
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000                   185.39                 9252.987334                -3865.145334                        0                         0                        0                        0
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700                  1212.44                 9236.772854                -3939.829854                        0                         0                        0                        0
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430                 -3833.01                 9525.144228                -4498.308228                        0                         0                        0                        0
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360                 -4818.02                 9768.646055                -4918.474055                        0                         0                        0                        0
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030                 -6542.78                10363.784162                -5985.619162                        1                         0                        0                        0
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880                 -2756.42                10465.278600                -6431.483600                        0                         0                        0                        0
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100                 -5034.39                10524.994517                -7388.200517                        0                         0                        0                        0
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270                -10267.06                10574.456421                -9241.936421                        1                         0                        0                        0
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290                -11834.71                11107.596044               -11355.435044                        1                         0                        0                        0
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900                 -4904.01                10459.310567               -11744.111567                        0                         0                        0                        0
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780                 -3723.66                10364.085703               -12002.899703                        0                         0                        0                        0
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500                 -5013.39                10246.604026               -12405.258026                        0                         0                        0                        0
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890                 -3715.99                 9665.316341               -12589.551341                        0                         0                        0                        0

Testing indicator 34/201: bamboo_ta.momentum.moving_average_convergence_divergence

================================================================================
Testing moving_average_convergence_divergence...
================================================================================

=== Macd Test Results ===

Indicator Description:
Name:
    Moving Average Convergence Divergence (MACD)

Description:
    MACD is a trend-following momentum indicator that shows the relationship 
    between two moving averages of a security's price.

More info:
    https://www.investopedia.com/terms/m/macd.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain at least the "close" column.
    - column (str): The column on which MACD is to be calculated. Default is "close".
    - short_window (int): The short-term period for EMA. Default is 12.
    - long_window (int): The long-term period for EMA. Default is 26.
    - signal_window (int): The signal line period for EMA. Default is 9.

Call with:
    macd_result = bta.macd(df, 'close', 12, 26, 9)
    df['macd'] = macd_result['macd']
    df['macd_signal'] = macd_result['macd_signal']
    df['macd_histogram'] = macd_result['macd_histogram']

Returns:
    pd.DataFrame: DataFrame with 'macd', 'macd_signal', and 'macd_histogram' columns.

Last 32 rows of data with macd values:
           date       open       high        low      close         volume         macd  macd_signal  macd_histogram
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  5182.624965  5775.950946     -593.325980
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  5011.167475  5622.994251     -611.826777
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  4712.469013  5440.889204     -728.420190
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  4425.466185  5237.804600     -812.338415
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  4368.560194  5063.955719     -695.395524
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  4143.230542  4879.810683     -736.580142
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  4142.453628  4732.339272     -589.885644
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  4101.908711  4606.253160     -504.344449
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  4125.314162  4510.065360     -384.751199
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  3790.863684  4366.225025     -575.361341
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  3431.107284  4179.201477     -748.094193
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  3471.672985  4037.695779     -566.022793
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  3374.490637  3905.054750     -530.564113
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  3373.168049  3798.677410     -425.509361
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  3333.352141  3705.612356     -372.260215
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  3506.995835  3665.889052     -158.893217
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  3730.285842  3678.768410       51.517432
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  3868.707064  3716.756141      151.950923
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  3460.042014  3665.413315     -205.371301
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  2881.685157  3508.667684     -626.982527
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  2423.124940  3291.559135     -868.434195
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  1995.281181  3032.303544    -1037.022363
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  1469.360045  2719.714844    -1250.354799
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  1016.254198  2379.022715    -1362.768517
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   951.382276  2093.494627    -1142.112352
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   950.821741  1864.960050     -914.138309
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   649.336173  1621.835275     -972.499101
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   286.664277  1354.801075    -1068.136798
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900    79.102258  1099.661312    -1020.559054
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  -209.007042   837.927641    -1046.934683
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  -507.828208   568.776471    -1076.604679
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -673.622817   320.296613     -993.919431

Testing indicator 35/201: bamboo_ta.momentum.moving_average_convergence_divergence_leader

================================================================================
Testing moving_average_convergence_divergence_leader...
================================================================================

=== Macd Leader Test Results ===

Indicator Description:
Name:
    MACD Leader

Description:
    The MACD Leader is a variation of the standard MACD that aims to provide an 
    earlier signal by using a different calculation method.

More info:
    https://www.investopedia.com/terms/m/macd.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the source column.
    - src (str): The column to use for calculations. Default is 'close'.
    - fast_length (int): Length for the fast EMA. Default is 12.
    - slow_length (int): Length for the slow EMA. Default is 26.
    - signal_length (int): Length for the signal EMA. Default is 9.

Call with:
    df['macd_leader'] = bta.macd_leader(df, 'close')['macd_leader']

Returns:
    pd.DataFrame: DataFrame with 'macd_leader' column.

Last 32 rows of data with macd_leader values:
           date       open       high        low      close         volume  macd_leader
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  -435.386719
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  -661.129286
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810 -1091.110801
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830 -1456.102480
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280 -1376.593284
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662 -1608.745270
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100 -1420.593550
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900 -1327.623575
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880 -1134.645991
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950 -1599.870423
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -2059.579695
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910 -1760.673272
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450 -1742.202037
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230 -1557.939816
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260 -1464.305062
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775 -1004.157186
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  -508.602634
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  -219.142783
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  -930.947063
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -1862.555543
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -2477.570624
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -2970.817245
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -3584.972316
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -4004.140317
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -3691.880369
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -3304.501704
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -3496.719906
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -3777.739802
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -3754.388078
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -3878.620550
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -4009.834504
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -3892.504319

Testing indicator 36/201: bamboo_ta.momentum.moving_average_convergence_divergence_v

================================================================================
Testing moving_average_convergence_divergence_v...
================================================================================

=== Macd V Test Results ===

Indicator Description:
Name:
    MACD-V (Volatility Normalized Momentum)

Description:
    The MACD-V is a refined version of the traditional MACD indicator, adjusted for volatility
    using the Average True Range (ATR). This normalization allows for more stable and comparable
    momentum readings across different markets and timeframes.

More info:
    https://www.investopedia.com/terms/m/macd.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain at least the "close" column.
    - column (str): The column on which MACD-V is to be calculated. Default is "close".
    - short_window (int): The short-term period for EMA. Default is 12.
    - long_window (int): The long-term period for EMA. Default is 26.
    - atr_window (int): The period for ATR calculation. Default is 26.
    - signal_window (int): The period for the signal line EMA. Default is 9.
    - fillna (bool): If True, fill nan values. Default is False.

Call with:
    macd_v_result = bta.macd_v(df, 'close', 12, 26, 26, 9)
    df['macd_v'] = macd_v_result['macd_v']
    df['macd_v_signal'] = macd_v_result['macd_v_signal']

Returns:
    pd.DataFrame: DataFrame with 'macd_v' and 'macd_v_signal' columns.

Last 32 rows of data with macd_v values:
           date       open       high        low      close         volume      macd_v  macd_v_signal
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  163.729484     182.764568
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  160.305904     178.272835
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  149.629455     172.544159
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  141.244638     166.284255
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  137.273204     160.482045
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  115.648713     151.515378
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  112.799790     143.772261
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  114.179722     137.853753
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  115.947446     133.472492
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  102.654457     127.308885
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   92.603224     120.367752
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   91.305271     114.555256
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   89.267596     109.497724
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   90.233254     105.644830
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   90.753335     102.666531
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   95.142316     101.161688
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  100.389236     101.007198
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  104.857138     101.777186
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   91.088264      99.639401
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   73.408587      94.393238
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   60.497256      87.614042
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   50.231772      80.137588
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   37.271037      71.564278
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   25.758547      62.403131
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   23.659053      54.654316
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   24.126031      48.548659
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   16.344816      42.107890
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290    7.210778      35.128468
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900    2.036583      28.510091
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   -5.465216      21.715029
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  -13.323187      14.707386
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -17.601042       8.245701

Testing indicator 37/201: bamboo_ta.momentum.percentage_price_oscillator

================================================================================
Testing percentage_price_oscillator...
================================================================================

=== Percentage Price Oscillator Test Results ===

Indicator Description:
Name:
    Percentage Price Oscillator (PPO)

Description:
    The Percentage Price Oscillator (PPO) is a technical indicator that shows the relationship
    between two moving averages of a security's price. It is calculated by subtracting a slow
    exponential moving average (EMA) from a fast EMA and then dividing the result by the slow EMA.

More info:
    https://www.investopedia.com/terms/p/ppo.asp

Call with:
    ppo = bta.percentage_price_oscillator(df)
    df['ppo'] = ppo['ppo']
    df['ppo_signal'] = ppo['ppo_signal']
    df['ppo_hist'] = ppo['ppo_hist']

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the close column.
    - close_col (str): Name of the column containing close price data. Default is 'close'.
    - window_slow (int): n period long-term. Default is 26.
    - window_fast (int): n period short-term. Default is 12.
    - window_sign (int): n period to signal. Default is 9.
    - fillna (bool): if True, fill nan values. Default is False.

Returns:
    pd.DataFrame: DataFrame with columns ['ppo', 'ppo_signal', 'ppo_hist'].

Last 32 rows of data with percentage_price_oscillator values:
           date       open       high        low      close         volume       ppo  ppo_signal  ppo_hist
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  5.801048    6.689932 -0.888884
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  5.572879    6.466522 -0.893643
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  5.215265    6.216270 -1.001005
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  4.875695    5.948155 -1.072460
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  4.782473    5.715019 -0.932546
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  4.515287    5.475073 -0.959785
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  4.485542    5.277167 -0.791624
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  4.415147    5.104763 -0.689615
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  4.411483    4.966107 -0.554623
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  4.041784    4.781242 -0.739459
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  3.650140    4.555022 -0.904882
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  3.672672    4.378552 -0.705880
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  3.554607    4.213763 -0.659156
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  3.535307    4.078072 -0.542765
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  3.477362    3.957930 -0.480567
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  3.634341    3.893212 -0.258871
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  3.837569    3.882083 -0.044515
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  3.953072    3.896281  0.056791
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  3.529249    3.822875 -0.293625
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  2.940607    3.646421 -0.705814
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  2.473027    3.411742 -0.938715
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  2.037435    3.136881 -1.099446
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  1.503524    2.810210 -1.306685
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  1.042132    2.456594 -1.414462
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  0.974759    2.160227 -1.185468
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  0.972835    1.922749 -0.949914
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  0.665351    1.671269 -1.005918
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  0.294470    1.395909 -1.101439
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  0.081383    1.133004 -1.051621
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -0.215602    0.863283 -1.078885
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -0.525519    0.585523 -1.111041
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -0.698726    0.328673 -1.027399

Testing indicator 38/201: bamboo_ta.momentum.percentage_volume_oscillator

================================================================================
Testing percentage_volume_oscillator...
================================================================================

=== Percentage Volume Oscillator Test Results ===

Indicator Description:
Name:
    Percentage Volume Oscillator (PVO)

Description:
    The Percentage Volume Oscillator (PVO) is a technical indicator that shows the relationship
    between two moving averages of a security's volume. It is calculated by subtracting a slow
    exponential moving average (EMA) from a fast EMA and then dividing the result by the slow EMA.

More info:
    https://www.investopedia.com/terms/p/pvo.asp
    https://www.tradingview.com/script/DdT7MmPa/

Call with:
    pvo = bta.percentage_volume_oscillator(df)
    df['pvo'] = pvo['pvo']
    df['pvo_signal'] = pvo['pvo_signal']
    df['pvo_hist'] = pvo['pvo_hist']

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the volume column.
    - volume_col (str): Name of the column containing volume data. Default is 'volume'.
    - window_slow (int): n period long-term. Default is 26.
    - window_fast (int): n period short-term. Default is 12.
    - window_sign (int): n period to signal. Default is 9.
    - fillna (bool): if True, fill nan values. Default is False.


Returns:
    pd.DataFrame: DataFrame with columns ['pvo', 'pvo_signal', 'pvo_hist'].

Last 32 rows of data with percentage_volume_oscillator values:
           date       open       high        low      close         volume        pvo  pvo_signal   pvo_hist
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  -8.134218    0.972794  -9.107012
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520 -11.985644   -1.618893 -10.366750
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810 -10.199467   -3.335008  -6.864459
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  -9.166425   -4.501292  -4.665134
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  -6.458856   -4.892804  -1.566052
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   8.230056   -2.268232  10.498288
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   7.186117   -0.377362   7.563480
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   0.862493   -0.129391   0.991884
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  -4.676918   -1.038897  -3.638021
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  -1.063935   -1.043904  -0.020031
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   1.220988   -0.590926   1.811914
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   0.304516   -0.411838   0.716353
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  -2.116108   -0.752692  -1.363417
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  -5.632144   -1.728582  -3.903562
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260 -10.328104   -3.448486  -6.879617
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775 -12.313562   -5.221502  -7.092060
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  -9.163772   -6.009956  -3.153816
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  -9.514613   -6.710887  -2.803726
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  -4.712688   -6.311247   1.598559
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  -0.065387   -5.062075   4.996688
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   4.827980   -3.084064   7.912044
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   0.799274   -2.307397   3.106671
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  -3.461762   -2.538270  -0.923493
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  -3.955623   -2.821740  -1.133883
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  -6.407907   -3.538974  -2.868934
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -10.676561   -4.966491  -5.710070
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -12.469976   -6.467188  -6.002788
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -12.416461   -7.657043  -4.759419
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -17.419363   -9.609507  -7.809856
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -20.083946  -11.704395  -8.379551
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -17.696998  -12.902915  -4.794082
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -18.143154  -13.950963  -4.192191

Testing indicator 39/201: bamboo_ta.momentum.pretty_good_oscillator

================================================================================
Testing pretty_good_oscillator...
================================================================================

=== Pretty Good Oscillator Test Results ===

Indicator Description:
Name:
    Pretty Good Oscillator

Description:
    The Pretty Good Oscillator (PGO) was created by Mark Johnson to measure the distance 
    of the current close price from its N-day Simple Moving Average (SMA), expressed in 
    terms of an average true range (ATR) over a similar period.
    
    Unlike traditional oscillators that are bounded within specified ranges, the PGO's 
    values can extend beyond traditional bounds, providing signals for potentially strong 
    trending moves. Readings above +3.0 indicate potentially strong bullish price moves, 
    while readings below -3.0 indicate potentially strong bearish price moves.
    
    Johnson designed this as a breakout system for longer-term trades, going long when 
    the indicator is greater than 3.0 and short when less than -3.0.

More info:
    https://library.tradingtechnologies.com/trade/chrt-ti-pretty-good-oscillator.html

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', 
      and 'close' columns.
    - length (int): The period for calculations. Default is 14.

Call with:
    df['pgo'] = bta.pretty_good_oscillator(df)['pgo']

Returns:
    pd.DataFrame: DataFrame with 'pgo' column.

Last 32 rows of data with pretty_good_oscillator values:
           date       open       high        low      close         volume       pgo
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  0.416949
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  0.517373
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810 -0.021507
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830 -0.098097
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.629132
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  0.121122
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.676896
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.729487
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  1.018800
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  0.033634
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -0.190322
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  0.694807
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  0.410449
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  0.698695
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  0.660600
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  1.291654
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  1.485079
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  1.368799
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550 -0.158539
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -0.743746
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -0.616114
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -0.718327
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -1.129905
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -1.174243
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -0.325651
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -0.142470
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -0.917645
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -1.155713
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -0.892345
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -1.158410
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -1.166437
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -0.694249

Testing indicator 40/201: bamboo_ta.momentum.psychological_line

================================================================================
Testing psychological_line...
================================================================================

=== Psychological Line Test Results ===

Indicator Description:
Name:
    Psychological Line

Description:
    The Psychological Line (PSL) is an oscillator-type indicator that calculates
    the percentage of bars that close higher over a given period. It measures the 
    buying pressure or market optimism by comparing the number of rising periods 
    to the total number of periods.
    
    When using the close-open mode, it calculates the percentage of bars where the 
    close is higher than the open. When using the close-close mode, it calculates 
    the percentage of bars where the close is higher than the previous close.
    
    Values range from 0 to 100. High values (typically above 70-80) indicate 
    potential overbought conditions, while low values (typically below 20-30) 
    indicate potential oversold conditions.

More info:
    https://www.quantshare.com/item-851-psychological-line

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column,
      and optionally the 'open' column.
    - length (int): The period for the calculation. Default is 12.
    - scalar (float): Multiplier for the result. Default is 100.
    - drift (int): The difference period for the close-close calculation. Default is 1.

Call with:
    df['psl'] = bta.psychological_line(df)['psl']

Returns:
    pd.DataFrame: DataFrame with 'psl' column.

Last 32 rows of data with psychological_line values:
           date       open       high        low      close         volume        psl
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  58.333333
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  58.333333
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  50.000000
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  50.000000
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  50.000000
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  50.000000
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  50.000000
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  58.333333
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  66.666667
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  58.333333
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  58.333333
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  58.333333
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  58.333333
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  58.333333
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  58.333333
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  58.333333
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  58.333333
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  66.666667
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  58.333333
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  50.000000
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  50.000000
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  50.000000
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  50.000000
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  41.666667
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  50.000000
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  50.000000
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  50.000000
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  41.666667
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  41.666667
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  33.333333
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  33.333333
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  41.666667

Testing indicator 41/201: bamboo_ta.momentum.qualitative_quantitative_estimation

================================================================================
Testing qualitative_quantitative_estimation...
================================================================================

=== Qqe Mod Test Results ===

Indicator Description:
Name:
    Qualitative Quantitative Estimation Modified (QQE Mod)

Description:
    The Qualitative Quantitative Estimation (QQE) is a technical indicator based on RSI 
    with a dynamic volatility-based trailing stop line. The modified version (QQE Mod) 
    incorporates two QQE calculations with different parameters and Bollinger Bands to 
    provide additional trading signals.

More info:
    https://www.tradingview.com/script/TpUW4muw-QQE-MOD/

Call with:
    qqe_df = bta.qqe_mod(df)
    df['qqe_line'] = qqe_df['qqe_line']
    df['hist'] = qqe_df['hist']
    df['qqe_up'] = qqe_df['qqe_up']
    df['qqe_down'] = qqe_df['qqe_down']

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain a 'close' column.
    - rsi_period (int): Period for the first RSI calculation. Default is 6.
    - rsi_smoothing (int): Smoothing period for the first RSI. Default is 5.
    - qqe_factor (int): Multiplication factor for the first QQE ATR. Default is 3.
    - threshold (int): Threshold for the first QQE. Default is 3.
    - bollinger_length (int): Length for Bollinger Bands calculation. Default is 50.
    - bb_multiplier (float): Multiplier for Bollinger Bands standard deviation. Default is 0.35.
    - rsi_period2 (int): Period for the second RSI calculation. Default is 6.
    - rsi_smoothing2 (int): Smoothing period for the second RSI. Default is 5.
    - qqe_factor2 (float): Multiplication factor for the second QQE ATR. Default is 1.61.
    - threshold2 (int): Threshold for the second QQE. Default is 3.

Returns:
    pd.DataFrame: DataFrame with 'qqe_line', 'hist', 'qqe_up', and 'qqe_down' columns.

Last 32 rows of data with qqe_mod values:
           date       open       high        low      close         volume   qqe_line       hist     qqe_up   qqe_down
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  15.946730  10.985682        NaN  10.985682
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  15.946730  11.419632        NaN  11.419632
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  14.072666   8.718449        NaN   8.718449
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  12.190369   6.935782        NaN   6.935782
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  12.190369  10.358519        NaN  10.358519
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  12.190369   8.699322        NaN   8.699322
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  12.190369  11.525750        NaN  11.525750
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   8.588951  13.522073        NaN  13.522073
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  11.577221  16.444047        NaN  16.444047
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  14.912011  10.055187        NaN  10.055187
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   9.589261   4.709717        NaN   4.709717
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   9.589261   7.755488        NaN   7.755488
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   9.589261   7.761854        NaN   7.761854
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   9.589261   9.544310        NaN   9.544310
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   5.941117  10.723073        NaN  10.723073
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  10.207175  14.960657        NaN  14.960657
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  14.367075  19.112991        NaN        NaN
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  17.206312  21.944426  21.944426        NaN
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  17.187534  12.367598        NaN  12.367598
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   8.110277   3.139770        NaN   3.139770
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   2.742781  -2.384591        NaN  -2.384591
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  -1.394933  -6.666547        NaN  -6.666547
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  -6.363180 -11.778452        NaN -11.778452
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  -9.953126 -15.491777        NaN -15.491777
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  -9.953126 -10.004190        NaN -10.004190
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -10.932968  -5.140447        NaN  -5.140447
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -10.932968  -7.282710        NaN  -7.282710
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -10.932968 -10.340037        NaN -10.340037
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -10.932968 -10.321714        NaN -10.321714
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  -6.352357 -12.269909        NaN -12.269909
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  -8.782217 -14.664816        NaN -14.664816
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -8.782217 -14.221311        NaN -14.221311

Testing indicator 42/201: bamboo_ta.momentum.rate_of_change

================================================================================
Testing rate_of_change...
================================================================================

=== Rate Of Change Test Results ===

Indicator Description:
Name:
    Rate of Change (ROC)

Description:
    The Rate of Change (ROC) is a momentum oscillator that measures the percentage
    change in price between the current price and the price n periods ago.

More info:
    https://www.investopedia.com/terms/r/rateofchange.asp

Call with:
    df['roc'] = bta.rate_of_change(df, column='close', period=21)['roc']

Parameters:
    - df (pd.DataFrame): DataFrame containing the data.
    - column (str): The column name on which the ROC is to be applied. Default is 'close'.
    - period (int): Period for the ROC calculation. Default is 21.

Returns:
    pd.DataFrame: DataFrame with 'roc' column.

Last 32 rows of data with rate_of_change values:
           date       open       high        low      close         volume        roc
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  25.731851
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  20.922195
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   8.113698
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   8.979533
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   9.086696
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  11.016290
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   9.566705
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  10.205745
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  12.524040
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   7.530492
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   4.638905
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   7.252826
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   1.716049
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   2.560622
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   3.836908
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   6.704747
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  14.029296
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  15.406465
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   4.528228
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   1.900674
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   0.354443
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   0.916936
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  -2.056805
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  -1.000776
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   2.935732
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   0.854349
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  -1.190389
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  -5.455950
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  -4.539617
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  -7.290495
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  -4.609974
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -3.123415

Testing indicator 43/201: bamboo_ta.momentum.relative_momentum_index

================================================================================
Testing relative_momentum_index...
================================================================================

=== Relative Momentum Index Test Results ===

Indicator Description:
Name:
    Relative Momentum Index (RMI)

Description:
    The Relative Momentum Index (RMI) is an oscillator that applies the RSI formula
    to momentum rather than price.

More info:
    https://www.tradingview.com/script/DdT7MmPa/
    https://github.com/freqtrade/technical/blob/master/technical/indicators/indicators.py#L912

Call with:
    df['rmi'] = bta.relative_momentum_index(df, length=20, mom=5)['rmi']

Parameters:
    - df (pd.DataFrame): DataFrame containing the data.
    - length (int): Period for the EMA calculation. Default is 20.
    - mom (int): Momentum period. Default is 5.

Returns:
    pd.DataFrame: DataFrame with 'rmi' column.

Last 32 rows of data with relative_momentum_index values:
           date       open       high        low      close         volume        rmi
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  78.763766
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  81.032075
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  80.990880
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  81.088077
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  81.656196
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  81.942139
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  83.309074
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  85.237984
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  87.364820
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  84.030062
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  83.087102
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  83.872274
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  83.974631
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  84.177328
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  86.637293
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  89.925716
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  91.393106
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  92.827641
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  89.543745
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  79.465142
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  65.712993
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  52.493371
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  41.085571
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  36.789316
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  38.396827
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  40.651404
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  39.187051
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  38.285669
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  39.017021
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  33.806105
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  28.196967
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  26.570483

Testing indicator 44/201: bamboo_ta.momentum.relative_strength_index

================================================================================
Testing relative_strength_index...
================================================================================

=== Relative Strength Index Test Results ===

Indicator Description:
Name:
    Relative Strength Index (RSI)

Description:
    RSI measures the magnitude of recent price changes to evaluate overbought or oversold
    conditions in the price of a stock or other asset. This implementation follows 
    the pandas-ta library approach, which uses EWM (Exponential Weighted Moving Average)
    with alpha=1/period to implement Wilder's RMA (Rolling Moving Average).

More info:
    https://www.investopedia.com/terms/r/rsi.asp
    https://github.com/twopirllc/pandas-ta/blob/main/pandas_ta/momentum/rsi.py

Call with:
    df['rsi'] = bta.relative_strength_index(df, column='close', period=14)['rsi']

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain at least the column specified.
    - column (str): The column on which RSI is to be calculated. Default is "close".
    - period (int): The period over which RSI is to be calculated. Default is 14.
    - scalar (float): How much to magnify the result. Default is 100.

Returns:
    pd.DataFrame: DataFrame with 'rsi' column.

Last 32 rows of data with relative_strength_index values:
           date       open       high        low      close         volume        rsi
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  65.796678
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  66.890760
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  63.128532
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  63.143592
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  67.463164
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  62.716275
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  66.976856
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  67.108850
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  68.980379
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  58.267921
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  56.580656
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  64.020502
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  61.226614
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  63.405684
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  63.394200
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  67.881186
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  69.958663
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  70.056863
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  54.816382
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  49.458091
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  50.116049
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  49.087622
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  45.008400
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  44.432817
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  52.542811
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  54.006959
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  46.646436
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  43.997085
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  46.203787
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  43.334612
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  41.647336
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  43.606598

Testing indicator 45/201: bamboo_ta.momentum.relative_strength_index_exponential

================================================================================
Testing relative_strength_index_exponential...
================================================================================

=== Relative Strength Index Exponential Test Results ===

Indicator Description:
Name:
    Relative Strength Index Exponential (RSX)

Description:
    The Relative Strength Index Exponential (RSX) is based on the popular RSI indicator 
    and inspired by the work of Jurik Research. This enhanced version of the RSI reduces 
    noise and provides a clearer, only slightly delayed insight on momentum and velocity 
    of price movements.
    
    Like the traditional RSI, it's an oscillator that ranges from 0 to 100, with values 
    above 70 typically considered overbought and values below 30 considered oversold. 
    However, the RSX's smoother line can provide more reliable signals with less whipsaws.

More info:
    http://www.jurikres.com/catalog1/ms_rsx.htm
    https://www.prorealcode.com/prorealtime-indicators/jurik-rsx/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - length (int): The period for the RSX calculation. Default is 14.

Call with:
    df['rsx'] = bta.relative_strength_index_exponential(df)['rsx']

Returns:
    pd.DataFrame: DataFrame with 'rsx' column.

Last 32 rows of data with relative_strength_index_exponential values:
           date       open       high        low      close         volume        rsx
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  59.945146
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  58.885756
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  57.430592
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  55.898991
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  55.793534
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  55.347452
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  56.237984
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  57.647674
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  59.758179
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  59.104219
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  56.859544
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  56.585896
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  56.461822
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  57.060607
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  57.855923
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  59.954463
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  62.952305
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  65.976409
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  64.551555
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  59.836123
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  54.838353
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  50.176935
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  45.241342
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  40.637088
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  38.929438
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  39.255460
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  39.021574
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  37.994728
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  37.366663
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  36.411361
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  35.070570
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  34.209441

Testing indicator 46/201: bamboo_ta.momentum.relative_vigor_index

================================================================================
Testing relative_vigor_index...
================================================================================

=== Relative Vigor Index Test Results ===

Indicator Description:
Name:
    Relative Vigor Index

Description:
    The Relative Vigor Index (RVI) is a momentum oscillator that measures the 
    strength of a trend by comparing the closing price to the trading range. 
    It is based on the observation that during uptrends, prices tend to close 
    higher than they open, while during downtrends, prices tend to close lower 
    than they open.
    
    The indicator consists of two lines: the RVI line and its signal line.
    A buy signal may be generated when the RVI line crosses above the signal line,
    while a sell signal may occur when the RVI line crosses below the signal line.

More info:
    https://www.investopedia.com/terms/r/relative_vigor_index.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'open', 'high', 
      'low', and 'close' columns.
    - length (int): The period for summing the SWMA values. Default is 14.
    - swma_length (int): The period for the Symmetrically Weighted Moving Average. 
      Default is 4.

Call with:
    result = bta.relative_vigor_index(df)
    df['rvi'] = result['rvi']
    df['rvi_signal'] = result['rvi_signal']

Returns:
    pd.DataFrame: DataFrame with 'rvi' and 'rvi_signal' columns.

Last 32 rows of data with relative_vigor_index values:
           date       open       high        low      close         volume       rvi  rvi_signal
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  0.139188    0.118400
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  0.140564    0.128131
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  0.134784    0.136532
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  0.123572    0.135576
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.104744    0.127003
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  0.067657    0.109845
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.032734    0.083518
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.016016    0.053591
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  0.022243    0.031234
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  0.044437    0.025615
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  0.060769    0.035024
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  0.073012    0.050944
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  0.078242    0.065040
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  0.075940    0.073203
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  0.072860    0.075706
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  0.079355    0.075866
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  0.102512    0.080480
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  0.130859    0.094575
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  0.127834    0.112322
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  0.088685    0.118097
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  0.033104    0.099500
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -0.010115    0.060216
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -0.038891    0.015962
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -0.057402   -0.020385
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -0.046397   -0.041516
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -0.022800   -0.044881
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -0.016438   -0.035372
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -0.047647   -0.028753
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -0.085860   -0.039472
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -0.116111   -0.066594
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -0.153236   -0.100804
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -0.191345   -0.135983

Testing indicator 47/201: bamboo_ta.momentum.schaff_trend_cycle

================================================================================
Testing schaff_trend_cycle...
================================================================================

=== Schaff Trend Cycle Test Results ===

Indicator Description:
Name:
    Schaff Trend Cycle

Description:
    The Schaff Trend Cycle (STC) is an evolution of the Moving Average Convergence
    Divergence (MACD) indicator, incorporating two cascaded stochastic calculations
    with additional smoothing.
    
    Developed by Doug Schaff, this indicator attempts to improve upon the MACD by
    reducing lag and generating clearer buy/sell signals. The STC combines the 
    trend-following aspects of MACD with the cyclical properties of stochastics,
    making it potentially more responsive to price changes.

More info:
    https://school.stockcharts.com/doku.php?id=technical_indicators:schaff_trend_cycle

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - tc_length (int): SchaffTC signal-line length. Default is 10 (typically set to 
      half of the expected market cycle length).
    - fast (int): The short period for MACD calculation. Default is 12.
    - slow (int): The long period for MACD calculation. Default is 26.
    - factor (float): Smoothing factor for the final stochastic calculation. Default is 0.5.

Call with:
    result = bta.schaff_trend_cycle(df)
    df['stc'] = result['stc']  # Main indicator
    df['stc_macd'] = result['stc_macd']  # Underlying MACD line
    df['stc_stoch'] = result['stc_stoch']  # Intermediate stochastic calculation

Returns:
    pd.DataFrame: DataFrame with 'stc', 'stc_macd', and 'stc_stoch' columns.

Last 32 rows of data with schaff_trend_cycle values:
           date       open       high        low      close         volume        stc     stc_macd  stc_stoch
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   0.781243  5182.624965   2.177172
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   0.390622  5011.167475   1.088586
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   0.195311  4712.469013   0.544293
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   0.097655  4425.466185   0.272146
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   0.048828  4368.560194   0.136073
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   0.024414  4143.230542   0.068037
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   0.012207  4142.453628   0.034018
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   0.006103  4101.908711   0.017009
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  10.256135  4125.314162   0.906430
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  15.224666  3790.863684   0.453215
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  17.392238  3431.107284   0.226608
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  58.696119  3471.672985   1.696217
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  54.094828  3374.490637   0.848109
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  39.167566  3373.168049   0.424054
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  25.390628  3333.352141   0.212027
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  62.695314  3506.995835  10.836663
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  81.347657  3730.285842  30.478479
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  90.673828  3868.707064  49.038520
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  82.345059  3460.042014  36.351585
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  59.568040  2881.685157  18.175793
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  38.873214  2423.124940   9.087896
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  23.872642  1995.281181   4.543948
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  14.045777  1469.360045   2.271974
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   7.969055  1016.254198   1.135987
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   3.984528   951.382276   0.567994
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   1.992264   950.821741   0.283997
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   0.996132   649.336173   0.141998
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   0.498066   286.664277   0.070999
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   0.249033    79.102258   0.035500
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   0.124516  -209.007042   0.017750
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   0.062258  -507.828208   0.008875
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   0.031129  -673.622817   0.004437

Testing indicator 48/201: bamboo_ta.momentum.smi_ergodic_indicator

================================================================================
Testing smi_ergodic_indicator...
================================================================================

=== Smi Ergodic Indicator Test Results ===

Indicator Description:
Name:
    SMI Ergodic Indicator

Description:
    The SMI Ergodic Indicator is essentially the True Strength Index (TSI) developed 
    by William Blau, with the addition of a signal line. It uses double moving averages 
    of price changes over two time frames to identify momentum trends and potential 
    reversals.
    
    The indicator consists of three lines:
    - SMI: The main line, representing the smoothed ratio of momentum to absolute momentum
    - Signal: An EMA of the SMI line, used to generate potential trading signals
    - Histogram: The difference between SMI and Signal, which helps identify momentum shifts
    
    The trend is considered bullish when the SMI crosses above zero and bearish when it 
    crosses below zero. Trading signals can be generated when the SMI crosses its signal line.

More info:
    https://www.motivewave.com/studies/smi_ergodic_indicator.htm
    https://traderpedia.net/indicators/smi-ergodic-indicator/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - fast (int): The short smoothing period. Default is 5.
    - slow (int): The long smoothing period. Default is 20.
    - signal (int): The signal line period. Default is 5.
    - scalar (float): Multiplier for the result. Default is 1.0.

Call with:
    result = bta.smi_ergodic_indicator(df)
    df['smi'] = result['smi']
    df['smi_signal'] = result['smi_signal']
    df['smi_histogram'] = result['smi_histogram']

Returns:
    pd.DataFrame: DataFrame with 'smi', 'smi_signal', and 'smi_histogram' columns.

Last 32 rows of data with smi_ergodic_indicator values:
           date       open       high        low      close         volume        smi  smi_signal  smi_histogram
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  31.349752   35.538334      -4.188582
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  31.170566   34.082412      -2.911846
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  27.933671   32.032831      -4.099160
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  25.835847   29.967170      -4.131323
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  28.312605   29.415649      -1.103043
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  25.838735   28.223344      -2.384609
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  28.229028   28.225239       0.003790
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  29.801416   28.750631       1.050785
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  32.532722   30.011328       2.521394
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  24.579901   28.200852      -3.620951
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  18.312696   24.904800      -6.592104
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  21.357567   23.722389      -2.364822
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  20.675674   22.706817      -2.031143
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  22.247217   22.553617      -0.306400
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  23.209827   22.772354       0.437473
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  28.001010   24.515239       3.485771
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  32.937441   27.322640       5.614801
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  36.101698   30.248992       5.852705
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  23.851395   28.116460      -4.265065
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  11.550913   22.594611     -11.043698
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   5.007172   16.732131     -11.724959
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   0.068154   11.177472     -11.109318
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  -6.616289    5.246219     -11.862507
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -11.325625   -0.277729     -11.047896
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  -6.873126   -2.476195      -4.396931
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  -2.761050   -2.571147      -0.189903
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  -6.389363   -3.843885      -2.545478
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -10.875009   -6.187593      -4.687415
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -11.676922   -8.017369      -3.659552
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -14.560416  -10.198385      -4.362031
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -17.789050  -12.728607      -5.060444
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -18.155642  -14.537618      -3.618023

Testing indicator 49/201: bamboo_ta.momentum.smoothed_rate_of_change

================================================================================
Testing smoothed_rate_of_change...
================================================================================

=== Smoothed Rate Of Change Test Results ===

Indicator Description:
Name:
    Smoothed Rate of Change (SROC)

Description:
    The Smoothed Rate of Change (SROC) is a momentum oscillator that applies
    an exponential moving average (EMA) to the Rate of Change (ROC) to smooth
    out short-term fluctuations.

More info:
    https://www.tradingview.com/script/jFQn4jYZ-WaveTrend-with-Crosses-LazyBear/

Call with:
    df['sroc'] = bta.smoothed_rate_of_change(df, roclen=21, emalen=13, smooth=21)['sroc']

Parameters:
    - df (pd.DataFrame): DataFrame containing the data.
    - roclen (int): Period for the ROC calculation. Default is 21.
    - emalen (int): Period for the EMA calculation. Default is 13.
    - smooth (int): Smoothing period for the ROC calculation. Default is 21.

Returns:
    pd.DataFrame: DataFrame with 'sroc' column.

Last 32 rows of data with smoothed_rate_of_change values:
           date       open       high        low      close         volume       sroc
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  30.291513
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  28.826908
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  25.358085
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  22.698676
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  20.480787
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  19.012127
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  17.512565
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  16.375403
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  15.787621
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  14.532464
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  13.016433
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  12.126502
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  10.480237
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   9.240625
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   8.414934
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   8.155678
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   9.000630
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   9.912356
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   9.117938
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   8.060085
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   6.916635
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   6.039392
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   4.851456
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   4.006207
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   3.851827
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   3.409617
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   2.743765
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   1.529996
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   0.635460
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  -0.540078
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  -1.120917
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -1.405022

Testing indicator 50/201: bamboo_ta.momentum.stochastic_momentum_index

================================================================================
Testing stochastic_momentum_index...
================================================================================

=== Stochastic Momentum Index Test Results ===

Indicator Description:
Name:
    Stochastic Momentum Index (SMI)

Description:
    The Stochastic Momentum Index (SMI) Indicator was developed by William Blau
    in 1993 and is considered to be a momentum indicator that can help identify
    trend reversal points.

More info:
    

Call with:
    df['smi'] = bta.stochastic_momentum_index(df, k_length=9, d_length=3)['smi']

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', and 'close' columns.
    - k_length (int): Period for %K. Default is 9.
    - d_length (int): Period for %D. Default is 3.

Returns:
    pd.DataFrame: DataFrame with 'smi' column populated.

Last 32 rows of data with stochastic_momentum_index values:
           date       open       high        low      close         volume        smi
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  23.704129
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  32.549574
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  33.150463
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  31.397210
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  45.421103
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  30.595909
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  29.464767
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  31.486594
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  38.585923
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  30.063892
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  17.690140
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  24.499115
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  30.050523
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  39.143227
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  47.158966
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  58.672835
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  66.128961
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  68.585491
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  46.610958
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  12.877248
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  -7.766432
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -20.511861
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -34.785194
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -46.516554
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -42.629294
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -33.608008
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -35.127213
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -40.340008
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -38.889477
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -43.399341
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -50.691076
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -52.998528

Testing indicator 51/201: bamboo_ta.momentum.stochastic_rsi

================================================================================
Testing stochastic_rsi...
================================================================================

=== Stochastic Rsi Test Results ===

Indicator Description:
Name:
    Stochastic RSI (StochasticRSI)

Description:
    The Stochastic RSI is a technical momentum oscillator that combines Stochastic Oscillator
    and Relative Strength Index (RSI). It is used to identify overbought and oversold conditions
    in the market by applying the Stochastic formula to RSI values rather than price data.
    
    Originally developed by Tushar Chande and Stanley Kroll, it provides a more sensitive indicator
    than standard RSI or Stochastic oscillators alone, operating within a 0-100 range.

More info:
    https://www.investopedia.com/terms/s/stochrsi.asp

Calculation:
    - Calculate RSI for the given period (length_rsi) using Wilder's smoothing method
    - Find lowest and highest RSI values over the stochastic period (length_stoch)
    - Apply the Stochastic formula to RSI: 100 * (RSI - MinRSI) / (MaxRSI - MinRSI)
    - Smooth the %K line using SMA with period (smooth_k)
    - Smooth the %D line using SMA with period (smooth_d) on the %K line

Parameters:
    - df (pd.DataFrame): DataFrame containing the data with a 'close' column.
    - length_rsi (int): Period for the RSI calculation. Default is 14.
    - length_stoch (int): Period for the Stochastic calculation. Default is 14.
    - smooth_k (int): Smoothing period for %K line. Default is 3.
    - smooth_d (int): Smoothing period for %D line. Default is 3.
    - mamode (str): Moving average type for smoothing ('sma' or 'ema'). Default is 'sma'.

Call with:
    stoch_rsi = bta.stochastic_rsi(df, length_rsi=14, length_stoch=14, smooth_k=3, smooth_d=3)
    df['stoch_rsi_k'] = stoch_rsi['stoch_rsi_k']
    df["stoch_rsi_d"] = stoch_rsi["stoch_rsi_d"]

Returns:
    pd.DataFrame: DataFrame with 'stoch_rsi_k' and 'stoch_rsi_d' columns.

Last 32 rows of data with stochastic_rsi values:
           date       open       high        low      close         volume  stoch_rsi_k  stoch_rsi_d
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060    26.211940    23.519972
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520    27.153124    27.101387
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810    18.245376    23.870147
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830    13.963567    19.787356
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280    14.887369    15.698771
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662    14.222028    14.357654
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100    22.381297    17.163565
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900    23.829822    20.144382
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880    55.206025    33.805715
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950    44.399980    41.145276
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330    33.333333    44.313113
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910    20.000034    32.577782
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450    32.489448    28.607605
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230    50.836708    34.442063
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260    49.153062    44.159739
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775    67.042095    55.677288
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740    82.028169    66.074442
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466    97.045114    82.038459
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550    66.666667    81.913317
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000    33.333333    65.681705
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700     1.064720    33.688240
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430     1.064720    11.820925
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360     1.064720     1.064720
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030     0.000000     0.709814
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880    10.549978     3.871566
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100    23.004610    11.184863
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270    25.884222    19.812937
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290    15.334244    21.407692
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900     5.702228    15.640231
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780     2.822616     7.953029
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500     2.822616     3.782487
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890     4.959260     3.534831

Testing indicator 52/201: bamboo_ta.momentum.stochastics_oscillator

================================================================================
Testing stochastics_oscillator...
================================================================================

=== Stochastics Oscillator Test Results ===

Indicator Description:
Name:
    Stochastic Oscillator, Stochastic Signal, and Histogram Combined.

Description:
    The Stochastic Oscillator is a momentum indicator comparing a particular
    closing price of a security to a range of its prices over a certain period of time.

Call with:
    stoch = bta.stochastics_oscillator(df, 'high', 'low', 'close', 14, 3)
    df['stoch'] = stoch['stoch']
    df['stoch_signal'] = stoch['stoch_signal']
    df['stoch_hist'] = stoch['stoch_hist']

Parameters:
    - df (pandas.DataFrame): Input DataFrame.
    - high_col (str): Column name for 'High' prices. Default is 'high'.
    - low_col (str): Column name for 'Low' prices. Default is 'low'.
    - close_col (str): Column name for 'Close' prices. Default is 'close'.
    - window (int): Lookback period for stochastic calculation. Default is 14.
    - smooth_window (int): Lookback period for signal calculation. Default is 3.
    - fillna (bool): If True, fill nan values. Default is False.

Returns:
    pd.DataFrame: DataFrame with 'stoch', 'stoch_signal', and 'stoch_hist' columns.

Last 32 rows of data with stochastics_oscillator values:
           date       open       high        low      close         volume      stoch  stoch_signal  stoch_hist
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  70.734244     73.211597   -2.477353
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  76.468474     75.872873    0.595601
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  59.404334     68.869017   -9.464683
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  57.504169     64.458992   -6.954823
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  88.624528     68.511010   20.113518
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  47.436194     64.521630  -17.085437
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  68.007359     68.022694   -0.015334
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  68.678172     61.373908    7.304264
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  78.080586     71.588706    6.491880
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  49.870989     65.543249  -15.672260
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  44.841036     57.597537  -12.756501
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  78.193995     57.635340   20.558655
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  69.946203     64.327078    5.619125
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  80.396306     76.178834    4.217471
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  80.365028     76.902512    3.462516
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  94.671119     85.144151    9.526968
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  89.970491     88.335546    1.634945
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  87.569260     90.736957   -3.167697
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  54.355066     77.298273  -22.943206
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  23.317761     55.080696  -31.762935
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  34.570353     37.414394   -2.844040
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  31.385271     29.757795    1.627475
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  18.322864     28.092829   -9.769965
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  16.432099     22.046745   -5.614645
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  39.893651     24.882871   15.010779
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  44.645500     33.657083   10.988417
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  22.077906     35.539019  -13.461113
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  12.819051     26.514152  -13.695101
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  19.028365     17.975107    1.053258
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   9.340056     13.729157   -4.389101
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   7.499458     11.955960   -4.456502
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  13.641975     10.160496    3.481479

Testing indicator 53/201: bamboo_ta.momentum.td_sequential

================================================================================
Testing td_sequential...
================================================================================

=== Td Sequential Test Results ===

Indicator Description:
Name:
    TD Sequential

Description:
    Tom DeMark's Sequential indicator (TD Sequential) is a technical analysis tool 
    designed to identify potential price exhaustion points and trend reversals. 
    It counts specific price patterns to determine when a trend might be overextended.
    
    The indicator consists of two components:
    - TD Setup: A sequence of 9 consecutive closes higher (for sell setup) or 
      lower (for buy setup) than the close 4 bars earlier.
    - TD Countdown: Begins after a completed setup and identifies potential 
      exhaustion points through a 13-bar countdown process.
    
    This implementation displays the count of consecutive price bars meeting 
    the criteria for both bullish (td_up) and bearish (td_down) setups.

More info:
    https://www.tradingview.com/support/solutions/43000588817-td-sequential/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - asint (bool): If True, fills NaN values with 0 and converts to integers. Default is False.
    - show_all (bool): If True, shows all counts; if False, only shows counts between 6-9. Default is True.

Call with:
    result = bta.td_sequential(df)
    df['td_up'] = result['td_up']
    df['td_down'] = result['td_down']

Returns:
    pd.DataFrame: DataFrame with 'td_up' and 'td_down' columns.

Last 32 rows of data with td_sequential values:
           date       open       high        low      close         volume  td_up  td_down
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060    2.0      NaN
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520    3.0      NaN
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810    4.0      NaN
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830    NaN      1.0
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280    1.0      NaN
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662    NaN      1.0
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100    1.0      NaN
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900    2.0      NaN
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880    3.0      NaN
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950    4.0      NaN
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330    NaN      1.0
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910    1.0      NaN
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450    NaN      1.0
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230    1.0      NaN
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260    2.0      NaN
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775    3.0      NaN
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740    4.0      NaN
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466    5.0      NaN
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550    NaN      1.0
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000    NaN      2.0
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700    NaN      3.0
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430    NaN      4.0
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360    NaN      5.0
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030    NaN      6.0
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880    1.0      NaN
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100    2.0      NaN
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270    3.0      NaN
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290    NaN      1.0
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900    NaN      2.0
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780    NaN      3.0
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500    NaN      4.0
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890    NaN      5.0

Testing indicator 54/201: bamboo_ta.momentum.triple_exponential_average

================================================================================
Testing triple_exponential_average...
================================================================================

=== Triple Exponential Average Test Results ===

Indicator Description:
Name:
    Triple Exponential Average (TRIX)

Description:
    TRIX is a momentum oscillator developed by Jack Hutson in the early 1980s. 
    It calculates the rate of change of a triple exponentially smoothed moving 
    average, filtering out minor price movements to identify the major trend direction.
    
    The indicator oscillates around a zero line. Positive values suggest bullish 
    momentum, while negative values indicate bearish momentum. Trading signals 
    can be generated when TRIX crosses above or below the zero line, or when it 
    crosses its signal line.
    
    The triple smoothing helps to eliminate noise and identify the underlying trend 
    more clearly than simpler rate of change indicators.

More info:
    https://www.investopedia.com/terms/t/trix.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the 'close' column.
    - length (int): The period for the exponential moving averages. Default is 30.
    - signal (int): The period for the signal line. Default is 9.
    - scalar (float): Multiplier to scale the values. Default is 100.
    - drift (int): The difference period for rate of change calculation. Default is 1.

Call with:
    result = bta.triple_exponential_average(df)
    df['trix'] = result['trix']
    df['trix_signal'] = result['trix_signal']

Returns:
    pd.DataFrame: DataFrame with 'trix' and 'trix_signal' columns.

Last 32 rows of data with triple_exponential_average values:
           date       open       high        low      close         volume      trix  trix_signal
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  0.733777     0.666702
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  0.743552     0.685276
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  0.750891     0.701526
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  0.755906     0.715320
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.759735     0.726918
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  0.761675     0.736533
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.762830     0.744308
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.763094     0.750398
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  0.762829     0.754921
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  0.760495     0.757890
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  0.756031     0.759276
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  0.751271     0.759319
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  0.745684     0.758183
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  0.739751     0.755962
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  0.733365     0.752817
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  0.727497     0.748891
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  0.722412     0.744371
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  0.717794     0.739367
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  0.711372     0.733909
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  0.702447     0.727955
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  0.691530     0.721317
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  0.678779     0.713883
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  0.663836     0.705448
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  0.647040     0.695856
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  0.630009     0.685024
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  0.613070     0.672875
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  0.595088     0.659241
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  0.575861     0.644184
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  0.556036     0.627917
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  0.535344     0.610563
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  0.513780     0.592229
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  0.491894     0.573125

Testing indicator 55/201: bamboo_ta.momentum.true_strength_index

================================================================================
Testing true_strength_index...
================================================================================

=== True Strength Index Test Results ===

Indicator Description:
Name:
    True Strength Index (TSI)

Description:
    The True Strength Index (TSI) shows both trend direction and overbought/oversold conditions.

Call with:
    df['tsi'] = bta.true_strength_index(df, 'close', 25, 13)['tsi']

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the close column.
    - close_col (str): Name of the column containing close price data. Default is 'close'.
    - window_slow (int): High period. Default is 25.
    - window_fast (int): Low period. Default is 13.
    - fillna (bool): If True, fill nan values. Default is False.

Returns:
    pd.DataFrame: DataFrame with 'tsi' column.

Last 32 rows of data with true_strength_index values:
           date       open       high        low      close         volume        tsi
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  40.553697
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  39.541979
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  37.589154
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  36.003349
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  35.805867
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  34.245578
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  34.156476
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  34.123371
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  34.636916
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  31.748541
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  28.890637
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  28.691007
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  27.634609
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  27.449331
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  27.298896
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  28.564751
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  30.276114
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  31.675884
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  27.929866
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  22.945171
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  19.266599
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  15.998351
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  11.926877
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   8.466227
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   7.821058
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   7.742259
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   5.311563
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   2.470551
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   0.819746
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  -1.440271
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  -3.811831
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -5.224084

Testing indicator 56/201: bamboo_ta.momentum.ttm_squeeze

================================================================================
Testing ttm_squeeze...
================================================================================

=== Ttm Squeeze Test Results ===

Indicator Description:
Name:
    TTM Squeeze

Description:
    The TTM (Trade the Markets) Squeeze indicator was developed by John Carter and 
    is discussed in his book "Mastering the Trade." It identifies periods of market 
    consolidation and expansion by comparing Bollinger Bands® and Keltner Channels.
    
    When Bollinger Bands are inside Keltner Channels, it indicates a "squeeze" 
    condition (low volatility) that often precedes significant price movements. 
    When Bollinger Bands expand outside Keltner Channels, it indicates the 
    "squeeze" has fired, signaling potential trading opportunities.
    
    This implementation offers both the standard version and a "Pro" version with 
    additional squeeze levels (wide, normal, and narrow). It also includes a momentum 
    component that helps identify the direction and strength of price movement when 
    the squeeze fires.

More info:
    https://www.tradingview.com/support/solutions/43000501971-ttm-squeeze/
    https://usethinkscript.com/threads/john-carters-squeeze-pro-indicator-for-thinkorswim-free.4021/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', 
      and 'close' columns.
    - bb_length (int): The period for Bollinger Bands calculation. Default is 20.
    - bb_std (float): Number of standard deviations for Bollinger Bands. Default is 2.0.
    - kc_length (int): The period for Keltner Channels calculation. Default is 20.
    - kc_scalar (float): Multiplier for the Keltner Channels. Default is 1.5.
    - mom_length (int): The period for momentum calculation. Default is 12.
    - mom_smooth (int): The period for smoothing momentum. Default is 6.
    - use_tr (bool): If True, use True Range for Keltner Channels; otherwise, use High-Low range. Default is True.
    - mamode (str): Moving average type, either 'sma' or 'ema'. Default is 'sma'.
    - use_pro (bool): If True, use the Pro version with multiple squeeze levels. Default is False.
    - detailed (bool): If True, return additional data for visualization. Default is False.
    - kc_scalar_wide (float): Multiplier for wide Keltner Channels (Pro version only). Default is 2.0.
    - kc_scalar_narrow (float): Multiplier for narrow Keltner Channels (Pro version only). Default is 1.0.

Call with:
    # Basic usage:
    result = bta.ttm_squeeze(df)
    df['squeeze'] = result['squeeze']
    df['squeeze_on'] = result['squeeze_on']
    df['squeeze_off'] = result['squeeze_off']
    
    # Pro version:
    result = bta.ttm_squeeze(df, use_pro=True)
    df['squeeze'] = result['squeeze']
    df['squeeze_on_wide'] = result['squeeze_on_wide']
    df['squeeze_on_normal'] = result['squeeze_on_normal']
    df['squeeze_on_narrow'] = result['squeeze_on_narrow']

Returns:
    pd.DataFrame: DataFrame with various squeeze-related columns.

Last 32 rows of data with ttm_squeeze values:
           date       open       high        low      close         volume      squeeze  squeeze_on  squeeze_off  no_squeeze
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  5118.400000           0            1           0
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  5491.663333           0            1           0
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  4977.411667           0            1           0
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  3761.000000           0            1           0
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  2867.376667           0            1           0
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  1478.913333           0            1           0
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   795.061667           1            0           0
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  1119.660000           1            0           0
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  2384.721667           1            0           0
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  3031.520000           1            0           0
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  3240.470000           1            0           0
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  3972.431667           1            0           0
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  4265.015000           1            0           0
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  3834.530000           1            0           0
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  3240.355000           1            0           0
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  4440.511667           1            0           0
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  5527.565000           1            0           0
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  6448.083333           0            1           0
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  5925.895000           1            0           0
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  4824.361667           1            0           0
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  3343.773333           1            0           0
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  1910.643333           1            0           0
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   430.965000           1            0           0
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -2140.975000           1            0           0
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -2441.621667           1            0           0
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -2379.041667           1            0           0
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -2766.416667           0            1           0
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -4463.163333           0            1           0
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -6021.818333           0            1           0
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -7047.153333           0            1           0
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -8059.028333           0            1           0
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -8374.230000           0            1           0

=== Ttm Squeeze Test Results ===

Indicator Description:
Name:
    TTM Squeeze

Description:
    The TTM (Trade the Markets) Squeeze indicator was developed by John Carter and 
    is discussed in his book "Mastering the Trade." It identifies periods of market 
    consolidation and expansion by comparing Bollinger Bands® and Keltner Channels.
    
    When Bollinger Bands are inside Keltner Channels, it indicates a "squeeze" 
    condition (low volatility) that often precedes significant price movements. 
    When Bollinger Bands expand outside Keltner Channels, it indicates the 
    "squeeze" has fired, signaling potential trading opportunities.
    
    This implementation offers both the standard version and a "Pro" version with 
    additional squeeze levels (wide, normal, and narrow). It also includes a momentum 
    component that helps identify the direction and strength of price movement when 
    the squeeze fires.

More info:
    https://www.tradingview.com/support/solutions/43000501971-ttm-squeeze/
    https://usethinkscript.com/threads/john-carters-squeeze-pro-indicator-for-thinkorswim-free.4021/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', 
      and 'close' columns.
    - bb_length (int): The period for Bollinger Bands calculation. Default is 20.
    - bb_std (float): Number of standard deviations for Bollinger Bands. Default is 2.0.
    - kc_length (int): The period for Keltner Channels calculation. Default is 20.
    - kc_scalar (float): Multiplier for the Keltner Channels. Default is 1.5.
    - mom_length (int): The period for momentum calculation. Default is 12.
    - mom_smooth (int): The period for smoothing momentum. Default is 6.
    - use_tr (bool): If True, use True Range for Keltner Channels; otherwise, use High-Low range. Default is True.
    - mamode (str): Moving average type, either 'sma' or 'ema'. Default is 'sma'.
    - use_pro (bool): If True, use the Pro version with multiple squeeze levels. Default is False.
    - detailed (bool): If True, return additional data for visualization. Default is False.
    - kc_scalar_wide (float): Multiplier for wide Keltner Channels (Pro version only). Default is 2.0.
    - kc_scalar_narrow (float): Multiplier for narrow Keltner Channels (Pro version only). Default is 1.0.

Call with:
    # Basic usage:
    result = bta.ttm_squeeze(df)
    df['squeeze'] = result['squeeze']
    df['squeeze_on'] = result['squeeze_on']
    df['squeeze_off'] = result['squeeze_off']
    
    # Pro version:
    result = bta.ttm_squeeze(df, use_pro=True)
    df['squeeze'] = result['squeeze']
    df['squeeze_on_wide'] = result['squeeze_on_wide']
    df['squeeze_on_normal'] = result['squeeze_on_normal']
    df['squeeze_on_narrow'] = result['squeeze_on_narrow']

Returns:
    pd.DataFrame: DataFrame with various squeeze-related columns.

Last 32 rows of data with ttm_squeeze values:
           date       open       high        low      close         volume      squeeze  squeeze_on_wide  squeeze_on_normal  squeeze_on_narrow  squeeze_off  no_squeeze
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  5118.400000                1                  0                  0            0           0
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  5491.663333                0                  0                  0            1           0
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  4977.411667                1                  0                  0            0           0
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  3761.000000                1                  0                  0            0           0
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  2867.376667                1                  0                  0            0           0
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  1478.913333                1                  0                  0            0           0
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   795.061667                1                  1                  0            0           0
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  1119.660000                1                  1                  0            0           0
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  2384.721667                1                  1                  0            0           0
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  3031.520000                1                  1                  0            0           0
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  3240.470000                1                  1                  0            0           0
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  3972.431667                1                  1                  0            0           0
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  4265.015000                1                  1                  0            0           0
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  3834.530000                1                  1                  0            0           0
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  3240.355000                1                  1                  0            0           0
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  4440.511667                1                  1                  0            0           0
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  5527.565000                1                  1                  0            0           0
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  6448.083333                1                  0                  0            0           0
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  5925.895000                1                  1                  0            0           0
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  4824.361667                1                  1                  0            0           0
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  3343.773333                1                  1                  0            0           0
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  1910.643333                1                  1                  0            0           0
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   430.965000                1                  1                  0            0           0
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -2140.975000                1                  1                  0            0           0
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -2441.621667                1                  1                  0            0           0
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -2379.041667                1                  1                  0            0           0
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -2766.416667                1                  0                  0            0           0
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -4463.163333                1                  0                  0            0           0
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -6021.818333                1                  0                  0            0           0
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -7047.153333                1                  0                  0            0           0
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -8059.028333                1                  0                  0            0           0
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -8374.230000                0                  0                  0            1           0

Testing indicator 57/201: bamboo_ta.momentum.ultimate_oscillator

================================================================================
Testing ultimate_oscillator...
================================================================================

=== Ultimate Oscillator Test Results ===

Indicator Description:
Name:
    Ultimate Oscillator

Description:
    The Ultimate Oscillator combines short-term, intermediate-term, and long-term
    price action into one oscillator.

Call with:
    df['uo'] = bta.ultimate_oscillator(df, 'high', 'low', 'close', 7, 14, 28)['uo']

Parameters:
    - df (pandas.DataFrame): DataFrame containing the data.
    - high_col (str): Name of the column containing high price data. Default is 'high'.
    - low_col (str): Name of the column containing low price data. Default is 'low'.
    - close_col (str): Name of the column containing close price data. Default is 'close'.
    - window1 (int): Short period. Default is 7.
    - window2 (int): Medium period. Default is 14.
    - window3 (int): Long period. Default is 28.
    - weight1 (float): Weight of short BP average for UO. Default is 4.0.
    - weight2 (float): Weight of medium BP average for UO. Default is 2.0.
    - weight3 (float): Weight of long BP average for UO. Default is 1.0.
    - fillna (bool): If True, fill nan values. Default is False.

Returns:
    pd.DataFrame: DataFrame with 'uo' column.

Last 32 rows of data with ultimate_oscillator values:
           date       open       high        low      close         volume         uo
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  48.984334
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  48.541998
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  54.078265
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  59.804394
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  61.683560
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  56.262845
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  56.602101
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  57.746371
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  58.950746
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  58.984359
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  58.536482
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  59.735323
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  60.184156
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  61.232151
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  60.353109
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  60.736455
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  63.772150
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  60.980438
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  46.294525
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  44.241027
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  48.843347
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  47.679248
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  43.407503
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  43.792299
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  50.047769
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  56.150673
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  55.888363
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  47.061599
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  49.618492
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  49.201313
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  46.699081
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  39.633172

Testing indicator 58/201: bamboo_ta.momentum.waddah_attar_explosion

================================================================================
Testing waddah_attar_explosion...
================================================================================

=== Waddah Attar Explosion Test Results ===

Indicator Description:
Name:
    Waddah Attar Explosion Indicator

Description:
    The Waddah Attar Explosion indicator is used to identify potential breakout
    opportunities by combining the MACD and Bollinger Bands.

    Inspired by: https://www.tradingview.com/script/iu3kKWDI-Waddah-Attar-Explosion-LazyBear/

Call with:
    wae = bta.waddah_attar_explosion(df)
    df['trend_up'] = wae['trend_up']
    df['trend_down'] = wae['trend_down']
    df['explosion_line'] = wae['explosion_line']
    df['dead_zone_line'] = wae['dead_zone_line']

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain columns: 'open', 'high', 'low', and 'close'.
    - sensitivity (int): Sensitivity factor for the indicator. Default is 150.
    - fast_length (int): Length for the fast EMA. Default is 20.
    - slow_length (int): Length for the slow EMA. Default is 40.
    - channel_length (int): Length for the Bollinger Bands. Default is 20.
    - dead_zone (int): Dead zone factor for the indicator. Default is 20.
    - mult (float): Standard deviation multiplier for the Bollinger Bands. Default is 2.0.

Returns:
    pd.DataFrame: DataFrame with 'trend_up', 'trend_down', 'explosion_line', and 'dead_zone_line' columns.

Last 32 rows of data with waddah_attar_explosion values:
           date       open       high        low      close         volume      trend_up    trend_down  explosion_line  dead_zone_line
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060      0.000000  13366.520831    14600.412201              20
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520      0.000000  10826.191700    14319.238757              20
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810      0.000000  23375.333798    13396.500539              20
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830      0.000000  24633.908665    13017.078721              20
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280      0.000000   6588.273753    11767.672927              20
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662      0.000000  21545.011774    11310.314807              20
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100      0.000000   3397.930271    11103.038330              20
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900      0.000000   6607.896456    10270.098395              20
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880      0.000000   1071.837637     9682.761097              20
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950      0.000000  31917.148979     8791.900215              20
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330      0.000000  36366.402298     8447.874186              20
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910      0.000000   3681.862345     9099.775181              20
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450      0.000000  14927.261237     9310.063203              20
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230      0.000000   6830.991241     9980.337265              20
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260      0.000000   9756.194456    10551.920838              20
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   9013.711694      0.000000    11214.085103              20
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  15025.936562      0.000000    11631.280572              20
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   9540.936423      0.000000    12840.070267              20
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550      0.000000  37069.294528    12363.840425              20
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000      0.000000  54798.009925    12363.572974              20
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700      0.000000  48297.900830    12125.138938              20
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430      0.000000  48451.684288    12107.387045              20
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360      0.000000  59454.897766    12288.857233              20
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030      0.000000  56098.383941    12559.180110              20
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880      0.000000  24468.848192    12554.060340              20
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100      0.000000  18151.982474    12305.363780              20
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270      0.000000  43321.221235    12793.851515              20
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290      0.000000  49830.560419    13600.171582              20
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900      0.000000  37824.588402    13931.434284              20
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780      0.000000  45175.222991    14614.628179              20
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500      0.000000  47001.261713    15439.467420              20
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890      0.000000  36297.997654    15877.040628              20

Testing indicator 59/201: bamboo_ta.momentum.waddah_attar_explosion_atr

================================================================================
Testing waddah_attar_explosion_atr...
================================================================================

=== Waddah Attar Explosion Atr Test Results ===

Indicator Description:
Name:
    Waddah Attar Explosion ATR

Description:
    The Waddah Attar Explosion indicator is used to identify potential breakout
    opportunities by combining the MACD and Bollinger Bands. The dead zone line
    is based on ATR in this indicator.

    Inspired by: https://www.tradingview.com/script/d9IjcYyS-Waddah-Attar-Explosion-V2-SHK/

Call with:
    wae = bta.waddah_attar_explosion_atr(df)
    df['trend_up'] = wae['trend_up']
    df['trend_down'] = wae['trend_down']
    df['explosion_line'] = wae['explosion_line']
    df['dead_zone_line'] = wae['dead_zone_line']

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain columns: 'open', 'high', 'low', and 'close'.
    - sensitivity (int): Sensitivity factor for the indicator. Default is 150.
    - fast_length (int): Length for the fast EMA. Default is 20.
    - slow_length (int): Length for the slow EMA. Default is 40.
    - channel_length (int): Length for the Bollinger Bands. Default is 20.
    - mult (float): Standard deviation multiplier for the Bollinger Bands. Default is 2.0.

Returns:
    pd.DataFrame: DataFrame with 'trend_up', 'trend_down', 'explosion_line', and 'dead_zone_line' columns.

Last 32 rows of data with waddah_attar_explosion_atr values:
           date       open       high        low      close         volume      trend_up    trend_down  explosion_line  dead_zone_line
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060      0.000000  13366.520831    14979.706849     9858.354141
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520      0.000000  10826.191700    14691.228983     9839.029039
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810      0.000000  23375.333798    13744.519546     9878.833749
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830      0.000000  24633.908665    13355.240975     9880.957361
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280      0.000000   6588.273753    12073.377677     9945.398078
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662      0.000000  21545.011774    11604.138147    10348.700097
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100      0.000000   3397.930271    11391.476969    10464.152086
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900      0.000000   6607.896456    10536.898627    10418.532225
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880      0.000000   1071.837637     9934.303274    10413.999003
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950      0.000000  31917.148979     9020.299294    10571.296573
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330      0.000000  36366.402298     8667.336036    10614.081627
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910      0.000000   3681.862345     9336.172344    10738.441931
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450      0.000000  14927.261237     9551.923303    10750.506832
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230      0.000000   6830.991241    10239.609981    10742.541383
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260      0.000000   9756.194456    10826.042353    10710.617799
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   9013.711694      0.000000    11505.408554    10751.987441
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  15025.936562      0.000000    11933.442074    10809.490157
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   9540.936423      0.000000    13173.634134    10813.561125
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550      0.000000  37069.294528    12685.032624    10946.849774
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000      0.000000  54798.009925    12684.758226    11100.085346
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700      0.000000  48297.900830    12440.130067    11211.101513
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430      0.000000  48451.684288    12421.917009    11215.252638
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360      0.000000  59454.897766    12608.101493    11221.416121
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030      0.000000  56098.383941    12885.446912    11257.902000
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880      0.000000  24468.848192    12880.194140    11364.324870
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100      0.000000  18151.982474    12625.036852    11322.355432
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270      0.000000  43321.221235    13126.214695    11385.420597
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290      0.000000  49830.560419    13953.481628    11421.215481
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900      0.000000  37824.588402    14293.349989    11366.141536
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780      0.000000  45175.222991    14994.292135    11338.707881
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500      0.000000  47001.261713    15840.559341    11354.600652
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890      0.000000  36297.997654    16289.499979    11397.056636

Testing indicator 60/201: bamboo_ta.momentum.wave_trend

================================================================================
Testing wave_trend...
================================================================================

=== Wave Trend Test Results ===

Indicator Description:
Name:
    WaveTrend

Description:
    The WaveTrend is used to identify overbought and oversold conditions in the market.

Inspired by:
    https://www.tradingview.com/script/jFQn4jYZ-WaveTrend-with-Crosses-LazyBear/

Call with:
    wt = bta.wave_trend(df, chlen=10, avg=21, smalen=4)
    df['wt1'] = wt['wt1']
    df['wt2'] = wt['wt2']

Parameters:
    - df (pd.DataFrame): DataFrame containing the data.
    - chlen (int): Channel length for the EMA calculation. Default is 10.
    - avg (int): Average period for the EMA calculation. Default is 21.
    - smalen (int): Period for the SMA calculation. Default is 4.

Returns:
    pd.DataFrame: DataFrame with 'wt1' and 'wt2' columns.

Last 32 rows of data with wave_trend values:
           date       open       high        low      close         volume        wt1        wt2
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  50.246324  51.376871
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  49.355720  50.479488
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  46.522625  49.368893
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  41.448101  46.893193
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  43.122274  45.112180
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  43.316414  43.602353
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  48.052118  43.984727
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  51.588316  46.519780
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  54.599957  49.389201
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  48.957247  50.799410
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  40.267486  48.853252
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  42.956823  46.695378
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  46.941304  44.780715
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  49.554536  44.930037
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  52.333857  47.946630
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  57.469474  51.574793
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  62.912865  55.567683
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  66.387137  59.775833
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  60.598593  61.842017
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  48.198578  59.524293
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  34.424030  52.402084
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  26.288836  42.377509
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  16.409062  31.330126
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   7.502382  21.156077
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   4.689847  13.722532
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   5.772123   8.593354
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   2.082453   5.011701
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  -4.967152   1.894318
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -10.317792  -1.857592
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -16.309256  -7.377937
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -22.198778 -13.448244
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -24.648090 -18.368479

Testing indicator 61/201: bamboo_ta.momentum.wave_trend_oscillator

================================================================================
Testing wave_trend_oscillator...
================================================================================

=== Wave Trend Oscillator Test Results ===

Indicator Description:
Name:
    WaveTrend Oscillator

Description:
    The WaveTrend Oscillator is used to identify overbought and oversold conditions
    in the market.

    Inspired by:

Call with:
    df['wto'] = bta.wave_trend_oscillator(df, 'close')['wavetrend']

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the source column.
    - src (str): The column to use for calculations. Default is 'close'.
    - n1 (int): Length for the first EMA. Default is 8.
    - n2 (int): Length for the second EMA. Default is 12.

Returns:
    pd.DataFrame: DataFrame with 'wavetrend' column.

Last 32 rows of data with wave_trend_oscillator values:
           date       open       high        low      close         volume  wavetrend
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   0.823656
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   1.585848
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  -4.216474
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  -6.603933
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   4.889640
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   2.786958
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  10.979981
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   9.933454
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  10.950891
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  -7.037707
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -17.923457
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  -4.012946
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   1.941331
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   7.378721
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   4.963324
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  10.375947
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  11.388044
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   7.980630
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550 -11.389141
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -25.053214
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -26.057738
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -20.968924
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -18.896375
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -15.922635
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  -3.447070
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   6.088558
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  -1.511635
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -10.116472
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  -9.317264
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  -8.937378
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  -8.782634
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -5.168846

Testing indicator 62/201: bamboo_ta.momentum.williams_r

================================================================================
Testing williams_r...
================================================================================

=== Williams R Test Results ===

Indicator Description:
Name:
    Williams %R

Description:
    The Williams %R is a momentum indicator that measures overbought and oversold levels.

More info:
    https://www.tradingview.com/support/solutions/43000501985/
    https://www.tradingview.com/script/REGZq58T-Williams-R/

Call with:
    df['williams_r'] = bta.williams_r(df, 'high', 'low', 'close', 14)['williams_r']

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the high, low, and close columns.
    - high_col (str): Name of the column containing high price data. Default is 'high'.
    - low_col (str): Name of the column containing low price data. Default is 'low'.
    - close_col (str): Name of the column containing close price data. Default is 'close'.
    - lbp (int): Lookback period. Default is 14.
    - fillna (bool): If True, fill nan values. Default is False.

Returns:
    pd.DataFrame: DataFrame with 'williams_r' column.

Last 32 rows of data with williams_r values:
           date       open       high        low      close         volume  williams_r
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  -29.265756
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  -23.531526
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  -40.595666
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  -42.495831
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  -11.375472
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  -52.563806
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  -31.992641
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  -31.321828
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  -21.919414
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  -50.129011
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  -55.158964
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  -21.806005
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  -30.053797
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  -19.603694
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  -19.634972
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   -5.328881
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  -10.029509
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  -12.430740
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  -45.644934
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  -76.682239
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  -65.429647
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  -68.614729
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  -81.677136
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  -83.567901
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  -60.106349
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  -55.354500
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  -77.922094
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  -87.180949
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  -80.971635
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  -90.659944
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  -92.500542
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -86.358025

Testing indicator 63/201: bamboo_ta.trend.alligator_bands

================================================================================
Testing alligator_bands...
================================================================================

=== Alligator Bands Test Results ===

Indicator Description:
Name:
    Bill Williams Alligator Indicator

Description:
    The Alligator Indicator is used to identify trends and their direction in the market.
    It consists of three smoothed moving averages known as the Jaw, Teeth, and Lips.

More info:
    https://www.investopedia.com/terms/a/alligator.asp

Parameters:
    - df (pandas.DataFrame): DataFrame containing the data.
    - column (str): The column name on which the Alligator is to be applied. Default is 'close'.
    - jaw_period (int): Period for the Alligator's Jaw (blue line). Default is 13.
    - teeth_period (int): Period for the Alligator's Teeth (red line). Default is 8.
    - lips_period (int): Period for the Alligator's Lips (green line). Default is 5.
    - jaw_shift (int): Number of periods to shift the Jaw line into the future. Default is 8.
    - teeth_shift (int): Number of periods to shift the Teeth line into the future. Default is 5.
    - lips_shift (int): Number of periods to shift the Lips line into the future. Default is 3.

Call with:
    alligator_result = bta.alligator_bands(df, 'close', 13, 8, 5, jaw_shift=8, teeth_shift=5, lips_shift=3)
    df['jaw'] = alligator_result['jaw']
    df['teeth'] = alligator_result['teeth']
    df['lips'] = alligator_result['lips']

Returns:
    pd.DataFrame: DataFrame with 'jaw', 'teeth', and 'lips' columns.

Last 32 rows of data with alligator_bands values:
           date       open       high        low      close         volume            jaw         teeth        lips
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   90801.256154   95356.62500   95282.144
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   92132.209231   95544.26000   94876.460
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   92843.905385   95988.30000   94788.452
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   93232.982308   96157.97750   95468.048
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   93355.286923   96050.83750   96512.052
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   94012.019231   95740.33625   96507.554
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   94366.781538   95679.43375   96548.696
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   94895.480000   95422.00625   96774.160
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   95399.480000   95776.96625   96881.688
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   95916.487692   96604.73625   97392.820
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   96188.013077   96740.05125   98191.094
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   96308.253846   97252.15875   99243.074
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   96329.038462   97548.65750   98980.904
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   96179.317692   98136.35750   98910.378
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   96338.428462   98147.76875   99187.210
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   96487.040000   98241.81625   99221.670
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   97110.084615   98901.23000   99284.602
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   97518.646923   99078.35125  100113.308
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   97574.792308   99638.17875  101687.506
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   97996.409231   99848.07375  102674.238
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   98192.123846  100427.07375  103900.128
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   98577.990000  101045.70750  103656.080
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   98903.745385  102152.86625  102864.452
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   99567.081538  102604.24250  101532.742
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  100352.386923  102146.35000   99779.408
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  100932.880769  101871.49375   97589.914
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  101183.525385  101354.96125   96525.406
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  101008.219231  100575.74500   96765.750
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  100852.330769   99377.93000   97090.582
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  100558.669231   98453.54500   96790.504
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  100397.884615   97615.52750   96613.056
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  100266.228462   97063.97625   96696.762

Testing indicator 64/201: bamboo_ta.trend.archer_moving_averages_trends

================================================================================
Testing archer_moving_averages_trends...
================================================================================

=== Archer Moving Averages Trends Test Results ===

Indicator Description:
Name:
    Archer Moving Averages Trends (AMAT)

Description:
    The Archer Moving Averages Trends indicator identifies potential trend conditions
    by analyzing the relationship between fast and slow moving averages.
    
    The indicator generates two signals:
    - Long Run: Identifies potential bullish trends when both fast and slow moving
      averages are increasing over the lookback period, and the fast MA is above the slow MA.
    - Short Run: Identifies potential bearish trends when both fast and slow moving
      averages are decreasing over the lookback period, and the fast MA is below the slow MA.
    
    This indicator can be useful for trend identification, filtering trading signals,
    or as a component in more complex trading strategies.

More info:
    N/A (Original implementation by Kevin Johnson for Pandas TA)

Parameters:
    - df (pandas.DataFrame): Input DataFrame which must contain the specified column.
    - fast_length (int): The period for the fast moving average. Default is 8.
    - slow_length (int): The period for the slow moving average. Default is 21.
    - lookback (int): The period to check for consistent movement in the MAs. Default is 2.
    - ma_type (str): The type of moving average to use ('SMA', 'EMA', 'WMA'). Default is 'EMA'.
    - column (str): Name of the column to use for calculations. Default is 'close'.

Call with:
    result = bta.archer_moving_averages_trends(df, fast_length=8, slow_length=21, ma_type='EMA')
    df['amat_long'] = result['amat_long']  # Long trend signals (1 or 0)
    df['amat_short'] = result['amat_short']  # Short trend signals (1 or 0)

Returns:
    pd.DataFrame: DataFrame with 'amat_long' and 'amat_short' columns containing the indicator values.

Last 32 rows of data with archer_moving_averages_trends values:
           date       open       high        low      close         volume  amat_long  amat_short
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060          1           0
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520          1           0
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810          1           0
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830          0           0
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280          1           0
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662          1           0
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100          1           0
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900          1           0
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880          1           0
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950          1           0
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330          0           0
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910          1           0
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450          1           0
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230          1           0
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260          1           0
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775          1           0
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740          1           0
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466          1           0
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550          1           0
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000          0           0
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700          0           0
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430          0           0
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360          0           0
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030          0           1
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880          0           1
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100          0           0
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270          0           1
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290          0           1
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900          0           1
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780          0           1
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500          0           1
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890          0           1

Testing indicator 65/201: bamboo_ta.trend.arnaud_legoux_moving_average

================================================================================
Testing arnaud_legoux_moving_average...
================================================================================

=== Arnaud Legoux Moving Average Test Results ===

Indicator Description:
Name:
    Arnaud Legoux Moving Average (ALMA)

Description:
    The Arnaud Legoux Moving Average (ALMA) was developed by Arnaud Legoux and Dimitrios Kouzis-Loukas.
    It uses the curve of the Normal (Gaussian) distribution to create a moving average with reduced lag
    while maintaining smoothness to filter out market noise.
    
    ALMA applies a Gaussian distribution curve across the moving average period, which can be shifted
    (using distribution_offset) to control the balance between smoothness and responsiveness. The sigma
    parameter controls the shape of the curve and the overall smoothness.
    
    This moving average excels at reducing the lag typically associated with traditional moving averages
    while still providing effective noise reduction.

More info:
    https://medium.com/analytics-vidhya/arnaud-legoux-moving-average-alma-7e1f35fc0b8e
    https://www.prorealcode.com/prorealtime-indicators/alma-arnaud-legoux-moving-average/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The period for the ALMA calculation. Default is 10.
    - sigma (float): Controls the smoothness of the curve. Higher values = smoother. Default is 6.0.
    - distribution_offset (float): Controls the shape symmetry of the curve. 
      Range is 0-1, where 0 gives more smoothing and 1 provides more responsiveness. Default is 0.85.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.arnaud_legoux_moving_average(df)
    df['alma'] = result['alma']

Returns:
    pd.DataFrame: DataFrame with 'alma' column.

Last 32 rows of data with arnaud_legoux_moving_average values:
           date       open       high        low      close         volume           alma
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   97649.688392
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   96685.952724
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   95389.586739
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   94532.381016
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   94357.107377
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   95379.498746
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   96407.707023
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   96625.646698
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   96736.386030
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   96583.372221
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   96782.787591
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   97163.355628
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   97971.650201
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   98803.821313
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   99178.814373
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   99492.166489
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   99094.067194
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   98856.473988
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   99008.251155
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  100130.090441
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  101359.206940
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  102121.242755
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  103288.637675
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  103997.971581
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  103840.886881
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  102205.405667
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   99892.611517
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   97831.111679
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   96966.308345
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   96599.460796
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   96451.653231
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   96729.801087

Testing indicator 66/201: bamboo_ta.trend.aroon

================================================================================
Testing aroon...
================================================================================

=== Aroon Test Results ===

Indicator Description:
Name:
    Aroon & Aroon Oscillator (AROON)

Description:
    The Aroon indicator is a technical indicator used to identify trend changes in the 
    price of an asset, as well as the strength of that trend. It consists of two lines: 
    Aroon Up and Aroon Down.
    
    Aroon Up measures the time since the highest price within the look-back period, 
    while Aroon Down measures the time since the lowest price within that period. 
    The values are normalized to a range between 0 and 100.
    
    The Aroon Oscillator is calculated as the difference between Aroon Up and Aroon Down, 
    resulting in a single line that oscillates between -100 and 100.
    
    Typical interpretations:
    - Aroon Up > 70 and Aroon Down < 30: Strong uptrend
    - Aroon Down > 70 and Aroon Up < 30: Strong downtrend
    - Both Aroon Up and Aroon Down < 50: Indicates consolidation
    - Aroon Oscillator > 50: Uptrend
    - Aroon Oscillator < -50: Downtrend
    - Crossover of Aroon Up and Aroon Down: Potential trend reversal

More info:
    https://www.investopedia.com/terms/a/aroon.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high' and 'low' columns.
    - length (int): Look-back period for the calculation. Default is 14.
    - scalar (float): Scaling factor for the indicators. Default is 100.

Call with:
    result = bta.aroon(df)
    df['aroon_up'] = result['aroon_up']
    df['aroon_down'] = result['aroon_down']
    df['aroon_osc'] = result['aroon_osc']

Returns:
    pd.DataFrame: DataFrame with 'aroon_up', 'aroon_down', and 'aroon_osc' columns.

Last 32 rows of data with aroon values:
           date       open       high        low      close         volume    aroon_up  aroon_down  aroon_osc
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   42.857143    7.142857  35.714286
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   35.714286    7.142857  28.571429
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   28.571429    7.142857  21.428571
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   21.428571   50.000000 -28.571429
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   14.285714   42.857143 -28.571429
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  100.000000  100.000000   0.000000
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   92.857143   92.857143   0.000000
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   85.714286   85.714286   0.000000
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   78.571429   78.571429   0.000000
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   71.428571   71.428571   0.000000
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   64.285714   64.285714   0.000000
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   57.142857   57.142857   0.000000
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   50.000000   50.000000   0.000000
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   42.857143   42.857143   0.000000
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   35.714286   35.714286   0.000000
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  100.000000   28.571429  71.428571
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  100.000000   21.428571  78.571429
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  100.000000   14.285714  85.714286
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   92.857143    7.142857  85.714286
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   85.714286   28.571429  57.142857
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   78.571429  100.000000 -21.428571
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   71.428571   92.857143 -21.428571
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   64.285714   85.714286 -21.428571
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   57.142857   78.571429 -21.428571
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   50.000000   71.428571 -21.428571
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   42.857143   64.285714 -21.428571
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   35.714286   57.142857 -21.428571
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   28.571429   50.000000 -21.428571
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   21.428571   42.857143 -21.428571
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   14.285714   35.714286 -21.428571
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500    7.142857  100.000000 -92.857143
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890    7.142857   92.857143 -85.714286

Testing indicator 67/201: bamboo_ta.trend.average_directional_index

================================================================================
Testing average_directional_index...
================================================================================

=== Average Directional Index Test Results ===

Indicator Description:
Name:
    Average Directional Movement Index (ADX)

Description:
    The Average Directional Index (ADX) is a technical analysis indicator used to 
    quantify trend strength. It was developed by J. Welles Wilder and is part of 
    the Directional Movement System.
    
    The ADX is non-directional; it registers trend strength whether price is trending 
    up or down. The indicator typically ranges from 0 to 100, with readings above 25 
    indicating a strong trend and readings below 20 indicating a weak or non-trending 
    market.
    
    The ADX is calculated using the Positive Directional Indicator (+DI) and Negative 
    Directional Indicator (-DI), which measure upward and downward price movement 
    respectively. These indicators are included in the output of this function as 
    'dmp' and 'dmn'.
    
    Typical interpretation:
    - ADX > 25: Strong trend (direction determined by +DI and -DI)
    - ADX < 20: Weak or absent trend
    - When +DI crosses above -DI: Potential bullish signal
    - When -DI crosses above +DI: Potential bearish signal

More info:
    https://www.investopedia.com/terms/a/adx.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', and 'close' columns.
    - length (int): Period for calculating directional movement. Default is 14.
    - signal_length (int): Smoothing period for ADX calculation. Default is equal to length.
    - scalar (float): Scaling factor for the indicators. Default is 100.
    - drift (int): The difference period for directional movement. Default is 1.

Call with:
    result = bta.average_directional_index(df)
    df['adx'] = result['adx']
    df['plus_di'] = result['dmp']
    df['minus_di'] = result['dmn']

Returns:
    pd.DataFrame: DataFrame with 'adx', 'dmp' (plus DI), and 'dmn' (minus DI) columns.

Last 32 rows of data with average_directional_index values:
           date       open       high        low      close         volume        adx        dmp        dmn
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  48.230705  29.820970  12.500861
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  47.497611  28.038468  12.606596
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  46.140176  25.750011  14.329852
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  44.471840  24.334126  15.303336
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  43.674657  27.759761  13.886768
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  43.968439  30.877109  10.908681
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  44.241237  27.009723   9.542359
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  44.494549  25.155516   8.887279
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  44.902575  24.951723   8.271412
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  43.158465  22.862874  15.088518
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  41.538934  21.289685  14.050281
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  40.918514  25.467224  12.871712
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  40.482949  24.202464  11.700748
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  40.029048  22.680390  11.138549
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  39.784776  22.049300  10.231535
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  40.113048  23.941117   9.222783
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  40.872226  25.913909   8.468001
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  41.670070  24.811993   7.826337
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  40.100588  22.314153  14.970147
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  37.307684  22.938486  22.484289
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  35.433157  21.270824  26.563348
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  33.325493  21.361612  24.052806
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  31.876750  19.676298  25.578985
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  30.914036  19.203489  27.863170
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  29.161168  22.067881  25.072558
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  27.510703  22.168251  25.025680
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  26.570810  20.047378  26.766145
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  26.079135  18.196597  27.117809
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  25.622580  17.021902  25.367200
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  25.460763  16.263978  26.176969
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  25.642843  15.357748  27.308519
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  25.342074  16.073369  24.842493

Testing indicator 68/201: bamboo_ta.trend.bollinger_trend

================================================================================
Testing bollinger_trend...
================================================================================

=== Bollinger Trend Test Results ===

Indicator Description:
Name:
    Bollinger Trend Indicator

Description:
    The Bollinger Trend Indicator calculates the trend based on the difference
    between short and long Bollinger Bands.

More info:
    https://www.tradingview.com/script/UtMK7hNw-Bollinger-Trend/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain at least the column specified.
    - column (str): The column on which BBTrend is to be calculated. Default is 'close'.
    - short_length (int): The period for the short Bollinger Bands. Default is 20.
    - long_length (int): The period for the long Bollinger Bands. Default is 50.
    - std_dev (float): The standard deviation multiplier for the Bollinger Bands. Default is 2.0.

Call with:
    df['bbtrend'] = bta.bollinger_trend(df, 'close', 20, 50, 2.0)['bbtrend']

Returns:
    pd.DataFrame: DataFrame with 'bbtrend' column.

Last 32 rows of data with bollinger_trend values:
           date       open       high        low      close         volume    bbtrend
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  30.532763
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  29.854428
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  29.166243
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  28.400286
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  28.090383
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  27.392525
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  26.867245
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  26.459202
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  26.060665
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  25.341085
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  24.345046
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  23.212493
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  21.943121
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  20.922467
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  19.823094
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  19.351807
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  19.100653
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  18.579930
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  17.892689
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  16.884981
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  15.909983
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  14.805307
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  13.709248
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  12.571171
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  11.341855
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  10.371973
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   9.184087
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   7.910032
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   6.587757
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   4.455304
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   1.439233
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   0.477443

Testing indicator 69/201: bamboo_ta.trend.bollinger_trend_fast_with_ma

================================================================================
Testing bollinger_trend_fast_with_ma...
================================================================================

=== Bollinger Trend Fast With Ma Test Results ===

Indicator Description:
Name:
    Bollinger Trend Indicator with Selectable Moving Average

Description:
    This function calculates a more responsive Bollinger Trend (BBTrend) and applies a
    selected moving average to the BBTrend.

More info:
    https://www.tradingview.com/script/UtMK7hNw-Bollinger-Trend/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain at least the column specified.
    - column (str): The column on which BBTrend is to be calculated. Default is 'close'.
    - short_length (int): The period for the short Bollinger Bands. Default is 10.
    - long_length (int): The period for the long Bollinger Bands. Default is 50.
    - short_stddev (float): The standard deviation multiplier for the short Bollinger Bands. Default is 1.0.
    - long_stddev (float): The standard deviation multiplier for the long Bollinger Bands. Default is 2.0.
    - ma_type (str): The type of moving average to use ('SMA', 'EMA', 'LSMA', 'HMA', 'WMA'). Default is 'SMA'.
    - ma_length (int): The period for the moving average. Default is 14.

Call with:
    result = bta.bollinger_trend_fast_with_ma(df, 'close', 10, 50, 1.0, 2.0, 'SMA', 14)
    df['bollinger_trend_fast'] = result['bbtrend']
    df['bollinger_trend_fast_ma'] = result['bbtrend_ma']

Returns:
    pd.DataFrame: DataFrame with 'bbtrend' and 'bbtrend_ma' columns.

Last 32 rows of data with bollinger_trend_fast_with_ma values:
           date       open       high        low      close         volume    bbtrend  bbtrend_ma
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  35.837313   37.496342
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  34.231304   37.912235
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  32.328545   37.941329
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  30.765277   37.521489
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  29.570664   36.759225
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  29.048408   35.972811
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  29.086057   35.166988
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  28.492501   34.327520
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  28.112638   33.441521
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  26.926129   32.538328
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  25.765102   31.625437
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  25.092088   30.692891
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  24.478990   29.758544
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  24.125803   28.847201
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  23.231080   27.946756
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  23.065737   27.149216
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  22.665820   26.459021
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  22.341536   25.857325
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  21.100200   25.252292
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  20.142934   24.616187
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  19.274447   23.915358
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  17.491755   23.129590
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  15.594103   22.235409
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  13.345398   21.265357
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  11.595120   20.253215
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   9.429405   19.134452
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   6.615766   17.858508
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   3.499138   16.385174
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   1.723720   14.848934
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   0.247450   13.219057
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  -1.317580   11.505957
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -2.308727    9.745224

Testing indicator 70/201: bamboo_ta.trend.breakouts

================================================================================
Testing breakouts...
================================================================================

=== Breakouts Test Results ===

Indicator Description:
Name:
    S/R Breakouts and Retests

Description:
    Makes it easy to work with Support and Resistance.
    Find Retests, Breakouts, and the next levels.

More info:
    https://www.tradingview.com/script/iHKi8BGJ-S-R-Breakouts-and-Retests/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', and 'close' columns.
    - length (int): Lookback period.

Call with:
    breakout = bta.breakouts(df, length=20)
    df['support_level'] = breakout['support_level']
    df['resistance_level'] = breakout['resistance_level']
    df['support_breakout'] = breakout['support_breakout']
    df['resistance_breakout'] = breakout['resistance_breakout']
    df['support_retest'] = breakout['support_retest']
    df['potential_support_retest'] = breakout['potential_support_retest']
    df['resistance_retest'] = breakout['resistance_retest']
    df['potential_resistance_retest'] = breakout['potential_resistance_retest']

Returns:
    pd.DataFrame: DataFrame with event columns populated.

Last 32 rows of data with breakouts values:
           date       open       high        low      close         volume  support_level  resistance_level  support_breakout  resistance_breakout  support_retest  potential_support_retest  resistance_retest  potential_resistance_retest
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060           0.00              0.00             False                 True               0                         0                  0                            0
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520           0.00              0.00             False                 True               0                         0                  0                            0
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810           0.00              0.00             False                 True               0                         0                  0                            0
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830         336.29              0.00             False                 True               0                         0                  0                            0
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280           0.00              0.00             False                 True               0                         0                  0                            0
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662         843.61           4499.99             False                 True               0                         0                  1                            1
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100         395.10              0.00             False                 True               0                         0                  0                            0
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900           0.00              0.00             False                 True               0                         0                  0                            0
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880           0.00              0.00             False                 True               0                         0                  0                            0
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950           0.00              0.00             False                 True               0                         0                  0                            0
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330           0.00              0.00             False                 True               0                         0                  1                            1
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910           0.00              0.00             False                 True               0                         0                  1                            1
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450           0.00              0.00             False                 True               0                         0                  1                            1
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230           0.00              0.00             False                 True               0                         0                  1                            1
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260           0.00              0.00             False                 True               0                         0                  0                            0
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775         641.63           1162.00             False                 True               0                         0                  0                            0
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740        1821.37           2543.07             False                 True               0                         0                  0                            0
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466        5118.00            559.93             False                 True               0                         0                  0                            0
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550        1139.00              0.00             False                 True               0                         0                  0                            0
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000         159.66              0.00             False                 True               0                         0                  1                            1
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700         777.34              0.00             False                 True               0                         0                  1                            1
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430        3724.01              0.00             False                 True               0                         0                  1                            1
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360        4855.99              0.00             False                 True               0                         0                  1                            1
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030        1055.99              0.00             False                 True               0                         0                  1                            1
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880         540.22              0.00             False                 True               0                         0                  1                            1
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100         405.17              0.00             False                 True               0                         0                  1                            1
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270        1648.62              0.00             False                 True               0                         0                  1                            1
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290           0.00              0.00             False                 True               0                         0                  1                            1
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900         654.90              0.00             False                 True               0                         0                  1                            1
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780         980.10              0.00             False                 True               0                         0                  1                            1
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500         143.00              0.00              True                False               1                         1                  0                            0
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890           0.00              0.00              True                False               1                         1                  0                            0

Testing indicator 71/201: bamboo_ta.trend.chande_kroll_stop

================================================================================
Testing chande_kroll_stop...
================================================================================

=== Chande Kroll Stop Test Results ===

Indicator Description:
Name:
    Chande Kroll Stop (CKSP)

Description:
    The Chande Kroll Stop was developed by Tushar Chande and Stanley Kroll in their book
    "The New Technical Trader". It is a trend-following indicator that creates dynamic 
    stop-loss levels based on market volatility measured by the Average True Range (ATR).
    
    The indicator generates two lines:
    - Long Stop: Used as a trailing stop for long positions
    - Short Stop: Used as a trailing stop for short positions
    
    The calculation can be done in two modes:
    - TradingView mode: Uses RMA for ATR and defaults to (10, 1, 9) for parameters
    - Book mode: Uses SMA for ATR and defaults to (10, 3, 20) for parameters
    
    Traditional usage involves:
    - Selling when price closes below the Long Stop
    - Buying when price closes above the Short Stop
    - Using the stops as trailing stop-loss levels to protect profits

More info:
    https://www.multicharts.com/discussion/viewtopic.php?t=48914
    "The New Technical Trader", Wiley 1st ed. ISBN 9780471597803, page 95

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', and 'close' columns.
    - atr_length (int): Period for ATR and first stop calculation. Default is 10.
    - atr_scalar (float): ATR multiplier for stop calculation. Default is 1.0 in TradingView mode, 3.0 in book mode.
    - stop_length (int): Length for the final stop calculation. Default is 9 in TradingView mode, 20 in book mode.
    - trading_view_mode (bool): If True, uses TradingView implementation (RMA for ATR), otherwise uses book implementation (SMA for ATR). Default is True.

Call with:
    result = bta.chande_kroll_stop(df)
    df['long_stop'] = result['long_stop']
    df['short_stop'] = result['short_stop']

Returns:
    pd.DataFrame: DataFrame with 'long_stop' and 'short_stop' columns.

Last 32 rows of data with chande_kroll_stop values:
           date       open       high        low      close         volume      long_stop    short_stop
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   96198.266225  89766.587870
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   96289.498578  90120.233083
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   96289.498578  90463.123775
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   96289.498578  92399.930397
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   96289.498578  92450.364358
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   99674.754506  93274.034922
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   99674.754506  94056.821430
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   99821.198850  94071.779252
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   99978.548965  94071.779252
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   99978.548965  94071.779252
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   99978.548965  94071.779252
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   99978.548965  94071.779252
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   99978.548965  94184.928327
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   99978.548965  94609.451035
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  100061.683910  94526.316090
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  101225.029519  94526.316090
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  103724.589567  94526.316090
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  104388.216610  94526.316090
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  104388.216610  94526.316090
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  104388.216610  94526.316090
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  104388.216610  94526.316090
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  104388.216610  94526.316090
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  104388.216610  94526.316090
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  104388.216610  96572.361265
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  104388.216610  96572.361265
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  104388.216610  96474.215524
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  104132.196949  96474.215524
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  104111.324476  96474.215524
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  104111.324476  96234.495117
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  104111.324476  96067.347606
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  104111.324476  95331.181845
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  104111.324476  95331.181845

Testing indicator 72/201: bamboo_ta.trend.choppiness_index

================================================================================
Testing choppiness_index...
================================================================================

=== Choppiness Index Test Results ===

Indicator Description:
Name:
    Choppiness Index (CHOP)

Description:
    The Choppiness Index was created by Australian commodity trader E.W. Dreiss and is 
    designed to determine if the market is choppy (trading sideways) or not choppy 
    (trading within a trend in either direction).
    
    The indicator oscillates between 0 and 100, where:
    - Values closer to 100 indicate a choppy, sideways market with no clear trend
    - Values closer to 0 indicate a trending market (either up or down)
    
    This indicator is useful for determining whether to use trend-following strategies 
    or range-bound strategies. It can also help identify potential breakouts when transitioning 
    from a choppy to a trending market.
    
    Note that this is a non-directional indicator; it does not indicate whether the trend is 
    up or down, only the degree to which the market is trending or not trending.

More info:
    https://www.tradingview.com/scripts/choppinessindex/
    https://www.motivewave.com/studies/choppiness_index.htm

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', and 'close' columns.
    - length (int): The period for the Choppiness Index calculation. Default is 14.
    - atr_length (int): The period for the ATR calculation. Default is 1.
    - use_natural_log (bool): If True, natural logarithm (ln) is used instead of log base 10. Default is False.
    - scalar (float): Scaling factor for the indicator. Default is 100.

Call with:
    result = bta.choppiness_index(df)
    df['chop'] = result['chop']

Returns:
    pd.DataFrame: DataFrame with 'chop' column.

Last 32 rows of data with choppiness_index values:
           date       open       high        low      close         volume       chop
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  55.704600
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  57.587456
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  61.829208
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  62.989293
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  63.861817
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  53.724982
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  55.987539
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  55.874307
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  55.787448
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  56.292193
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  56.185479
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  56.697115
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  57.503133
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  57.156259
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  57.566612
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  55.582335
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  49.982291
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  48.952612
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  50.165091
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  54.978133
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  50.231444
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  51.185296
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  51.491190
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  49.604714
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  50.795435
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  48.058226
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  49.060659
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  49.922928
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  49.643500
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  48.561302
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  46.310258
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  51.447316

Testing indicator 73/201: bamboo_ta.trend.cross_signals

================================================================================
Testing cross_signals...
================================================================================
Error during testing: cross_signals() missing 3 required positional arguments: 'signal_column', 'level_a', and 'level_b'

Testing indicator 74/201: bamboo_ta.trend.decay

================================================================================
Testing decay...
================================================================================

=== Decay Test Results ===

Indicator Description:
Name:
    Decay Indicator

Description:
    The Decay indicator creates a curve that gradually decays moving forward from 
    prior signals, like crosses or other events. This can be useful for trailing 
    signals or creating trailing stops that gradually decrease over time.
    
    The indicator supports two decay modes:
    - Linear: Applies a constant rate of decay based on 1/length
    - Exponential: Applies an exponential decay based on exp(-length)
    
    In both cases, the indicator ensures the decay value never falls below 0 and 
    resets when a new price exceeds the decaying value, creating a sawtooth-like pattern.
    
    This can be particularly useful for:
    - Creating trailing stops that decay over time
    - Generating fading signals after indicator crosses
    - Implementing time-based exits from positions

More info:
    https://tulipindicators.org/decay

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The period for decay calculation. Higher values result in slower decay. Default is 5.
    - mode (str): Decay mode, either 'linear' or 'exponential' (can also use 'exp'). Default is 'linear'.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    # Linear decay
    result = bta.decay(df)
    df['decay_lin'] = result['decay_lin']
    
    # Exponential decay
    result = bta.decay(df, mode='exp')
    df['decay_exp'] = result['decay_exp']

Returns:
    pd.DataFrame: DataFrame with 'decay_lin' or 'decay_exp' column depending on the mode.

Last 32 rows of data with decay values:
           date       open       high        low      close         volume  decay_lin
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   97459.80
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   97185.18
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   97184.98
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   95849.69
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   98587.32
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   98587.12
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   99740.84
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   99831.99
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  101109.59
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  101109.39
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   97276.27
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  101125.00
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  101124.80
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  101424.25
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  101424.05
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  104463.99
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  106058.66
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  106133.74
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  106133.54
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  100203.81
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   97805.44
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   97805.24
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   97291.79
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   95186.07
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   98663.58
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   99429.60
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   99429.40
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   95791.40
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   95300.00
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   95299.80
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   93738.00
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   93576.00

Testing indicator 75/201: bamboo_ta.trend.decreasing

================================================================================
Testing decreasing...
================================================================================

=== Decreasing Test Results ===

Indicator Description:
Name:
    Decreasing Indicator

Description:
    The Decreasing indicator identifies whether a series is decreasing over a specified period.
    It returns True (or 1 if as_int=True) if the series is decreasing, False (or 0) otherwise.
    
    When strict=True, it checks if the series is continuously decreasing over each period
    within the specified length. When strict=False (default), it simply checks if the
    value has decreased over the entire length period.
    
    The percent parameter allows for a percentage-based adjustment to the series, which
    can be useful for filtering out minor fluctuations.
    
    This indicator can be useful for trend identification, filtering trading signals,
    or as a component in more complex trading strategies.

More info:
    N/A (Original implementation by Kevin Johnson for Pandas TA)

Parameters:
    - df (pandas.DataFrame): Input DataFrame which must contain the specified column.
    - length (int): The period over which to check for decreasing values. Default is 1.
    - strict (bool): If True, checks if the series is continuously decreasing over each
      period within the length. Default is False.
    - as_int (bool): If True, returns 1 for decreasing, 0 otherwise. If False, returns
      boolean values. Default is True.
    - percent (float): Percentage adjustment to apply to the series. If specified, compares
      against (1 - 0.01 * percent) * series. Default is None.
    - drift (int): The difference period for comparison. Default is 1.
    - column (str): Name of the column to check. Default is 'close'.

Call with:
    result = bta.decreasing(df, length=5, strict=True)
    df['decreasing'] = result['decreasing']

Returns:
    pd.DataFrame: DataFrame with 'decreasing' column containing the indicator values.

Last 32 rows of data with decreasing values:
           date       open       high        low      close         volume  decreasing
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060           1
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520           0
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810           1
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830           0
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280           0
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662           1
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100           0
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900           0
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880           0
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950           1
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330           1
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910           0
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450           1
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230           0
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260           1
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775           0
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740           0
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466           0
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550           1
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000           1
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700           0
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430           1
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360           1
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030           1
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880           0
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100           0
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270           1
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290           1
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900           0
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780           1
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500           1
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890           0

Testing indicator 76/201: bamboo_ta.trend.detrended_price_oscillator

================================================================================
Testing detrended_price_oscillator...
================================================================================

=== Detrended Price Oscillator Test Results ===

Indicator Description:
Name:
    Detrended Price Oscillator (DPO)

Description:
    The Detrended Price Oscillator (DPO) is an indicator designed to remove trend from 
    price and make it easier to identify cycles. Unlike other oscillators, the DPO is 
    not a momentum indicator. It instead highlights cycles by removing the underlying 
    trend from the price data.
    
    The DPO accomplishes this by comparing the current price (or a displaced price) to 
    a moving average from a displaced period in the past. By doing this, it attempts to 
    eliminate the trend component from the price action, leaving the cyclical components.
    
    The indicator can be calculated in two modes:
    - Centered (default): Uses future data for alignment, suitable for historical analysis
    - Non-centered: Uses only historical data, suitable for real-time trading
    
    When the DPO is above zero, it indicates that price is above the displaced moving average.
    When it's below zero, price is below the displaced moving average.

More info:
    https://www.tradingview.com/scripts/detrendedpriceoscillator/
    https://www.fidelity.com/learning-center/trading-investing/technical-analysis/technical-indicator-guide/dpo
    http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:detrended_price_osci

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The period for the moving average calculation. Default is 20.
    - centered (bool): Whether to center the calculation (shifts result for better alignment). 
                      True is for historical analysis, False for real-time. Default is True.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.detrended_price_oscillator(df)
    df['dpo'] = result['dpo']

Returns:
    pd.DataFrame: DataFrame with 'dpo' column.

Last 32 rows of data with detrended_price_oscillator values:
           date       open       high        low      close         volume        dpo
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  -837.0110
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  -115.4355
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810 -1647.5880
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830 -1814.5160
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   350.4150
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662 -1995.9500
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   285.7285
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   148.8770
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  1426.3840
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950 -2476.6085
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -3165.4190
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  1399.2985
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   326.9995
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  1743.1465
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  1614.6980
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  4856.1500
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  6727.4680
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  7093.0275
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  1340.2110
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -1211.8915
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  -490.8615
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430        NaN
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360        NaN
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030        NaN
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880        NaN
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100        NaN
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270        NaN
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290        NaN
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900        NaN
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780        NaN
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500        NaN
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890        NaN

Testing indicator 77/201: bamboo_ta.trend.double_exponential_moving_average

================================================================================
Testing double_exponential_moving_average...
================================================================================

=== Double Exponential Moving Average Test Results ===

Indicator Description:
Name:
    Double Exponential Moving Average (DEMA)

Description:
    The Double Exponential Moving Average attempts to create a smoother average with less
    lag than the standard Exponential Moving Average (EMA). It was developed by Patrick Mulloy
    and first published in the February 1994 issue of "Technical Analysis of Stocks & Commodities" magazine.
    
    The DEMA uses multiple EMA calculations to reduce the lag of traditional moving averages.
    By giving more weight to recent prices and reducing the lag associated with traditional
    moving averages, the DEMA can be more responsive to price changes.

More info:
    https://www.tradingview.com/support/solutions/43000502589-double-exponential-moving-average-dema/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The period for the DEMA calculation. Default is 10.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.double_exponential_moving_average(df)
    df['dema'] = result['dema']

Returns:
    pd.DataFrame: DataFrame with 'dema' column.

Last 32 rows of data with double_exponential_moving_average values:
           date       open       high        low      close         volume           dema
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   97517.091439
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   97765.423169
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   97467.997527
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   97218.095155
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   97910.570256
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   97853.792423
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   98709.798586
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   99347.043751
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  100212.007745
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   99553.558262
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   98811.561889
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   99739.694502
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  100036.318996
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  100703.235260
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  101172.113577
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  102500.463076
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  103981.762391
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  105066.853588
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  103868.264602
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  102038.275129
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  100775.534568
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   99662.308422
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   98142.627500
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   96926.829280
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   97295.616941
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   97840.942997
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   97055.868936
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   95995.117905
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   95559.858524
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   94743.598657
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   93851.163583
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   93477.893374

Testing indicator 78/201: bamboo_ta.trend.exponential_moving_average

================================================================================
Testing exponential_moving_average...
================================================================================

=== Exponential Moving Average Test Results ===

Indicator Description:
Name:
    Exponential Moving Average (EMA)

Description:
    The Exponential Moving Average gives more weight to recent prices and thus reacts
    more quickly to price changes than the Simple Moving Average.

More info:
    https://www.investopedia.com/terms/e/ema.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain at least the column specified.
    - column (str): The column on which EMA is to be calculated. Default is 'close'.
    - period (int): The period over which EMA is to be calculated. Default is 21.

Call with:
    df['ema'] = bta.exponential_moving_average(df, "close", 21)['ema']

Returns:
    pd.DataFrame: DataFrame with 'ema' column, where first `period-1` values are NaN.

Last 32 rows of data with exponential_moving_average values:
           date       open       high        low      close         volume           ema
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  91215.271670
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  91757.990609
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  92129.138735
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  92467.370668
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  93023.729699
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  93380.266090
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  93958.500081
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  94492.453710
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  95094.011555
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  95292.416868
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  95410.651698
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  95930.137908
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  96300.515371
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  96766.309428
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  97189.372207
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  97850.701097
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  98596.879179
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  99282.048345
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  99365.863041
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  99192.771855
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  99066.650778
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  98905.317980
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  98567.222709
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  98232.154281
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  98271.374801
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  98376.668001
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  98141.661819
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  97792.331653
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  97565.756048
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  97217.796408
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  96815.455825
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  96520.959841

Testing indicator 79/201: bamboo_ta.trend.fractal_weighted_moving_average

================================================================================
Testing fractal_weighted_moving_average...
================================================================================

=== Fractal Weighted Moving Average Test Results ===

Indicator Description:
Name:
    Fractal Weighted Moving Average (FWMA)

Description:
    The Fractal Weighted Moving Average is a variation of the Weighted Moving Average
    where the weights are based on the Fibonacci sequence. The Fibonacci sequence is
    a series of numbers where each number is the sum of the two preceding ones, usually
    starting with 1 and 1. 
    
    By using the Fibonacci sequence as weights, more emphasis is placed on certain
    periods based on the natural mathematical progression found throughout nature.
    This creates a moving average that may better align with natural market cycles.

More info:
    https://www.investopedia.com/terms/f/fibonacci-retracement.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The period for the FWMA calculation. Default is 10.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.fractal_weighted_moving_average(df)
    df['fwma'] = result['fwma']

Returns:
    pd.DataFrame: DataFrame with 'fwma' column.

Last 32 rows of data with fractal_weighted_moving_average values:
           date       open       high        low      close         volume           fwma
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   96208.733077
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   96581.912517
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   96286.946434
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   96117.736224
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   97059.088601
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   97019.354545
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   98087.966643
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   98761.660979
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   99677.434685
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   98757.760420
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   97931.987762
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   99163.143357
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   99490.353287
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  100252.335105
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  100699.616503
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  102163.292937
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  103666.224126
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  104628.786294
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  102934.580629
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  100837.209860
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   99692.673357
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   98760.974336
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   97386.992448
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   96409.328671
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   97268.037762
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   98080.218322
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   97182.983147
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   96042.972168
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   95741.269231
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   94966.716853
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   94122.808951
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   93902.418462

Testing indicator 80/201: bamboo_ta.trend.holt_winters_moving_average

================================================================================
Testing holt_winters_moving_average...
================================================================================

=== Holt Winters Moving Average Test Results ===

Indicator Description:
Name:
    Holt-Winters Moving Average (HWMA)

Description:
    The Holt-Winters Moving Average is a triple exponential smoothing method that accounts
    for trend and seasonality in time series data. It uses three parameters (alpha, beta, gamma)
    to control the smoothing of the level, trend, and seasonality components.
    
    This implementation is based on the Holt-Winters method but simplified for use as a
    moving average indicator in technical analysis. It's particularly useful for data that
    exhibits both trend and cyclical patterns.

More info:
    https://en.wikipedia.org/wiki/Exponential_smoothing#Triple_exponential_smoothing

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - alpha (float): Smoothing parameter for the level component (0 < alpha < 1). Default is 0.2.
    - beta (float): Smoothing parameter for the trend component (0 < beta < 1). Default is 0.1.
    - gamma (float): Smoothing parameter for the seasonality component (0 < gamma < 1). Default is 0.1.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.holt_winters_moving_average(df)
    df['hwma'] = result['hwma']

Returns:
    pd.DataFrame: DataFrame with 'hwma' column.

Last 32 rows of data with holt_winters_moving_average values:
           date       open       high        low      close         volume           hwma
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  102659.593852
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  102423.343850
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  101774.861985
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  101068.916621
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  100924.122065
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  100316.623980
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  100290.659579
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  100190.913000
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  100297.923642
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   99467.634233
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   98515.221452
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   98618.384810
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   98415.191828
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   98512.213705
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   98568.578956
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   99270.724608
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  100229.923138
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  101085.462612
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  100526.063992
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   99424.919634
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   98532.261467
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   97640.112958
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   96402.329291
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   95263.421073
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   95121.733484
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   95200.401492
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   94504.921611
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   93603.806995
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   93076.655668
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   92317.818004
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   91494.274584
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   90999.828601

Testing indicator 81/201: bamboo_ta.trend.hull_moving_average

================================================================================
Testing hull_moving_average...
================================================================================

=== Hull Moving Average Test Results ===

Indicator Description:
Name:
    Hull Moving Average (HMA)

Description:
    The Hull Moving Average (HMA) is an improved moving average that is responsive and
    has minimal lag. It involves the combination of WMA (Weighted Moving Average) with
    different periods.

More info:
    https://alanhull.com/hull-moving-average

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain at least the column specified.
    - column (str): The column on which HMA is to be calculated. Default is 'close'.
    - period (int): The period over which HMA is to be calculated. Default is 9.

Call with:
    df['hma'] = bta.hull_moving_average(df, 'close', 9)['hma']

Returns:
    pd.DataFrame: DataFrame with 'hma' column.

Last 32 rows of data with hull_moving_average values:
           date       open       high        low      close         volume            hma
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   96359.550148
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   97287.865444
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   97264.968185
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   96757.635519
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   97000.130556
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   97221.415889
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   98248.090630
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   99350.922000
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  100578.228259
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  100358.447778
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   99012.978556
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   98729.126074
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   99074.186000
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  100286.661778
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  101367.459926
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  102866.342667
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  104754.171148
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  106419.663556
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  105614.287148
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  102506.454296
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   99034.535889
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   96516.141889
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   94913.985889
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   94012.535556
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   94732.563074
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   96525.822407
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   97433.300407
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   96824.864593
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   95634.269370
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   94275.015333
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   93149.371000
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   92616.868741

Testing indicator 82/201: bamboo_ta.trend.increasing

================================================================================
Testing increasing...
================================================================================

=== Increasing Test Results ===

Indicator Description:
Name:
    Increasing Indicator

Description:
    The Increasing indicator identifies when a series is increasing over a specified period.
    It returns True (or 1) if the series is increasing, and False (or 0) otherwise.
    
    The indicator has two modes:
    - Standard: Returns True if the current value is greater than the value 'length' periods ago
    - Strict: Returns True only if the series has been continuously increasing over the entire period
    
    Additionally, a percentage parameter can be used to adjust the comparison threshold,
    allowing for a more flexible definition of what constitutes "increasing."
    
    This indicator is useful for identifying uptrends, determining when to exit short positions,
    or finding potential entry points for long positions.

More info:
    None

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The lookback period for comparison. Default is 1.
    - strict (bool): If True, checks if the series is continuously increasing over the period. Default is False.
    - as_int (bool): If True, returns the result as integers (1 for True, 0 for False). Default is True.
    - percent (float): Optional percentage threshold adjustment. Default is None.
    - drift (int): The lag period for comparison in strict mode. Default is 1.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    # Standard increasing check
    result = bta.increasing(df)
    df['increasing'] = result['increasing']
    
    # Strict increasing check with longer period
    result = bta.increasing(df, length=5, strict=True)
    df['strict_increasing'] = result['strict_increasing']
    
    # Increasing with percentage threshold
    result = bta.increasing(df, percent=1.5)
    df['increasing_1.5pct'] = result['increasing_1.5pct']

Returns:
    pd.DataFrame: DataFrame with a column indicating increasing status (name varies based on parameters).

Last 32 rows of data with increasing values:
           date       open       high        low      close         volume  increasing
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060           0
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520           1
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810           0
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830           1
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280           1
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662           0
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100           1
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900           1
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880           1
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950           0
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330           0
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910           1
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450           0
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230           1
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260           0
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775           1
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740           1
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466           1
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550           0
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000           0
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700           1
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430           0
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360           0
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030           0
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880           1
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100           1
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270           0
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290           0
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900           1
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780           0
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500           0
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890           1

Testing indicator 83/201: bamboo_ta.trend.jurik_moving_average

================================================================================
Testing jurik_moving_average...
================================================================================

=== Jurik Moving Average Test Results ===

Indicator Description:
Name:
    Jurik Moving Average (JMA)

Description:
    Mark Jurik's Moving Average (JMA) is an advanced adaptive moving average that attempts
    to eliminate market noise to reveal the underlying trend. Developed by Mark Jurik, this
    indicator features extremely low lag, smooth output, and responsiveness to market gaps.
    
    The JMA uses a combination of techniques including dynamic volatility bands, preliminary
    smoothing with an adaptive EMA, additional smoothing with a Kalman filter, and final
    processing with a unique Jurik adaptive filter. This multi-stage process results in a
    highly responsive yet smooth indicator.
    
    The phase parameter allows fine-tuning the behavior between more responsive (positive values)
    or smoother (negative values) output.

More info:
    https://www.tradingview.com/script/nZuBWW9j-Jurik-Moving-Average-JMA/
    https://www.prorealcode.com/prorealtime-indicators/jurik-volatility-bands/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The period for the JMA calculation. Default is 7.
    - phase (float): Controls how heavy/light the average is. Range [-100, 100], 
      where negative values create a smoother average and positive values create a more responsive average.
      Default is 0.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.jurik_moving_average(df)
    df['jma'] = result['jma']

Returns:
    pd.DataFrame: DataFrame with 'jma' column.

Last 32 rows of data with jurik_moving_average values:
           date       open       high        low      close         volume            jma
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   95602.275522
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   96100.660160
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   96324.939343
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   96342.796818
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   96651.736216
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   96903.621148
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   97455.761170
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   98132.765376
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   98983.678798
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   99197.836016
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   98846.751644
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   99022.135996
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   99301.094585
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   99772.261293
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  100290.721672
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  101534.928049
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  103268.867790
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  104594.557571
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  104116.536297
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  101764.814156
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   99994.602601
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   98754.500597
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   97377.024759
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   96273.133278
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   96083.053408
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   96562.249950
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   96775.255536
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   96441.912115
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   96031.183653
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   95464.644678
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   94748.868834
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   94167.900372

Testing indicator 84/201: bamboo_ta.trend.least_squares_moving_average

================================================================================
Testing least_squares_moving_average...
================================================================================

=== Least Squares Moving Average Test Results ===

Indicator Description:
Name:
    Least Squares Moving Average (LSMA)

Description:
    LSMA uses linear regression to compute the trend of the data over a specified period.
    It fits a straight line to the data points using the method of least squares to depict
    the direction of movement.

More info:
    https://www.fidelity.com/learning-center/trading-investing/technical-analysis/technical-indicator-guide/lsma

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain at least the column specified.
    - column (str): The column on which LSMA is to be calculated. Default is 'close'.
    - period (int): The period over which LSMA is to be calculated. Default is 21.

Call with:
    df['lsma'] = bta.least_squares_moving_average(df, 'close', 50)['lsma']

Returns:
    pd.DataFrame: DataFrame with 'lsma' column.

Last 32 rows of data with least_squares_moving_average values:
           date       open       high        low      close         volume           lsma
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   98565.018528
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   98191.492727
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   98149.322294
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   97949.067100
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   98362.924329
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   98088.309394
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   98537.876494
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   98848.125584
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   99195.456623
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   98774.213030
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   98319.065455
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   98800.854286
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   99378.781169
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  100241.574762
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  100954.575281
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  102180.860952
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  103139.220043
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  103841.932511
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  103679.407879
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  102952.936450
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  102436.792208
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  101724.838485
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  100701.679827
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   99522.329004
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   99027.582078
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   98892.978052
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   97945.378268
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   97014.061342
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   96339.759567
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   95568.788398
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   94360.559134
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   93284.619351

Testing indicator 85/201: bamboo_ta.trend.long_run

================================================================================
Testing long_run...
================================================================================
Error during testing: long_run() missing 2 required positional arguments: 'fast_column' and 'slow_column'

Testing indicator 86/201: bamboo_ta.trend.mcginley_dynamic

================================================================================
Testing mcginley_dynamic...
================================================================================

=== Mcginley Dynamic Test Results ===

Indicator Description:
Name:
    McGinley Dynamic Indicator

Description:
    The McGinley Dynamic indicator was developed by John R. McGinley, a Certified Market
    Technician, as an improved moving average that minimizes price separation, reduces
    whipsaws, and hugs prices more closely than traditional moving averages.
    
    What makes the McGinley Dynamic unique is its adaptive nature. It speeds up in downtrends
    to follow prices more closely, yet moves more slowly in uptrends. This is achieved by
    incorporating a dynamic smoothing factor that adjusts based on the relationship between
    the current price and the indicator's previous value.
    
    The constant parameter allows for additional fine-tuning, with lower values (e.g., 0.6)
    making the indicator more responsive to price changes.

More info:
    https://www.investopedia.com/articles/forex/09/mcginley-dynamic-indicator.asp
    https://school.stockcharts.com/doku.php?id=technical_indicators:mcginley_dynamic

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The period for the calculation. Default is 10.
    - constant (float): Multiplier for the denominator, sometimes set to 0.6 for more
      responsiveness. Default is 1.0.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.mcginley_dynamic(df)
    df['mcgd'] = result['mcgd']

Returns:
    pd.DataFrame: DataFrame with 'mcgd' column.

Last 32 rows of data with mcginley_dynamic values:
           date       open       high        low      close         volume          mcgd
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  85253.241273
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  85959.810045
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  86599.214822
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  87215.606844
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  87912.102610
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  88522.958950
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  89219.012149
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  89896.011085
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  90596.718208
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  91099.267863
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  91533.922591
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  92177.738277
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  92742.675418
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  93349.621010
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  93928.849269
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  94617.453853
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  95342.177273
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  96044.943250
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  96395.980740
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  96497.981859
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  96621.875402
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  96687.059638
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  96527.289357
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  96350.987458
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  96561.315085
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  96816.451358
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  96709.509478
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  96442.853540
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  96322.986666
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  96034.797250
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  95662.761635
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  95434.839454

Testing indicator 87/201: bamboo_ta.trend.parabolic_sar

================================================================================
Testing parabolic_sar...
================================================================================

=== Parabolic Sar Test Results ===

Indicator Description:
Name:
    Parabolic Stop and Reverse (PSAR)

Description:
    The Parabolic SAR (Stop and Reverse) is a trend-following indicator developed by 
    J. Welles Wilder. It is used to determine the direction of a trend and identify 
    potential reversal points in price.
    
    The indicator appears as a series of dots placed either above or below the price, 
    depending on the trend direction:
    - Dots below the price indicate an uptrend (stored in 'psar_long')
    - Dots above the price indicate a downtrend (stored in 'psar_short')
    
    The distance between the price and the dots gradually decreases as the trend continues,
    eventually causing a reversal when the price crosses the SAR value. At this point, the
    SAR "stops and reverses" to the other side of the price.
    
    The indicator uses an acceleration factor (AF) that increases as the trend continues
    in the same direction, causing the SAR to accelerate toward the price.
    
    This implementation returns four components:
    - psar_long: SAR values during uptrends (appears below price)
    - psar_short: SAR values during downtrends (appears above price)
    - psar_af: Current acceleration factor value
    - psar_reversal: Binary indicator (1/0) showing when SAR reversals occur

More info:
    https://www.investopedia.com/trading/introduction-to-parabolic-sar/
    https://school.stockcharts.com/doku.php?id=technical_indicators:parabolic_sar

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high' and 'low' columns, 
      and optionally 'close' if use_close is True.
    - initial_af (float): Initial acceleration factor. Default is 0.02.
    - af_step (float): Acceleration factor increment. Default is 0.02.
    - max_af (float): Maximum acceleration factor. Default is 0.2.
    - use_close (bool): Whether to use close price for initial SAR calculation. Default is False.

Call with:
    result = bta.parabolic_sar(df)
    df['psar_long'] = result['psar_long']  # SAR values during uptrends (below price)
    df['psar_short'] = result['psar_short']  # SAR values during downtrends (above price)
    df['psar_af'] = result['psar_af']  # Current acceleration factor
    df['psar_reversal'] = result['psar_reversal']  # Binary indicator for SAR reversals

Returns:
    pd.DataFrame: DataFrame with 'psar_long', 'psar_short', 'psar_af', and 'psar_reversal' columns.

Last 32 rows of data with parabolic_sar values:
           date       open       high        low      close         volume     psar_long     psar_short  psar_af  psar_reversal
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  90947.677800            NaN     0.02              0
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  91101.124044            NaN     0.02              0
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  91251.501363            NaN     0.02              0
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  91398.871136            NaN     0.02              0
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  91543.293513            NaN     0.04              0
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662           NaN  104088.000000     0.02              1
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100           NaN  104088.000000     0.02              0
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900           NaN  104088.000000     0.02              0
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880           NaN  103816.240000     0.02              0
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950           NaN  103549.915200     0.02              0
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330           NaN  103288.916896     0.02              0
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910           NaN  103033.138558     0.02              0
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450           NaN  102782.475787     0.02              0
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230           NaN  102540.000000     0.02              0
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  90500.000000            NaN     0.02              1
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  90743.000000            NaN     0.04              0
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  91323.280000            NaN     0.06              0
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  92311.467400            NaN     0.08              0
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  93594.790008            NaN     0.08              0
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  94775.446807            NaN     0.08              0
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700           NaN  108353.000000     0.02              1
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430           NaN  108030.590800     0.02              0
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360           NaN  107714.629784     0.02              0
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030           NaN  107404.987988     0.02              0
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880           NaN  107101.539029     0.02              0
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100           NaN  106804.159048     0.02              0
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270           NaN  106512.726667     0.02              0
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290           NaN  106227.122934     0.02              0
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900           NaN  105947.231275     0.02              0
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780           NaN  105672.937450     0.02              0
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500           NaN  105404.129501     0.04              0
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890           NaN  104849.182320     0.04              0

Testing indicator 88/201: bamboo_ta.trend.pascals_weighted_moving_average

================================================================================
Testing pascals_weighted_moving_average...
================================================================================

=== Pascals Weighted Moving Average Test Results ===

Indicator Description:
Name:
    Pascal's Weighted Moving Average (PWMA)

Description:
    Pascal's Weighted Moving Average is a type of weighted moving average where the
    weights are based on Pascal's Triangle. This creates a symmetric bell-curved weight
    distribution that gives more importance to the middle values in the calculation window.
    
    Pascal's Triangle is a triangular array of numbers where each number is the sum of the
    two numbers directly above it. When used as weights for a moving average, it creates
    a naturally balanced weight distribution that can effectively filter price noise while
    maintaining responsiveness to significant price movements.

More info:
    https://en.wikipedia.org/wiki/Pascal%27s_triangle
    https://www.investopedia.com/terms/w/weighted_average.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The period for the PWMA calculation. Default is 10.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.pascals_weighted_moving_average(df)
    df['pwma'] = result['pwma']

Returns:
    pd.DataFrame: DataFrame with 'pwma' column.

Last 32 rows of data with pascals_weighted_moving_average values:
           date       open       high        low      close         volume           pwma
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   94734.880488
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   94705.193965
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   95331.903867
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   96063.850625
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   96500.549687
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   96606.891172
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   96596.698984
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   96736.099434
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   97162.449980
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   97830.678848
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   98578.287754
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   99146.213535
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   99274.899727
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   99023.581660
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   98863.703711
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   99200.669570
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   99970.440098
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  100916.185898
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  101981.140469
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  103119.008223
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  103896.701582
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  103668.876660
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  102267.574395
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  100294.078027
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   98539.947070
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   97336.836953
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   96674.032949
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   96568.454570
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   96888.907637
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   97114.493965
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   96764.975840
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   95923.816035

Testing indicator 89/201: bamboo_ta.trend.percent_price_channel

================================================================================
Testing percent_price_channel...
================================================================================

=== Percent Price Channel Test Results ===

Indicator Description:
Name:
    Percent Change Channel (PCC)

Description:
    PCC is like KC unless it uses percentage changes in price to set channel distance.
    This channel creates bands based on the percentage change of price rather than
    absolute price movements, making it more adaptive to different price levels.

More info:
    https://www.tradingview.com/script/6wwAWXA1-MA-Streak-Change-Channel/

Parameters:
    - df (pandas.DataFrame): Input DataFrame containing the data.
    - period (int): Period for the ZEMA calculation. Default is 20.
    - mult (int): Multiplier for the range. Default is 2.

Call with:
    pcc_result = bta.percent_price_channel(df, period=20, mult=2)
    df['pcc_upper'] = pcc_result['pcc_upper']
    df['pcc_rangema'] = pcc_result['pcc_rangema']
    df['pcc_lower'] = pcc_result['pcc_lower']

Returns:
    pd.DataFrame: DataFrame with 'pcc_upper', 'pcc_rangema', and 'pcc_lower' columns.

Last 32 rows of data with percent_price_channel values:
           date       open       high        low      close         volume  pcc_upper  pcc_rangema  pcc_lower
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   7.203616     3.462291  -6.645549
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   6.760204     3.207879  -6.071314
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   6.600210     3.297623  -6.590283
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   6.338662     3.185749  -6.404334
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   7.226544     3.386765  -6.320515
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  10.636181     5.291931 -10.531541
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  11.462323     5.464232 -10.394604
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  10.089229     4.823170  -9.203452
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   9.505816     4.462504  -8.344199
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   9.750994     4.985410 -10.190644
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   9.393027     4.870188 -10.087724
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  10.789983     5.133179  -9.742732
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   9.873945     4.825855  -9.429474
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   9.332767     4.455348  -8.488624
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   8.375401     4.019516  -7.702664
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   8.761142     3.976396  -7.144442
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   8.958832     4.005888  -7.064718
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   8.376031     3.787126  -6.772473
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   8.175291     4.262715  -8.875568
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   8.801925     4.812712 -10.448924
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   9.485557     5.076760 -10.821482
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   8.860327     4.775447 -10.241462
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   8.071668     4.538314 -10.081587
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   8.046635     4.492468  -9.923237
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   9.448078     4.772504  -9.641939
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   8.602596     4.278009  -8.509440
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   8.168000     4.400955  -9.435820
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   7.927832     4.382569  -9.602445
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   7.250574     3.892851  -8.320830
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   6.474126     3.618631  -8.000399
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   6.388379     3.615958  -8.075452
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   6.924332     3.749412  -8.073317

Testing indicator 90/201: bamboo_ta.trend.pmax

================================================================================
Testing pmax...
================================================================================
Error during testing: pmax() missing 3 required positional arguments: 'period', 'multiplier', and 'length'

Testing indicator 91/201: bamboo_ta.trend.price_channel

================================================================================
Testing price_channel...
================================================================================

=== Price Channel Test Results ===

Indicator Description:
Name:
    Price Channel (PPC)

Description:
    The Price Channel % PC indicator calculates the percent change of the price channel.
    It calculates the highest high and lowest low of the trailing number of bars specified
    by the input period. The price channel calculates the highest high and lowest low of
    the trailing number of bars specified by the input period.

    When a market moves above the upper band, it is a sign of market strength. Conversely,
    when a market moves below the lower band, it is a sign of market weakness. A sustained
    move above or below the channel lines may indicate a significant breakout.

    The `percent_p` column represents the percentage position of the current closing price
    within the price channel defined by the highest high and lowest low over a specified
    period. It shows where the current closing price stands relative to the recent highest
    and lowest prices.

More info:
    https://www.investopedia.com/terms/p/price-channel.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame containing the data.
    - period (int): Period for the highest high and lowest low calculation. Default is 20.

Call with:
    ppc_result = bta.price_channel(df, period=20)
    df['ppc_upper'] = ppc_result['ppc_upper']
    df['ppc_mid'] = ppc_result['ppc_mid']
    df['ppc_lower'] = ppc_result['ppc_lower']
    df['percent_p'] = ppc_result['percent_p']

Returns:
    pd.DataFrame: DataFrame with 'ppc_upper', 'ppc_mid', 'ppc_lower', and 'percent_p' columns.

Last 32 rows of data with price_channel values:
           date       open       high        low      close         volume  ppc_upper     ppc_mid  ppc_lower  percent_p
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   99588.01   89902.010   80216.01  83.584452
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   99588.01   92330.005   85072.00  83.447035
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   99588.01   92858.000   86127.99  72.159105
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   99588.01   93128.110   86668.21  71.065187
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   99588.01   93330.695   87073.38  92.003839
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  104088.00   96405.000   88722.00  53.518352
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  104088.00   96405.000   88722.00  71.709228
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  104088.00   96732.450   89376.90  71.069397
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  104088.00   97222.500   90357.00  78.308863
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  104088.00   97294.000   90500.00  49.870989
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  104088.00   97294.000   90500.00  44.841036
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  104088.00   97294.000   90500.00  78.193995
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  104088.00   97294.000   90500.00  69.946203
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  104088.00   97294.000   90500.00  80.396306
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  104088.00   97294.000   90500.00  80.365028
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  105250.00   97875.000   90500.00  94.671119
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  107793.07   99146.535   90500.00  89.970491
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  108353.00   99426.500   90500.00  87.569260
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  108353.00   99426.500   90500.00  54.355066
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  108353.00   99426.500   90500.00  38.995463
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  108353.00   99426.500   90500.00  40.919957
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  108353.00   99426.500   90500.00  38.043970
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  108353.00   99426.500   90500.00  26.249202
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  108353.00   99426.500   90500.00  24.541926
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  108353.00   99426.500   90500.00  45.726657
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  108353.00  100292.770   92232.54  44.645500
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  108353.00  100292.770   92232.54  22.077906
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  108353.00  100292.770   92232.54  12.819051
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  108353.00  100292.770   92232.54  19.028365
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  108353.00  100292.770   92232.54   9.340056
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  108353.00   99941.725   91530.45   7.499458
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  108353.00   99941.725   91530.45  12.159572

Testing indicator 92/201: bamboo_ta.trend.q_stick

================================================================================
Testing q_stick...
================================================================================

=== Q Stick Test Results ===

Indicator Description:
Name:
    Q Stick Indicator

Description:
    The Q Stick indicator, developed by Tushar Chande, attempts to quantify and
    identify trends in candlestick charts by measuring the relationship between
    opening and closing prices over a specified period.
    
    A positive Q Stick value indicates buying pressure (more closes above opens),
    while a negative value indicates selling pressure (more closes below opens).
    Values near zero suggest a balance between buying and selling pressure.
    
    This implementation allows for different types of moving averages to be applied
    to the difference between close and open prices.

More info:
    https://library.tradingtechnologies.com/trade/chrt-ti-qstick.html

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'open' and 'close' columns.
    - length (int): Period for the moving average calculation. Default is 10.
    - ma_type (str): The type of moving average to use. Options include:
      'SMA' (Simple), 'EMA' (Exponential), 'DEMA' (Double Exponential),
      'WMA' (Weighted), 'HMA' (Hull), 'RMA' (Running/Rolling). Default is 'SMA'.

Call with:
    result = bta.q_stick(df, length=10, ma_type='EMA')
    df['q_stick'] = result['q_stick']

Returns:
    pd.DataFrame: DataFrame with 'q_stick' column containing the indicator values.

Last 32 rows of data with q_stick values:
           date       open       high        low      close         volume   q_stick
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   212.141
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  -113.196
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  -305.139
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  -182.271
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280    68.728
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   393.563
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   777.569
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   396.889
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   546.562
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   -18.352
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330    18.501
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   393.982
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   416.366
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   557.454
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   283.267
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   751.835
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   631.781
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   630.175
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   -90.558
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000    18.540
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   121.246
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  -383.299
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  -481.801
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  -654.278
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  -275.643
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  -503.440
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -1026.708
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -1183.474
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  -490.404
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  -372.369
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  -501.341
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -371.601

Testing indicator 93/201: bamboo_ta.trend.range_filter

================================================================================
Testing range_filter...
================================================================================

=== Range Filter Test Results ===

Indicator Description:
Name:
    Range Filter Buy and Sell Indicator

Description:
    This indicator smooths price action using a range filter based on a volatility-adjusted
    moving average. It identifies uptrends and downtrends while filtering out noise.

More info:
    https://www.tradingview.com/script/J3TL15C9-Range-Filter-Strategy/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain at least the "close" column.
    - column (str): The column on which the range filter is calculated. Default is "close".
    - period (int): Sampling period for smoothing range calculation. Default is 100.
    - multiplier (float): Multiplier for the smoothed range. Default is 3.0.
    - fillna (bool): If True, fills nan values. Default is False.

Call with:
    range_filter_result = bta.range_filter(df, "close", 100, 3.0)
    df["range_filter"] = range_filter_result["range_filter"]
    df["high_band"] = range_filter_result["high_band"]
    df["low_band"] = range_filter_result["low_band"]
    df["long_signal"] = range_filter_result["long_signal"]
    df["short_signal"] = range_filter_result["short_signal"]

Returns:
    pd.DataFrame: DataFrame with 'range_filter', 'high_band', 'low_band', 'long_signal', 'short_signal'.

Last 32 rows of data with range_filter values:
           date       open       high        low      close         volume   range_filter      high_band      low_band  long_signal  short_signal
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   95374.087854   98958.250707  91789.925002            0             0
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   95374.087854   98966.245717  91781.929992            0             0
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   95374.087854   98974.091473  91774.084236            0             0
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   95374.087854   98980.997480  91767.178229            0             0
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   95374.087854   98988.611117  91759.564592            0             0
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   95374.087854   98996.258874  91751.916835            0             0
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   96110.304367   99740.840000  92479.768735            0             0
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   96194.002150   99831.990000  92556.014300            0             0
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   97464.331971  101109.590000  93819.073942            0             0
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   97464.331971  101118.200221  93810.463721            0             0
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   97464.331971  101126.238028  93802.425913            0             0
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   97464.331971  101136.005032  93792.658909            0             0
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   97464.331971  101145.421599  93783.242343            0             0
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   97733.907961  101424.250000  94043.565923            0             0
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   97733.907961  101432.500267  94035.315656            0             0
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  100756.315752  104463.990000  97048.641505            0             0
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  102341.959536  106058.660000  98625.259071            0             0
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  102408.971909  106133.740000  98684.203818            0             0
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  102408.971909  106144.353827  98673.589991            0             0
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  101208.430854  104955.001708  97461.860000            0             1
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  101208.430854  104965.321619  97451.540089            0             0
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  101058.456247  104824.922494  97291.990000            0             0
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   98962.533344  102738.796689  95186.270000            0             0
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   98666.673703  102451.877407  94881.470000            0             0
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   98666.673703  102462.050348  94871.297058            0             0
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   98666.673703  102471.625632  94861.721774            0             0
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   98666.673703  102482.325182  94851.022224            0             0
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   98125.195381  101951.360761  94299.030000            0             0
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   98125.195381  101961.400389  94288.990372            0             0
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   97584.315580  101430.431161  93738.200000            0             0
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   96647.583223  100503.116445  92792.050000            0             0
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   96647.583223  100511.957529  92783.208916            0             0

Testing indicator 94/201: bamboo_ta.trend.rolling_moving_average

================================================================================
Testing rolling_moving_average...
================================================================================

=== Rolling Moving Average Test Results ===

Indicator Description:
Name:
    Rolling Moving Average (RMA)

Description:
    The RMA function calculates the Rolling Moving Average (RMA) of a specified column
    in a DataFrame over a given period. It uses an exponential moving average (EMA)
    calculation with a specified smoothing factor (alpha) and returns a DataFrame
    containing the RMA values. This function allows for flexible moving average
    calculations based on any column in the input DataFrame.

More info:
    The RMA is similar to an EMA but with a different smoothing factor calculation.
    It's used in indicators like RSI.

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - column (str): The column on which RMA is to be calculated.
    - period (int): The period over which RMA is to be calculated.

Call with:
    df['rma'] = bta.rolling_moving_average(df, 'close', 14)['rma']

Returns:
    pd.DataFrame: DataFrame with 'rma' column.

Last 32 rows of data with rolling_moving_average values:
           date       open       high        low      close         volume           rma
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  88977.419291
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  89563.687913
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  90012.040205
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  90429.015190
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  91011.751248
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  91435.599730
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  92028.831178
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  92586.199666
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  93195.013261
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  93486.545885
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  93708.435465
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  94238.190074
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  94650.054355
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  95133.925472
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  95582.930796
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  96217.292167
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  96920.247013
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  97578.353655
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  97765.900536
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  97744.183355
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  97748.558830
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  97715.946771
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  97535.255573
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  97345.699460
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  97439.833785
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  97581.959943
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  97454.077090
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  97228.716583
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  97090.951113
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  96851.468891
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  96561.510399
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  96348.259656

Testing indicator 95/201: bamboo_ta.trend.sequential_weighted_moving_average

================================================================================
Testing sequential_weighted_moving_average...
================================================================================

=== Sequential Weighted Moving Average Test Results ===

Indicator Description:
Name:
    Sequential Weighted Moving Average (SWMA)

Description:
    A weighted moving average where weights are based on a symmetric triangle pattern.
    For example: n=3 -> [1/4, 2/4, 1/4], n=4 -> [1/6, 2/6, 2/6, 1/6], etc.
    This creates a symmetric weight distribution that gives more importance to the
    middle values in the calculation window.
    
    This moving average has variable length in contrast to TradingView's fixed
    length of 4. It effectively smooths price data while reducing lag and maintaining
    responsiveness to significant price movements.

More info:
    https://www.tradingview.com/study-script-reference/#fun_swma

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The period for the SWMA calculation. Default is 10.
    - asc (bool): Whether recent values should weigh more. Default is True.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.sequential_weighted_moving_average(df)
    df['swma'] = result['swma']

Returns:
    pd.DataFrame: DataFrame with 'swma' column.

Last 32 rows of data with sequential_weighted_moving_average values:
           date       open       high        low      close         volume           swma
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   95576.890000
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   95469.179667
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   95572.451667
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   95783.543667
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   96099.827000
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   96448.699667
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   96769.495000
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   97049.335333
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   97505.255333
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   97910.623333
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   98266.659667
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   98650.913333
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   98955.721667
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   99137.973000
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   99283.012000
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   99734.112333
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  100361.422333
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  101146.908667
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  101885.977000
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  102482.618667
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  102719.191000
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  102401.174667
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  101553.787333
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  100324.667000
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   99176.278667
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   98213.967000
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   97423.594000
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   96895.868667
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   96747.010000
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   96611.390000
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   96214.461000
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   95689.540000

Testing indicator 96/201: bamboo_ta.trend.short_run

================================================================================
Testing short_run...
================================================================================
Error during testing: short_run() missing 2 required positional arguments: 'fast_column' and 'slow_column'

Testing indicator 97/201: bamboo_ta.trend.simple_moving_average

================================================================================
Testing simple_moving_average...
================================================================================

=== Simple Moving Average Test Results ===

Indicator Description:
Name:
    Simple Moving Average (SMA)

Description:
    The Simple Moving Average is the unweighted mean of the previous 'period' data points.

More info:
    https://www.investopedia.com/terms/s/sma.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain at least the column specified.
    - column (str): The column on which SMA is to be calculated. Default is 'close'.
    - period (int): The period over which SMA is to be calculated. Default is 21.

Call with:
    df['sma'] = bta.simple_moving_average(df, 'close', 50)['sma']

Returns:
    pd.DataFrame: DataFrame with 'sma' column.

Last 32 rows of data with simple_moving_average values:
           date       open       high        low      close         volume           sma
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  92682.810476
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  93483.532857
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  93826.039048
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  94202.119048
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  94593.172381
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  95051.269524
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  95465.972857
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  95906.214286
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  96442.100000
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  96766.499524
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  96970.414286
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  97296.054286
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  97376.395714
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  97496.979048
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  97675.436190
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  97988.005238
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  98609.369524
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  99284.063810
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  99490.773333
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  99577.339048
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  99593.788571
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  99635.883810
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  99540.697619
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  99495.023810
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  99629.018571
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  99669.127143
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  99614.173333
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  99355.039524
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  99139.230476
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  98788.211905
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  98574.668095
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  98431.001429

Testing indicator 98/201: bamboo_ta.trend.sine_weighted_moving_average

================================================================================
Testing sine_weighted_moving_average...
================================================================================

=== Sine Weighted Moving Average Test Results ===

Indicator Description:
Name:
    Sine Weighted Moving Average (SINWMA)

Description:
    A weighted moving average where the weights are based on a sine function.
    This gives more weight to the middle values in the calculation window,
    creating a more responsive indicator that reduces lag compared to a simple
    moving average while still smoothing price action effectively.
    
    The weights follow a sine wave pattern, with the highest weights in the middle
    of the window and lower weights at the beginning and end. This creates a
    bell-shaped weighting scheme that can help filter out noise while maintaining
    sensitivity to significant price changes.

More info:
    https://www.tradingview.com/script/6MWFvnPO-Sine-Weighted-Moving-Average/
    Created by Everget on TradingView

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The period for the SINWMA calculation. Default is 14.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.sine_weighted_moving_average(df)
    df['sinwma'] = result['sinwma']

Returns:
    pd.DataFrame: DataFrame with 'sinwma' column.

Last 32 rows of data with sine_weighted_moving_average values:
           date       open       high        low      close         volume         sinwma
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   95513.250229
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   95802.872073
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   95963.365159
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   96001.201594
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   96014.906574
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   96011.181575
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   96139.348847
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   96408.361221
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   96807.729003
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   97241.209516
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   97568.063235
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   97850.207678
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   98136.001136
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   98439.194080
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   98786.127045
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   99205.166939
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   99729.830538
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  100309.446341
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  100789.301732
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  101148.325953
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  101342.461106
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  101413.084483
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  101313.086316
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  101068.095019
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  100687.703196
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  100190.339710
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   99617.277777
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   98936.456516
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   98230.534212
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   97496.141108
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   96811.216542
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   96257.673559

Testing indicator 99/201: bamboo_ta.trend.ssl_channels

================================================================================
Testing ssl_channels...
================================================================================

=== Ssl Channels Test Results ===

Indicator Description:
Name:
    SSL Channels

Description:
    SSL Channels is an indicator based on the concept of using different moving averages
    to identify trends. This function calculates the SSL Down and SSL Up series.

More info:
    https://www.tradingview.com/script/xl7XbPTM-SSL-Channel-Chart/

Parameters:
    - df (pandas.DataFrame): Input DataFrame containing the data.
    - length (int): Period for the SMA calculation. Default is 10.
    - mode (str): Type of moving average to use. Currently only 'sma' is supported.

Call with:
    ssl_result = bta.ssl_channels(df, length=10, mode='sma')
    df['ssl_down'] = ssl_result['ssl_down']
    df['ssl_up'] = ssl_result['ssl_up']

Returns:
    pd.DataFrame: DataFrame with 'ssl_down' and 'ssl_up' columns.

Last 32 rows of data with ssl_channels values:
           date       open       high        low      close         volume    ssl_down      ssl_up
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   97975.018   94531.331
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   97859.818   94696.719
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   97714.017   94424.008
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   97453.684   94068.225
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   93953.531   97497.284
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   93743.512   98018.904
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   94262.574   98711.466
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   94967.760   99034.563
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   95369.530   99513.263
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   95248.036   99772.857
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   95064.489   99853.462
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   95060.925  100258.662
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   95552.589  100699.662
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   96115.272  101258.636
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   96717.430  101623.636
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   97791.144  101739.836
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   98526.272  102329.244
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   99174.021  103120.626
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   99308.251  103638.024
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  103796.442   99463.246
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  103792.742   99260.846
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  103558.003   99334.861
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  103048.811   98828.732
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  102513.177   98160.232
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  102196.976   97456.193
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  101628.891   97095.681
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  100845.954   96282.295
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   99765.112   95100.147
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   98686.013   94513.713
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   97940.002   94244.665
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   97619.152   94174.456
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   97290.091   93737.990

Testing indicator 100/201: bamboo_ta.trend.ssl_channels_atr

================================================================================
Testing ssl_channels_atr...
================================================================================

=== Ssl Channels Atr Test Results ===

Indicator Description:
Name:
    SSL Channels with ATR

Description:
    The ssl_channels_atr function calculates the SSL (Safe and Secure Levels) channels using
    the Average True Range (ATR) to adjust the Simple Moving Averages (SMA) of the high
    and low prices over a specified period. It determines the trend direction based on
    the comparison of a chosen price column with these adjusted SMAs and generates the
    SSL ATR Down and Up levels accordingly.

    This indicator helps identify potential trend reversals and continuations by providing
    dynamic support and resistance levels.

More info:
    https://www.tradingview.com/script/xl7XbPTM-SSL-Channel-Chart/

Parameters:
    - df (pandas.DataFrame): Input DataFrame containing the data.
    - length (int): Period for the SMA calculation. Default is 21.
    - atr_period (int): Period for the ATR calculation. Default is 14.
    - column (str): The column to use for the moving average calculations. Default is 'close'.

Call with:
    ssl_result = bta.ssl_channels_atr(df, column='close', length=14, atr_period=7)
    df['ssl_atr_down'] = ssl_result['ssl_atr_down']
    df['ssl_atr_up'] = ssl_result['ssl_atr_up']

Returns:
    pd.DataFrame: DataFrame with 'ssl_atr_down' and 'ssl_atr_up' columns.

Last 32 rows of data with ssl_channels_atr values:
           date       open       high        low      close         volume  ssl_atr_down     ssl_atr_up
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  86956.252857   97765.769048
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  87912.475952   98501.825952
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  88550.673095   98948.316905
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  89014.383095   99192.782619
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  89340.075476   99543.004524
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  88905.398810  100745.766429
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  89083.079048  101470.816190
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  89514.237857  101870.483571
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  89997.075714  102332.250952
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  90167.635000  102799.552619
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  90365.385238  102995.327619
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  90505.275952  103389.449762
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  90663.137857  103651.761190
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  90802.661667  103721.291667
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  90920.301429  103947.202381
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  91048.694762  104399.207619
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  91507.990238  104875.820714
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  92178.187857  105534.671667
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  92418.123333  106129.242381
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  92932.020238  105962.779286
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  92776.913810  105950.293333
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  92681.000476  106159.684762
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  92576.230238  106177.243095
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  92704.584524  105883.837381
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  92568.040952  106171.491429
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  93019.618810  105891.977381
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  93133.658810  105805.310714
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  92918.745714  105694.694286
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  92726.129048  105439.047619
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  92577.338095  105032.639524
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  92521.596667  104668.808095
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  92331.122857  104657.243333

Testing indicator 101/201: bamboo_ta.trend.t3_average

================================================================================
Testing t3_average...
================================================================================

=== T3 Average Test Results ===

Indicator Description:
Name:
    T3 Average

Description:
    The T3 average is a smoothed moving average designed to reduce lag while maintaining
    responsiveness to price changes. This implementation uses multiple exponential moving
    averages (EMA) to achieve its smoothing effect.

More info:
    Tim Tillson's T3 indicator: 
    https://www.investopedia.com/terms/t/t3-oscillator.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame containing the data.
    - length (int): Period for the EMA calculation. Default is 5.

Call with:
    df['t3_average'] = bta.t3_average(df, length=5)['t3_average']

Returns:
    pd.DataFrame: DataFrame with 't3_average' column.

Last 32 rows of data with t3_average values:
           date       open       high        low      close         volume     t3_average
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   96059.161141
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   96324.708902
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   96463.711382
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   96465.434566
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   96700.439558
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   96926.220830
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   97401.463412
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   98033.507981
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   98822.406327
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   99171.568297
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   99024.943802
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   99112.093245
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   99332.504060
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   99752.525089
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  100256.647973
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  101088.899548
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  102259.095518
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  103515.119936
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  103945.038404
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  103336.791826
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  102164.568936
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  100800.957194
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   99285.543187
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   97808.543528
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   96988.988392
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   96859.469627
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   96743.600712
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   96353.090056
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   95908.805607
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   95344.401175
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   94649.967093
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   94046.039077

Testing indicator 102/201: bamboo_ta.trend.trend_signals

================================================================================
Testing trend_signals...
================================================================================
Error during testing: trend_signals() missing 1 required positional argument: 'trend_column'

Testing indicator 103/201: bamboo_ta.trend.triangular_moving_average

================================================================================
Testing triangular_moving_average...
================================================================================

=== Triangular Moving Average Test Results ===

Indicator Description:
Name:
    Triangular Moving Average (TRIMA)

Description:
    A Triangular Moving Average (TRIMA) is a weighted moving average where the weights
    form a triangular pattern, with the greatest weight given to the middle of the period.
    This is accomplished by calculating a Simple Moving Average (SMA) of another SMA.
    
    The TRIMA provides a smoother representation of price action compared to a standard
    Simple Moving Average, making it useful for identifying the underlying trend while
    filtering out short-term price fluctuations and noise.

More info:
    https://www.tradingtechnologies.com/help/x-study/technical-indicator-definitions/triangular-moving-average-trima/
    https://www.investopedia.com/terms/t/triangularMovingAverage.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The period for the TRIMA calculation. Default is 10.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.triangular_moving_average(df)
    df['trima'] = result['trima']

Returns:
    pd.DataFrame: DataFrame with 'trima' column.

Last 32 rows of data with triangular_moving_average values:
           date       open       high        low      close         volume          trima
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   95760.689722
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   95606.447778
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   95624.340833
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   95710.028056
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   95967.697500
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   96216.978889
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   96600.285278
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   96941.137222
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   97320.697778
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   97740.263889
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   98022.672778
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   98435.463333
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   98762.992778
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   99061.229167
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   99221.727778
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   99542.246944
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  100181.098889
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  100842.988889
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  101503.108611
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  102008.932500
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  102405.729444
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  102403.650833
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  101836.626389
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  100817.907222
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   99750.850556
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   98848.519722
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   97990.653333
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   97248.871389
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   96812.259444
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   96656.453056
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   96380.338333
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   95886.964167

Testing indicator 104/201: bamboo_ta.trend.triple_exponential_moving_average

================================================================================
Testing triple_exponential_moving_average...
================================================================================

=== Triple Exponential Moving Average Test Results ===

Indicator Description:
Name:
    Triple Exponential Moving Average (TEMA)

Description:
    Triple Exponential Moving Average (TEMA) is a technical indicator designed to smooth 
    price data while reducing lag. It's more responsive than traditional moving averages,
    making it useful for identifying trend changes earlier.
    
    TEMA uses multiple EMAs and a specific calculation to reduce the lag typically 
    associated with moving averages. It achieves this by applying a formula that gives 
    more weight to recent price movements while maintaining a reasonable smoothing effect.

More info:
    https://www.investopedia.com/terms/t/triple-exponential-moving-average.asp
    https://www.tradingtechnologies.com/help/x-study/technical-indicator-definitions/triple-exponential-moving-average-tema/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The period for the EMA calculations. Default is 10.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.triple_exponential_moving_average(df)
    df['tema'] = result['tema']

Returns:
    pd.DataFrame: DataFrame with 'tema' column.

Last 32 rows of data with triple_exponential_moving_average values:
           date       open       high        low      close         volume           tema
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   96335.245970
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   96692.959936
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   96294.640787
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   96009.275066
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   97044.581046
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   96980.135356
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   98182.450334
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   99003.749044
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  100094.327032
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   99043.257994
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   97990.668599
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   99319.928265
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   99687.050438
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  100548.563666
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  101090.634349
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  102790.803149
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  104596.931107
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  105764.152795
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  103772.554025
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  101127.890997
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   99490.657629
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   98180.078486
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   96392.374371
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   95122.920487
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   96068.412121
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   97125.713054
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   96240.813721
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   95019.874929
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   94714.685448
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   93869.293657
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   92943.257023
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   92752.898302

Testing indicator 105/201: bamboo_ta.trend.ttm_trend

================================================================================
Testing ttm_trend...
================================================================================

=== Ttm Trend Test Results ===

Indicator Description:
Name:
    TTM Trend

Description:
    The TTM Trend indicator is from John Carter's book "Mastering the Trade" and is designed
    to identify the current trend direction. It compares the current closing price to the
    average price of the previous 'length' bars.
    
    The indicator returns:
    - 1 (bullish/uptrend) when the close is above the average price
    - -1 (bearish/downtrend) when the close is below the average price
    
    In traditional implementations, this indicator is used to color price bars green (bullish)
    or red (bearish). A common trading strategy is to consider a change in trend after two
    consecutive bars of the opposite color.
    
    This indicator can help traders stay in a trade until the trend changes, providing a
    simple yet effective way to identify potential entry and exit points.

More info:
    https://www.prorealcode.com/prorealtime-indicators/ttm-trend-price/
    John Carter's book "Mastering the Trade"

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', and 'close' columns.
    - length (int): The number of bars to include in the average price calculation. Default is 6.

Call with:
    result = bta.ttm_trend(df, length=6)
    df['ttm_trend'] = result['ttm_trend']  # 1 for bullish, -1 for bearish

Returns:
    pd.DataFrame: DataFrame with 'ttm_trend' column containing the indicator values (1 or -1).

Last 32 rows of data with ttm_trend values:
           date       open       high        low      close         volume  ttm_trend
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060          1
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520          1
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810         -1
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830         -1
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280          1
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662          1
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100          1
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900          1
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880          1
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950         -1
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330         -1
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910          1
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450          1
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230          1
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260          1
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775          1
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740          1
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466          1
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550         -1
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000         -1
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700         -1
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430         -1
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360         -1
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030         -1
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880          1
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100          1
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270         -1
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290         -1
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900         -1
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780         -1
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500         -1
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890         -1

Testing indicator 106/201: bamboo_ta.trend.ut_bot

================================================================================
Testing ut_bot...
================================================================================

=== Ut Bot Test Results ===

Indicator Description:
Name:
    UT Bot Indicator

Description:
    A trend-following indicator that uses ATR to create a trailing stop that helps identify trend changes
    and potential entry/exit points. Originally created by HPotter.

More info:
    https://www.tradingview.com/script/jKqk8tWu-UT-BOT-1-3/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain OHLC data
    - column (str): The column name to use for calculations. Default is 'close'
    - key_value (float): Sensitivity multiplier for the ATR. Default is 3.0
    - atr_period (int): Period for ATR calculation. Default is 10

Call with:
    result = bta.ut_bot(df, 'close', 3.0, 10)
    df['ut_bot_stop'] = result['ut_bot_stop']
    df['ut_bot_position'] = result['ut_bot_position']
    df['ut_bot_buy'] = result['ut_bot_buy']
    df['ut_bot_sell'] = result['ut_bot_sell']

Returns:
    pd.DataFrame: DataFrame with 'ut_bot_stop', 'ut_bot_position', 'ut_bot_buy', and 'ut_bot_sell' columns

Last 32 rows of data with ut_bot values:
           date       open       high        low      close         volume  ut_bot_stop  ut_bot_position  ut_bot_buy  ut_bot_sell
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060    88497.542                1       False        False
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520    88497.542                1       False        False
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810    88497.542                1       False        False
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830    88497.542                1       False        False
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280    88497.542                1       False        False
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662    88497.542                1       False        False
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100    88497.542                1       False        False
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900    88497.542                1       False        False
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880    88678.391                1       False        False
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950    88678.391                1       False        False
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330    88678.391                1       False        False
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910    88678.391                1       False        False
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450    88678.391                1       False        False
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230    88678.391                1       False        False
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260    88678.391                1       False        False
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775    92617.914                1       False        False
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740    94649.744                1       False        False
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466    94649.744                1       False        False
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550    94649.744                1       False        False
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000    94649.744                1       False        False
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700    94649.744                1       False        False
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430    94649.744                1       False        False
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360    94649.744                1       False        False
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030    94649.744                1       False        False
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880    94649.744                1       False        False
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100    94649.744                1       False        False
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270    94649.744                1       False        False
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   108293.925               -1       False         True
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   107816.900               -1       False        False
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   104824.211               -1       False        False
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   103126.138               -1       False        False
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   103126.138               -1       False        False

Testing indicator 107/201: bamboo_ta.trend.variable_index_dynamic_average

================================================================================
Testing variable_index_dynamic_average...
================================================================================

=== Variable Index Dynamic Average Test Results ===

Indicator Description:
Name:
    Variable Index Dynamic Average (VIDYA)

Description:
    The Variable Index Dynamic Average (VIDYA) was developed by Tushar Chande in 1992.
    It is an adaptive moving average that adjusts its sensitivity based on market volatility.
    
    VIDYA uses the Chande Momentum Oscillator (CMO) to determine volatility. When volatility 
    is high, VIDYA reacts faster to price changes, making it more responsive than traditional
    moving averages. When volatility is low, it behaves more like a standard exponential 
    moving average.
    
    This indicator can be particularly useful for traders who want a moving average that 
    automatically adjusts to changing market conditions, potentially reducing lag during 
    volatile periods.

More info:
    https://www.tradingview.com/script/hdrf0fXV-Variable-Index-Dynamic-Average-VIDYA/
    https://www.perfecttrendsystem.com/blog_mt4_2/en/vidya-indicator-for-mt4

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The period for the VIDYA calculation. Default is 14.
    - column (str): The column name to use for calculations. Default is 'close'.
    - drift (int): The period for momentum calculation in CMO. Default is 1.

Call with:
    result = bta.variable_index_dynamic_average(df)
    df['vidya'] = result['vidya']

Returns:
    pd.DataFrame: DataFrame with 'vidya' column.

Last 32 rows of data with variable_index_dynamic_average values:
           date       open       high        low      close         volume         vidya
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  88430.120635
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  88783.946675
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  88986.970788
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  89127.278447
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  89354.814560
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  89419.520919
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  89468.867173
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  89601.230358
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  89809.964300
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  89998.426494
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  90181.921602
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  90518.508791
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  90751.088306
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  90993.052191
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  91305.972866
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  91826.464734
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  92608.808663
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  93355.089568
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  93407.735990
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  93417.311092
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  93459.735572
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  93507.602663
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  93555.050121
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  93572.399909
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  93623.488496
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  93678.760066
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  93723.946916
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  93744.692029
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  93791.124500
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  93788.196620
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  93718.279309
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  93709.085239

Testing indicator 108/201: bamboo_ta.trend.vertical_horizontal_filter

================================================================================
Testing vertical_horizontal_filter...
================================================================================

=== Vertical Horizontal Filter Test Results ===

Indicator Description:
Name:
    Vertical Horizontal Filter (VHF)

Description:
    The Vertical Horizontal Filter (VHF) was created by Adam White to identify
    trending and ranging markets. It measures the ratio of the largest price
    movement (vertical movement) to the sum of price changes (horizontal movement)
    over a specified period.
    
    Higher VHF values indicate a strong trend (either up or down), while
    lower values suggest a ranging or sideways market. Traders often use this
    indicator to select appropriate trading strategies based on market conditions:
    trend-following strategies for high VHF values, and range-trading strategies
    for low VHF values.
    
    VHF is particularly useful as a precursor to applying other technical indicators,
    as it helps determine whether trend-following or oscillator-based indicators
    would be more appropriate for the current market conditions.

More info:
    https://www.incrediblecharts.com/indicators/vertical_horizontal_filter.php

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - length (int): The period for calculating VHF. Default is 28.
    - drift (int): The period difference to calculate price changes. Default is 1.
    - column (str): Name of the column to use for calculations. Default is 'close'.

Call with:
    result = bta.vertical_horizontal_filter(df, length=28)
    df['vhf'] = result['vhf']

Returns:
    pd.DataFrame: DataFrame with 'vhf' column containing the indicator values.

Last 32 rows of data with vertical_horizontal_filter values:
           date       open       high        low      close         volume       vhf
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  0.546733
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  0.545020
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  0.514516
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  0.417462
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.439590
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  0.416376
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.412597
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.348646
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  0.258095
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  0.281526
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  0.281598
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  0.270269
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  0.229375
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  0.246960
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  0.249306
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  0.287385
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  0.283563
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  0.295611
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  0.273083
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  0.280037
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  0.281323
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  0.285324
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  0.274926
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  0.301775
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  0.226459
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  0.241693
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  0.225158
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  0.238356
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  0.238601
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  0.246016
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  0.266905
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  0.262831

Testing indicator 109/201: bamboo_ta.trend.volume_weighted_moving_average

================================================================================
Testing volume_weighted_moving_average...
================================================================================

=== Volume Weighted Moving Average Test Results ===

Indicator Description:
Name:
    Volume Weighted Moving Average (VWMA)

Description:
    The Volume Weighted Moving Average (VWMA) is a technical analysis indicator that
    combines price and volume data to provide a more accurate representation of a
    security's average price over time. Unlike a simple moving average that gives
    equal weight to each price point, the VWMA gives more weight to price points
    with higher trading volumes.
    
    This weighting method can provide a more accurate representation of a security's
    true average price, as it accounts for the significance of price movements based
    on their trading volume. High-volume price movements are considered more significant
    and thus have a greater impact on the VWMA.

More info:
    https://www.investopedia.com/articles/trading/11/trading-with-vwap-mvwap.asp
    https://www.motivewave.com/studies/volume_weighted_moving_average.htm

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'close' and 'volume' columns.
    - length (int): The period for the VWMA calculation. Default is 10.

Call with:
    result = bta.volume_weighted_moving_average(df)
    df['vwma'] = result['vwma']

Returns:
    pd.DataFrame: DataFrame with 'vwma' column.

Last 32 rows of data with volume_weighted_moving_average values:
           date       open       high        low      close         volume           vwma
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   96101.117332
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   95703.879013
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   95275.626855
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   95162.525382
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   95344.731196
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   96055.629728
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   97058.035404
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   97299.303519
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   97585.431300
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   97551.387401
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   97473.757318
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   97794.106846
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   98111.753460
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   98474.949206
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   98568.699340
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   99581.442148
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  100444.034366
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  100996.370740
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  100878.306468
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  100895.049828
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  100972.425014
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  100708.834796
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  100454.950238
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   99873.091860
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   99732.671675
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   99421.869524
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   98365.743150
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   97354.465562
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   96796.705329
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   96479.237426
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   95601.643311
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   95218.330947

Testing indicator 110/201: bamboo_ta.trend.vortex_indicator

================================================================================
Testing vortex_indicator...
================================================================================

=== Vortex Indicator Test Results ===

Indicator Description:
Name:
    Vortex Indicator

Description:
    The Vortex Indicator is a technical analysis indicator composed of two oscillating 
    lines - VI+ (positive) and VI- (negative). These lines capture positive and negative 
    trend movement and are designed to identify the start of a new trend or the continuation 
    of an existing trend.
    
    The indicator works by comparing the current price to the previous price, in relation 
    to the true range. When VI+ crosses above VI-, it may indicate the start of a new 
    uptrend. Conversely, when VI- crosses above VI+, it may signal the beginning of a 
    new downtrend.
    
    The Vortex Indicator is particularly useful for trend identification and confirmation,
    and is often used in conjunction with other technical indicators.

More info:
    https://school.stockcharts.com/doku.php?id=technical_indicators:vortex_indicator

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', and 'close' columns.
    - length (int): The period for calculating the indicator. Default is 14.
    - drift (int): The difference period for VM calculations. Default is 1.

Call with:
    result = bta.vortex_indicator(df, length=14)
    df['vi_plus'] = result['vi_plus']  # Positive Vortex Indicator line
    df['vi_minus'] = result['vi_minus']  # Negative Vortex Indicator line

Returns:
    pd.DataFrame: DataFrame with 'vi_plus' and 'vi_minus' columns containing the indicator values.

Last 32 rows of data with vortex_indicator values:
           date       open       high        low      close         volume   vi_plus  vi_minus
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  1.127709  0.879729
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  1.149366  0.863186
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  1.106328  0.882698
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  1.069462  0.948246
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  1.065071  0.912166
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  0.936891  0.909080
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.980848  0.961189
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  1.028770  0.974223
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  1.049348  0.952947
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  1.025820  0.960948
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  1.057896  0.944925
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  1.063723  0.922865
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  1.075380  0.903574
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  1.062531  0.946666
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  1.072769  0.916460
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  1.086682  0.884065
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  1.138200  0.850589
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  1.180726  0.814593
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  1.080669  0.887840
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  1.085803  1.021251
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  0.938221  1.060408
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  0.960703  1.014439
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  0.929750  1.062210
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  0.972692  1.078353
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  0.988838  0.980226
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  1.034444  1.040466
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  0.930108  1.043785
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  0.905224  1.072277
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  0.891657  1.115744
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  0.858316  1.170656
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  0.793315  1.223602
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  0.772036  1.207639

Testing indicator 111/201: bamboo_ta.trend.weighted_moving_average

================================================================================
Testing weighted_moving_average...
================================================================================

=== Weighted Moving Average Test Results ===

Indicator Description:
Name:
    Weighted Moving Average (WMA)

Description:
    The Weighted Moving Average (WMA) gives more weight to recent data points and
    less weight to older data points.

More info:
    https://www.investopedia.com/articles/technical/060401.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame.
    - column (str): The column to calculate the WMA on.
    - period (int): The period for the WMA calculation.

Call with:
    df['wma'] = bta.weighted_moving_average(df, 'close', 10)['wma']

Returns:
    pd.DataFrame: DataFrame with 'wma' column.

Last 32 rows of data with weighted_moving_average values:
           date       open       high        low      close         volume            wma
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   95908.600000
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   96067.145273
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   96001.805818
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   95993.595091
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   96516.275455
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   96727.970727
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   97376.329273
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   97899.884545
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   98583.569273
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   98470.948364
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   98237.397091
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   98824.482000
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   99136.168364
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   99630.326182
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  100022.355636
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  100916.334545
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  101963.556000
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  102909.558909
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  102662.851818
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  101934.037091
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  101264.320727
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  100479.205455
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   99380.923091
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   98314.822909
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   98055.338727
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   97985.247636
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   97345.236364
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   96620.522545
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   96292.979818
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   95770.637273
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   95143.970364
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   94750.992364

Testing indicator 112/201: bamboo_ta.trend.zero_exponential_moving_average

================================================================================
Testing zero_exponential_moving_average...
================================================================================

=== Zero Exponential Moving Average Test Results ===

Indicator Description:
Name:
    Zero Exponential Moving Average (ZEMA)

Description:
    The Zero Exponential Moving Average (ZEMA) is an improved version of the Exponential
    Moving Average (EMA) that reduces lag by incorporating a zero-lag component.

More info:
    The ZEMA applies the formula: 2 * EMA(period) - EMA(EMA(period)) to reduce lag.

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain at least the column specified.
    - column (str): The column on which ZEMA is to be calculated. Default is 'close'.
    - period (int): The period over which ZEMA is to be calculated. Default is 21.

Call with:
    df['zema'] = bta.zero_exponential_moving_average(df, 'close', 21)['zema']

Returns:
    pd.DataFrame: DataFrame with 'zema' column.

Last 32 rows of data with zero_exponential_moving_average values:
           date       open       high        low      close         volume           zema
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   98874.819048
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   99214.596352
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   99245.278617
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   99244.072318
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   99690.148498
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   99764.770809
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  100288.262546
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  100732.195613
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  101313.374962
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  101126.752068
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  100822.078998
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  101321.877462
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  101538.803568
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  101951.838750
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  102288.092299
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  103087.109263
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  104035.593950
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  104849.215560
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  104503.119323
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  103705.649216
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  103054.611035
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  102384.070215
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  101422.365404
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  100523.130887
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  100389.735825
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  100398.171841
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   99765.750599
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   98951.203121
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   98413.297742
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   97671.961911
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   96862.569389
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   96296.066732

Testing indicator 113/201: bamboo_ta.trend.zero_lag_exponential_moving_average

================================================================================
Testing zero_lag_exponential_moving_average...
================================================================================

=== Zero Lag Exponential Moving Average Test Results ===

Indicator Description:
Name:
    Zero Lag Exponential Moving Average (ZLEMA)

Description:
    ZLEMA is an Exponential Moving Average (EMA) that adjusts for lag, making it more responsive
    to recent price changes. It uses lagged data differences to adjust the EMA calculation,
    thereby reducing the inherent lag of EMA.

More info:
    Created by John Ehlers, the ZLEMA removes lag by subtracting older data from current data.
    https://en.wikipedia.org/wiki/Zero_lag_exponential_moving_average

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain at least the column specified.
    - column (str): The column on which ZLEMA is to be calculated. Default is 'close'.
    - period (int): The period over which ZLEMA is to be calculated. Default is 21.

Call with:
    df['zlema'] = bta.zero_lag_exponential_moving_average(df, 'close', 21)['zlema']

Returns:
    pd.DataFrame: DataFrame with 'zlema' column.

Last 32 rows of data with zero_lag_exponential_moving_average values:
           date       open       high        low      close         volume          zlema
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   99073.941390
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   98799.332173
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   98252.960157
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   97868.780143
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   97996.581948
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   98258.824498
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   99100.433180
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   99527.745618
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  100168.423290
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   99888.833900
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   99606.031727
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  100102.285206
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  100471.892006
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  101065.248187
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  101355.014715
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  102321.136105
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  103235.258277
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  104071.642979
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  103637.714527
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  103093.126842
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  102722.649857
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  101880.498052
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  100833.930047
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   99697.999134
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   99353.377394
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   98902.634904
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   97686.444458
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   96302.614962
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   95765.649056
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   95242.820960
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   94564.260873
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   94136.601703

Testing indicator 114/201: bamboo_ta.utility.calculate_atr_stop_loss_take_profit

================================================================================
Testing calculate_atr_stop_loss_take_profit...
================================================================================
Error during testing: 'signal'

Testing indicator 115/201: bamboo_ta.utility.calculate_stop_loss_take_profit

================================================================================
Testing calculate_stop_loss_take_profit...
================================================================================
Error during testing: 'trade_signal'

Testing indicator 116/201: bamboo_ta.utility.compounded_annual_growth_rate

================================================================================
Testing compounded_annual_growth_rate...
================================================================================
Test data with approximately 10% annual growth over 3 years:
Start price: 100.00
End price: 133.10
Duration in years: 3.0
Calculated CAGR: 0.1000 (10.00%)
Expected CAGR: 0.1000 (10.00%)

Test data with approximately 10% annual decline over 3 years:
Start price: 100.00
End price: 72.90
Calculated CAGR: -0.1000 (-10.00%)
Expected CAGR: -0.1000 (-10.00%)

Testing indicator 117/201: bamboo_ta.utility.consecutive_count

================================================================================
Testing consecutive_count...
================================================================================
Error: consecutive_count did not return a DataFrame

Testing indicator 118/201: bamboo_ta.utility.consecutive_higher_highs

================================================================================
Testing consecutive_higher_highs...
================================================================================
Test DataFrame:
    high
0     10
1     11
2     12
3     11
4     12
5     13
6     14
7     15
8     14
9     15
10    16

Binary indicator (length=3):
    consec_higher_high_3
0                      0
1                      0
2                      0
3                      0
4                      0
5                      0
6                      1
7                      1
8                      0
9                      0
10                     0
Expected: [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1]
Matches expected: False

Count of consecutive higher highs:
    consec_higher_high
0                    0
1                    1
2                    2
3                    0
4                    1
5                    2
6                    3
7                    4
8                    0
9                    1
10                   2
Expected: [0, 1, 2, 0, 1, 2, 3, 4, 0, 1, 2]
Matches expected: True

Testing indicator 119/201: bamboo_ta.utility.consecutive_lower_lows

================================================================================
Testing consecutive_lower_lows...
================================================================================
Test DataFrame:
    low
0    10
1     9
2     8
3     9
4     8
5     7
6     6
7     5
8     6
9     5
10    4

Binary indicator (length=3):
    consec_lower_low_3
0                    0
1                    0
2                    0
3                    0
4                    0
5                    0
6                    1
7                    1
8                    0
9                    0
10                   0
Expected: [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1]
Matches expected: False

Count of consecutive lower lows:
    consec_lower_low
0                  0
1                  1
2                  2
3                  0
4                  1
5                  2
6                  3
7                  4
8                  0
9                  1
10                 2
Expected: [0, 1, 2, 0, 1, 2, 3, 4, 0, 1, 2]
Matches expected: True

Testing indicator 120/201: bamboo_ta.utility.cross

================================================================================
Testing cross...
================================================================================
Test DataFrame:
   fast  slow
0     5    15
1    10    15
2    15    15
3    20    15
4    25    15
5    20    15
6    15    15
7    10    15
8     5    15

Fast Crosses Above Slow:
   fast_xa_slow
0             0
1             0
2             0
3             0
4             0
5             0
6             0
7             0
8             0
Expected: [0, 0, 1, 0, 0, 0, 0, 0, 0]
Matches expected: False

Fast Crosses Below Slow:
   fast_xb_slow
0             1
1             0
2             0
3             0
4             0
5             0
6             1
7             1
8             0
Expected: [0, 0, 0, 0, 0, 0, 1, 0, 0]
Matches expected: False

Exact Value Cross Test (Price vs 100 level):
   price  level
0     95    100
1    100    100
2    105    100
3    110    100
4    105    100
5    100    100
6     95    100

Price Crosses Above 100:
   price_xa_level
0               0
1               0
2               0
3               0
4               0
5               0
6               0
Expected: [0, 1, 0, 0, 0, 0, 0]
Matches expected: False

Price Crosses Below 100:
   price_xb_level
0               1
1               0
2               0
3               0
4               0
5               1
6               1
Expected: [0, 0, 0, 0, 0, 1, 0]
Matches expected: False

Testing indicator 121/201: bamboo_ta.utility.cross_value

================================================================================
Testing cross_value...
================================================================================
Test DataFrame:
   price
0     95
1     98
2    100
3    102
4    105
5    103
6    100
7     98
8     95
Testing crosses with level: 100

Price Crosses Above Level:
   price_xav_100
0              0
1              0
2              0
3              0
4              0
5              0
6              0
7              0
8              0
Expected: [0, 0, 1, 0, 0, 0, 0, 0, 0]
Matches expected: False

Price Crosses Below Level:
   price_xbv_100
0              0
1              0
2              0
3              0
4              0
5              0
6              0
7              0
8              0
Expected: [0, 0, 0, 0, 0, 0, 1, 0, 0]
Matches expected: False

Price Crosses Above Level (Boolean):
   price_xav_100
0          False
1          False
2          False
3          False
4          False
5          False
6          False
7          False
8          False

Price Crosses Above 103:
   price_xav_103
0              0
1              0
2              0
3              0
4              1
5              0
6              0
7              0
8              0
Expected: [0, 0, 0, 0, 1, 0, 0, 0, 0]
Matches expected: True

Testing indicator 122/201: bamboo_ta.utility.cumulative_return

================================================================================
Testing cumulative_return...
================================================================================
Error: cumulative_return did not return a DataFrame

Testing indicator 123/201: bamboo_ta.utility.daily_log_return

================================================================================
Testing daily_log_return...
================================================================================
Error: daily_log_return did not return a DataFrame

Testing indicator 124/201: bamboo_ta.utility.daily_return

================================================================================
Testing daily_return...
================================================================================
Error: daily_return did not return a DataFrame

Testing indicator 125/201: bamboo_ta.utility.drawdown

================================================================================
Testing drawdown...
================================================================================

=== Drawdown Test Results ===

Indicator Description:
Name:
    Drawdown

Description:
    Drawdown is a peak-to-trough decline during a specific period for an investment,
    trading account, or fund. It measures the magnitude of a decline from a peak to
    a trough in the value of an asset or portfolio.
    
    The drawdown is typically quoted as the percentage between the peak and the
    subsequent trough, but this implementation also provides:
    - Absolute drawdown: The absolute difference between the peak and current price
    - Percentage drawdown: The percentage decline from peak (1 - price/max_price)
    - Logarithmic drawdown: The log difference between peak and current price
    
    Drawdown analysis is important for risk management as it helps assess the
    potential losses and volatility of an investment. Many traders use maximum
    drawdown as a risk metric when evaluating trading strategies.

More info:
    https://www.investopedia.com/terms/d/drawdown.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which must contain the specified column.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.drawdown(df)
    df['drawdown'] = result['drawdown']  # Absolute drawdown
    df['drawdown_pct'] = result['drawdown_pct']  # Percentage drawdown
    df['drawdown_log'] = result['drawdown_log']  # Logarithmic drawdown

Returns:
    pd.DataFrame: DataFrame with 'drawdown', 'drawdown_pct', and 'drawdown_log' columns.

Last 32 rows of data with drawdown values:
           date       open       high        low      close         volume  drawdown  drawdown_pct  drawdown_log
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   2484.01      0.025118      0.025439
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   1706.82      0.017259      0.017410
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   3051.38      0.030856      0.031342
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   3042.31      0.030764      0.031247
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280    304.68      0.003081      0.003086
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   1946.37      0.019682      0.019878
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100      0.00      0.000000      0.000000
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900      0.00      0.000000      0.000000
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880      0.00      0.000000      0.000000
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   3833.12      0.037911      0.038648
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   4516.59      0.044670      0.045699
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910      0.00      0.000000      0.000000
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   1120.71      0.011082      0.011144
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230      0.00      0.000000      0.000000
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260      4.25      0.000042      0.000042
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775      0.00      0.000000      0.000000
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740      0.00      0.000000      0.000000
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466      0.00      0.000000      0.000000
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   5929.73      0.055870      0.057492
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   8671.88      0.081707      0.085239
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   8328.30      0.078470      0.081720
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   8841.75      0.083308      0.086983
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  10947.47      0.103148      0.108864
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  11252.27      0.106020      0.112072
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   7470.16      0.070384      0.072984
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   6704.14      0.063167      0.065250
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  10342.14      0.097444      0.102525
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  11834.71      0.111508      0.118229
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  10833.74      0.102076      0.107670
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  12395.54      0.116792      0.124194
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  13341.69      0.125706      0.134339
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  12557.74      0.118320      0.125926

Testing indicator 126/201: bamboo_ta.utility.drop_na

================================================================================
Testing drop_na...
================================================================================

=== Drop Na Test Results ===

Indicator Description:
Name:
    Drop NA

Description:
    This utility function cleans a DataFrame by removing rows with NaN values and
    handling problematic values in numeric columns. It addresses three common issues
    in financial data:
    
    1. NaN (Not a Number) values which can cause calculation errors
    2. Extremely large values that might cause overflow issues in calculations
    3. Zero values which can cause division by zero errors in certain calculations
    
    The function is particularly useful as a pre-processing step before applying
    technical indicators or conducting analysis.

More info:
    Data cleaning is a critical step in any data analysis workflow. In financial
    time series data, missing values, zeros, and extremely large values can lead
    to errors or misleading results in technical indicators.
    
    This function uses a threshold of e^709 (approximately 8.22e+307) to identify
    extremely large values, which is close to the largest finite floating-point
    number in Python.

Parameters:
    - df (pd.DataFrame): Input DataFrame containing financial data to be cleaned.

Call with:
    # Clean a dataframe before analysis
    clean_df = bta.drop_na(df)
    
    # Alternative: preserve original and use cleaned for calculations
    calc_df = bta.drop_na(df.copy())
    results = my_calculation_function(calc_df)

Returns:
    pd.DataFrame: A cleaned DataFrame with:
    - All rows containing NaN values removed
    - Extremely large values (>e^709) replaced with NaN and then removed
    - Zero values replaced with NaN and then removed

Last 32 rows of data with drop_na values:
           date       open       high        low      close         volume
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890

Testing indicator 127/201: bamboo_ta.utility.entropy

================================================================================
Testing entropy...
================================================================================

=== Entropy Test Results ===

Indicator Description:
Name:
    Entropy

Description:
    Entropy, introduced by Claude Shannon in 1948, is a measure of randomness or
    unpredictability in a system. In financial markets, entropy can be used to
    quantify the uncertainty or disorder in price movements.
    
    Higher entropy values indicate more randomness and unpredictability in the price
    series, while lower values suggest more order and predictability. This can help
    traders identify periods of high volatility or uncertainty in the market.
    
    The calculation treats normalized prices as a probability distribution and applies
    the information entropy formula to this distribution over the specified period.

More info:
    https://en.wikipedia.org/wiki/Entropy_(information_theory)
    https://www.investopedia.com/terms/e/entropy.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which must contain the specified column.
    - length (int): The rolling window period for the entropy calculation. Default is 10.
    - base (float): The logarithmic base to use in the entropy calculation. Default is 2.0.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.entropy(df, length=10, base=2.0)
    df['entropy'] = result['entropy']

Returns:
    pd.DataFrame: DataFrame with 'entropy' column containing the indicator values.

Last 32 rows of data with entropy values:
           date       open       high        low      close         volume   entropy
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  3.362384
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  3.350170
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  3.337094
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  3.328253
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  3.326288
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  3.330433
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  3.340807
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  3.343987
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  3.349965
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  3.346165
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  3.343466
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  3.346910
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  3.349475
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  3.353262
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  3.351328
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  3.357508
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  3.361527
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  3.365098
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  3.356649
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  3.350234
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  3.345609
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  3.332833
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  3.319782
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  3.305747
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  3.300059
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  3.292601
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  3.278422
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  3.264620
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  3.264413
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  3.267053
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  3.268342
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  3.272205

Testing indicator 128/201: bamboo_ta.utility.error_function

================================================================================
Testing error_function...
================================================================================

=== Error Function Test Results ===

Indicator Description:
Name:
    Error Function (erf)

Description:
    Applies the error function (erf) to rolling standardized values of a price series.
    
    The error function, also called the Gauss error function, is a special function
    of sigmoid shape that occurs in probability, statistics, and partial differential
    equations. It is defined as:
    
    erf(x) = (2/√π) ∫(0 to x) e^(-t²) dt
    
    In this implementation, we:
    1. Take a rolling window of the specified length
    2. Standardize the latest value in the window
    3. Apply the error function to this standardized value
    
    This provides a measure of how many standard deviations the current price
    is from the mean, transformed through the erf function to range between -1 and 1.

More info:
    https://en.wikipedia.org/wiki/Error_function

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the column specified.
    - length (int): The window size for the rolling calculation. Default is 30.
    - min_periods (int, optional): Minimum number of observations required to calculate
      a value. If None, defaults to the length parameter value.
    - column (str): The column to calculate on. Default is 'close'.

Call with:
    df['erf_30'] = bta.error_function(df)['erf_30']

Returns:
    pd.DataFrame: DataFrame with error function values in a column named 'erf_{length}'.

Last 32 rows of data with error_function values:
           date       open       high        low      close         volume    erf_30
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  0.824257
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  0.831887
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  0.735774
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  0.708124
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.854725
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  0.744275
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.897362
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.894536
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  0.944529
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  0.641547
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  0.486062
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  0.971258
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  0.909191
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  0.963880
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  0.959906
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  0.997424
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  0.999018
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  0.997953
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  0.556715
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -0.340050
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -0.275679
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -0.426062
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -0.840960
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -0.859205
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  0.095315
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  0.288873
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -0.834508
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -0.957242
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -0.879037
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -0.966961
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -0.983183
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -0.948141

Testing indicator 129/201: bamboo_ta.utility.exhaustion_candles

================================================================================
Testing exhaustion_candles...
================================================================================
Error: exhaustion_candles did not return a DataFrame

Testing indicator 130/201: bamboo_ta.utility.exhaustion_lengths

================================================================================
Testing exhaustion_lengths...
================================================================================
Error: exhaustion_lengths did not return a DataFrame

Testing indicator 131/201: bamboo_ta.utility.filter_by_dates

================================================================================
Testing filter_by_dates...
================================================================================
Original DataFrame shape: (365, 2)

Single date filter ('2023-05-15') results:
Result shape: (1, 2)
               close  volume
2023-05-15  10.64895   75696

Multiple date filter ['2023-03-01', '2023-06-15', '2023-09-30', '2023-12-25'] results:
Result shape: (4, 2)
                close  volume
2023-03-01  87.290289   72702
2023-06-15  77.464972   50730
2023-09-30  69.964869   49301
2023-12-25  75.840346   94516

Invalid date filter ['2022-01-01', '2024-01-01'] results:
Result shape: (365, 2)
Original DataFrame returned (as expected)

Testing indicator 132/201: bamboo_ta.utility.first_crossed_above_second

================================================================================
Testing first_crossed_above_second...
================================================================================
Error during testing: first_crossed_above_second() missing 1 required positional argument: 'series2'

Testing indicator 133/201: bamboo_ta.utility.first_crossed_below_second

================================================================================
Testing first_crossed_below_second...
================================================================================
Error during testing: first_crossed_below_second() missing 1 required positional argument: 'series2'

Testing indicator 134/201: bamboo_ta.utility.geometric_mean

================================================================================
Testing geometric_mean...
================================================================================

=== Geometric Mean Test Results ===

Indicator Description:
Name:
    Geometric Mean

Description:
    Calculates the rolling geometric mean of a price series over a specified window length.
    The geometric mean is defined as the nth root of the product of n numbers.
    It is less affected by extreme values than the arithmetic mean, making it useful
    for analyzing percentage changes or ratios like returns.

More info:
    https://en.wikipedia.org/wiki/Geometric_mean

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the column specified.
    - length (int): The window size for the rolling calculation. Default is 30.
    - min_periods (int, optional): Minimum number of observations required to calculate
      a value. If None, defaults to the length parameter value.
    - column (str): The column to calculate geometric mean on. Default is 'close'.

Call with:
    df['gmean_30'] = bta.geometric_mean(df)['gmean_30']

Returns:
    pd.DataFrame: DataFrame with geometric mean values in a column named 'gmean_{length}'.

Last 32 rows of data with geometric_mean values:
           date       open       high        low      close         volume      gmean_30
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  85875.049949
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  86840.371981
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  87780.883969
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  88757.503591
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  89869.870700
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  90878.032386
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  91722.522005
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  92566.026151
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  93430.240431
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  94174.242572
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  94753.193705
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  95170.023905
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  95578.293860
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  95946.475263
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  96426.209304
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  96869.598688
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  97380.093816
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  97922.028861
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  98256.366686
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  98434.372038
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  98554.671734
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  98520.244357
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  98394.899231
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  98299.860942
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  98325.320374
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  98544.313912
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  98678.310850
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  98624.215980
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  98612.372102
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  98484.468598
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  98359.052673
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  98235.053282

Testing indicator 135/201: bamboo_ta.utility.get_min_max

================================================================================
Testing get_min_max...
================================================================================
Error during testing: get_min_max() missing 1 required positional argument: 'series2'

Testing indicator 136/201: bamboo_ta.utility.indicator_mixin

================================================================================
Testing indicator_mixin...
================================================================================
Error during testing: name '_check_fillna' is not defined

Testing indicator 137/201: bamboo_ta.utility.is_above

================================================================================
Testing is_above...
================================================================================
Test DataFrame:
   series_a  series_b
0        10        15
1        20        15
2        30        25
3        25        25
4        15        10

Is Above (as integers):
   series_a_above_series_b
0                        0
1                        1
2                        1
3                        1
4                        1
Expected: [0, 1, 1, 0, 1]
Matches expected: False

Is Above (as booleans):
   series_a_above_series_b
0                    False
1                     True
2                     True
3                     True
4                     True
Expected: [False, True, True, False, True]
Matches expected: False

Testing indicator 138/201: bamboo_ta.utility.is_above_value

================================================================================
Testing is_above_value...
================================================================================
Test DataFrame:
   price
0     95
1    100
2    105
3    110
4    100
5     95

Is Above Value 100 (as integers):
   price_above_100
0                0
1                1
2                1
3                1
4                1
5                0
Expected: [0, 1, 1, 1, 1, 0]
Matches expected: True

Is Above Value 100 (as booleans):
   price_above_100
0            False
1             True
2             True
3             True
4             True
5            False
Expected: [False, True, True, True, True, False]
Matches expected: True

Is Above Value 102.5 (decimal value):
   price_above_102_5
0                  0
1                  0
2                  1
3                  1
4                  0
5                  0

Testing indicator 139/201: bamboo_ta.utility.is_below

================================================================================
Testing is_below...
================================================================================
Test DataFrame:
   series_a  series_b
0        10        15
1        20        15
2        30        25
3        25        25
4        15        10

Is Below (as integers):
   series_a_below_series_b
0                        1
1                        0
2                        0
3                        1
4                        0
Expected: [1, 0, 0, 0, 0]
Matches expected: False

Is Below (as booleans):
   series_a_below_series_b
0                     True
1                    False
2                    False
3                     True
4                    False
Expected: [True, False, False, False, False]
Matches expected: False

Testing with equal values (should all be 1/True):
   price_below_level
0                  1
1                  1
2                  1
3                  1
4                  1
All values are 1: True

Testing indicator 140/201: bamboo_ta.utility.is_below_value

================================================================================
Testing is_below_value...
================================================================================
Test DataFrame:
   price
0     95
1    100
2    105
3    110
4    100
5     95

Is Below Value 100 (as integers):
   price_below_100
0                1
1                1
2                0
3                0
4                1
5                1
Expected: [1, 1, 0, 0, 1, 1]
Matches expected: True

Is Below Value 100 (as booleans):
   price_below_100
0             True
1             True
2            False
3            False
4             True
5             True
Expected: [True, True, False, False, True, True]
Matches expected: True

Is Below Value 102.5 (decimal value):
   price_below_102_5
0                  1
1                  1
2                  0
3                  0
4                  1
5                  1

Testing indicator 141/201: bamboo_ta.utility.kurtosis

================================================================================
Testing kurtosis...
================================================================================

=== Kurtosis Test Results ===

Indicator Description:
Name:
    Kurtosis

Description:
    Kurtosis is a statistical measure that describes the shape of a distribution's tails
    in relation to its overall shape. It quantifies whether the tails of a distribution
    contain extreme values compared to a normal distribution.
    
    In the context of financial markets:
    - High kurtosis (>3, leptokurtic): Indicates frequent extreme returns, fat tails
    - Normal kurtosis (=3, mesokurtic): Matches a normal distribution
    - Low kurtosis (<3, platykurtic): Indicates fewer extreme returns, thin tails
    
    Traders use kurtosis to:
    - Assess the risk of extreme price movements
    - Evaluate the appropriateness of normal distribution assumptions
    - Develop risk management strategies for handling outlier events

More info:
    https://www.investopedia.com/terms/k/kurtosis.asp
    https://en.wikipedia.org/wiki/Kurtosis

Parameters:
    - df (pandas.DataFrame): Input DataFrame which must contain the specified column.
    - length (int): The rolling window period for the kurtosis calculation. Default is 30.
    - min_periods (int): Minimum number of observations required to calculate kurtosis.
      Default is the same as length.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.kurtosis(df, length=30)
    df['kurtosis'] = result['kurtosis']

Returns:
    pd.DataFrame: DataFrame with 'kurtosis' column containing the indicator values.

Last 32 rows of data with kurtosis values:
           date       open       high        low      close         volume  kurtosis
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060 -1.071288
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520 -0.770661
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810 -0.374235
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  0.079827
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.286750
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  0.229839
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.823855
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  1.468982
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  1.943565
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  1.039922
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -0.989303
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910 -0.779175
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450 -0.650155
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230 -0.393756
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260 -0.720962
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775 -0.249431
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  0.220135
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  0.204525
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  0.248691
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  0.502833
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  0.732652
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  0.719530
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  0.594588
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  0.449180
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  0.429888
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  0.625339
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  0.636983
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  0.538292
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  0.514322
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  0.332506
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  0.186682
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  0.019005

Testing indicator 142/201: bamboo_ta.utility.linear_decay

================================================================================
Testing linear_decay...
================================================================================
Error during testing: linear_decay() missing 4 required positional arguments: 'end', 'start_time', 'end_time', and 'trade_time'

Testing indicator 143/201: bamboo_ta.utility.linear_growth

================================================================================
Testing linear_growth...
================================================================================
Error during testing: linear_growth() missing 4 required positional arguments: 'end', 'start_time', 'end_time', and 'trade_time'

Testing indicator 144/201: bamboo_ta.utility.log_geometric_mean

================================================================================
Testing log_geometric_mean...
================================================================================

=== Log Geometric Mean Test Results ===

Indicator Description:
Name:
    Logarithmic Geometric Mean

Description:
    Calculates the rolling logarithmic geometric mean of a price series over a specified window length.
    The log geometric mean is defined as exp(mean(log(x))) - 1 and is particularly useful for analyzing
    returns over multiple periods. It provides a more accurate measure of average growth rate than
    the arithmetic mean, especially when dealing with percentage changes.

More info:
    https://en.wikipedia.org/wiki/Geometric_mean#Relationship_with_logarithms

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the column specified.
    - length (int): The window size for the rolling calculation. Default is 30.
    - min_periods (int, optional): Minimum number of observations required to calculate
      a value. If None, defaults to the length parameter value.
    - column (str): The column to calculate log geometric mean on. Default is 'close'.

Call with:
    df['log_gmean_30'] = bta.log_geometric_mean(df)['log_gmean_30']

Returns:
    pd.DataFrame: DataFrame with log geometric mean values in a column named 'log_gmean_{length}'.

Last 32 rows of data with log_geometric_mean values:
           date       open       high        low      close         volume  log_gmean_30
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  85875.058010
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  86840.379506
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  87780.890759
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  88757.509431
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  89869.875381
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  90878.035918
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  91722.525058
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  92566.028661
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  93430.242398
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  94174.243848
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  94753.194536
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  95170.024723
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  95578.294607
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  95946.476009
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  96426.209939
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  96869.599363
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  97380.094537
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  97922.029581
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  98256.367303
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  98434.372589
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  98554.672254
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  98520.244880
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  98394.899772
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  98299.861503
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  98325.320935
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  98544.314422
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  98678.311292
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  98624.216442
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  98612.372568
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  98484.469104
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  98359.053229
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  98235.053877

Testing indicator 145/201: bamboo_ta.utility.log_return

================================================================================
Testing log_return...
================================================================================

=== Log Return Test Results ===

Indicator Description:
Name:
    Log Return

Description:
    Calculates the logarithmic return of a price series. Logarithmic returns are useful
    in financial analysis because they are additive over time and better approximate
    normally distributed returns, which is important for statistical analysis.
    
    Two modes are available:
    1. Period-over-period log return (default): log(price_t / price_{t-length})
    2. Cumulative log return: log(price_t / price_0), measuring return since the beginning
    
    Log returns are especially useful for:
    - Comparing performance across different assets
    - Statistical analysis that assumes normality
    - Time series modeling and forecasting

More info:
    https://www.quantstart.com/articles/Returns-Arithmetic-and-Logarithmic/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which must contain the specified column.
    - length (int): The period for calculating returns. Default is 1.
    - cumulative (bool): If True, returns the cumulative log returns since the beginning.
      If False, returns period-over-period log returns. Default is False.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    # Period-over-period log returns
    result = bta.log_return(df, length=1)
    df['log_return'] = result['log_return']
    
    # Cumulative log returns
    result = bta.log_return(df, cumulative=True)
    df['cum_log_return'] = result['cum_log_return']

Returns:
    pd.DataFrame: DataFrame with 'log_return' or 'cum_log_return' column (depending on parameters).

Last 32 rows of data with log_return values:
           date       open       high        low      close         volume  log_return
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   -0.010853
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520    0.008029
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   -0.013932
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830    0.000095
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280    0.028161
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   -0.016792
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100    0.028425
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900    0.000913
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880    0.012716
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   -0.038648
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   -0.007051
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910    0.045851
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   -0.011144
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230    0.014099
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   -0.000042
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775    0.029572
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740    0.015150
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466    0.000708
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   -0.057492
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   -0.027747
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700    0.003519
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   -0.005264
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   -0.021881
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   -0.003207
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880    0.039087
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100    0.007734
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   -0.037275
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   -0.015704
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900    0.010559
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   -0.016524
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   -0.010145
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890    0.008413

Testing indicator 146/201: bamboo_ta.utility.mean_absolute_deviation

================================================================================
Testing mean_absolute_deviation...
================================================================================

=== Mean Absolute Deviation Test Results ===

Indicator Description:
Name:
    Mean Absolute Deviation

Description:
    Mean Absolute Deviation (MAD) is a measure of variability that quantifies the average
    distance between each data point and the mean. Unlike standard deviation, which squares
    the differences, MAD uses the absolute differences, making it less sensitive to outliers.
    
    In financial markets, MAD can be used to:
    - Measure price volatility in a less outlier-sensitive way than standard deviation
    - Identify periods of market stability or instability
    - Develop trading systems that adapt to changing market conditions
    - Set more robust stop-loss levels that are less affected by extreme price movements
    
    The calculation is the mean of the absolute deviations from the mean: mean(|x - mean(x)|)

More info:
    https://en.wikipedia.org/wiki/Average_absolute_deviation
    https://www.investopedia.com/terms/a/absolute-deviation.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which must contain the specified column.
    - length (int): The rolling window period for the MAD calculation. Default is 30.
    - min_periods (int): Minimum number of observations required to calculate MAD.
      Default is the same as length.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.mean_absolute_deviation(df, length=30)
    df['mad'] = result['mad']

Returns:
    pd.DataFrame: DataFrame with 'mad' column containing the indicator values.

Last 32 rows of data with mean_absolute_deviation values:
           date       open       high        low      close         volume          mad
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  9027.938444
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  8454.614667
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  7804.260667
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  7081.098444
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  6297.084444
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  5606.511422
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  5211.844644
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  4807.569756
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  4418.215600
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  3839.358111
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  3343.957733
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  3236.752111
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  3018.565400
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  2945.694978
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  2747.373489
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  2764.678067
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  2816.974333
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  2880.173778
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  2724.590689
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  2575.782000
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  2475.400533
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  2503.740333
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  2581.244800
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  2655.669600
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  2654.135800
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  2524.832978
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  2418.233067
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  2459.941867
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  2469.413111
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  2580.416889
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  2692.912800
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  2805.198400

Testing indicator 147/201: bamboo_ta.utility.median

================================================================================
Testing median...
================================================================================

=== Median Test Results ===

Indicator Description:
Name:
    Median

Description:
    The Median indicator calculates the rolling median of a price series over a specified
    period. Unlike a simple moving average which can be skewed by outliers, the median
    represents the middle value in a series and is more robust to extreme values.
    
    In financial markets, the rolling median can be used to:
    - Identify the central tendency of price movements with less sensitivity to outliers
    - Filter out market noise in highly volatile conditions
    - Develop trading systems that are less affected by price spikes or flash crashes
    - Complement traditional moving averages for a more complete view of market conditions
    
    The median is often considered a more robust measure of central tendency compared to the mean
    when the price distribution contains outliers or exhibits skewness.

More info:
    https://www.incrediblecharts.com/indicators/median_price.php
    https://en.wikipedia.org/wiki/Median

Parameters:
    - df (pandas.DataFrame): Input DataFrame which must contain the specified column.
    - length (int): The rolling window period for the median calculation. Default is 30.
    - min_periods (int): Minimum number of observations required to calculate median.
      Default is the same as length.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.median(df, length=30)
    df['median'] = result['median']

Returns:
    pd.DataFrame: DataFrame with 'median' column containing the indicator values.

Last 32 rows of data with median values:
           date       open       high        low      close         volume     median
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  90419.640
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  90525.500
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  90809.495
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  91498.615
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  92137.975
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  92660.400
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  93648.285
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  94965.270
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  95742.300
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  95845.155
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  95856.400
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  96135.550
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  96500.495
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  96769.315
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  97065.405
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  97230.825
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  97368.235
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  97566.200
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  97786.220
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  97786.220
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  97852.740
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  97738.920
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  97567.130
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  97460.930
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  97460.930
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  97633.650
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  97633.650
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  97633.650
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  97633.650
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  97633.650
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  97633.650
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  97633.650

Testing indicator 148/201: bamboo_ta.utility.month_to_date

================================================================================
Testing month_to_date...
================================================================================
Original DataFrame shape: (396, 2)
Month-to-Date DataFrame shape: (31, 2)

First few rows of Original DataFrame:
                close  volume
2023-01-01  46.469147   11834
2023-01-02  84.249187   23790
2023-01-03  53.481494   93767
2023-01-04   6.006474   57023
2023-01-05  24.586441   42673

First few rows of Month-to-Date DataFrame:
                close  volume
2025-03-01  80.401301    2820
2025-03-02  99.015210   82372
2025-03-03  71.790331   10481
2025-03-04  16.435071   39672
2025-03-05  14.065523   64025

Testing indicator 149/201: bamboo_ta.utility.overbought_oversold

================================================================================
Testing overbought_oversold...
================================================================================
Error during testing: overbought_oversold() missing 1 required positional argument: 'indicator_col'

Testing indicator 150/201: bamboo_ta.utility.pascals_triangle

================================================================================
Testing pascals_triangle...
================================================================================
Pascal's Triangle Row 4:
   pascal
0       1
1       4
2       6
3       4
4       1

Pascal's Triangle Row 4 (weighted):
   pascal_weights
0          0.0625
1          0.2500
2          0.3750
3          0.2500
4          0.0625

Pascal's Triangle Row 4 (inverse weighted):
   pascal_inverse_weights
0                  0.9375
1                  0.7500
2                  0.6250
3                  0.7500
4                  0.9375

Pascal's Triangle Row 8:
   pascal
0       1
1       8
2      28
3      56
4      70
5      56
6      28
7       8
8       1

Testing indicator 151/201: bamboo_ta.utility.percent_return

================================================================================
Testing percent_return...
================================================================================

=== Percent Return Test Results ===

Indicator Description:
Name:
    Percent Return

Description:
    Calculates the percentage return of a price series, which measures the change in value
    of an asset or investment as a percentage of the initial investment.
    
    Two modes are available:
    1. Period-over-period percent return (default): (price_t / price_{t-length}) - 1
    2. Cumulative percent return: (price_t / price_0) - 1, measuring total return since the beginning
    
    Percentage returns are commonly used in finance for:
    - Performance measurement and comparison
    - Risk assessment
    - Investment decision making
    - Portfolio analysis

More info:
    https://www.investopedia.com/terms/r/return.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which must contain the specified column.
    - length (int): The period for calculating returns. Default is 1.
    - cumulative (bool): If True, returns the cumulative percentage returns since the beginning.
      If False, returns period-over-period percentage returns. Default is False.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    # Period-over-period percent returns
    result = bta.percent_return(df, length=1)
    df['percent_return'] = result['percent_return']
    
    # Cumulative percent returns
    result = bta.percent_return(df, cumulative=True)
    df['cum_percent_return'] = result['cum_percent_return']

Returns:
    pd.DataFrame: DataFrame with 'percent_return' or 'cum_percent_return' column (depending on parameters).

Last 32 rows of data with percent_return values:
           date       open       high        low      close         volume  percent_return
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060       -0.010794
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520        0.008061
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810       -0.013835
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830        0.000095
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280        0.028562
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662       -0.016652
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100        0.028833
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900        0.000914
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880        0.012798
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950       -0.037911
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330       -0.007026
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910        0.046919
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450       -0.011082
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230        0.014199
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260       -0.000042
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775        0.030014
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740        0.015265
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466        0.000708
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550       -0.055870
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000       -0.027366
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700        0.003525
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430       -0.005250
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360       -0.021643
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030       -0.003202
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880        0.039861
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100        0.007764
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270       -0.036589
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290       -0.015581
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900        0.010615
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780       -0.016388
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500       -0.010094
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890        0.008448

Testing indicator 152/201: bamboo_ta.utility.populate_leledc_major_minor

================================================================================
Testing populate_leledc_major_minor...
================================================================================
Error during testing: populate_leledc_major_minor() missing 4 required positional arguments: 'maj_qual', 'min_qual', 'maj_len', and 'min_len'

Testing indicator 153/201: bamboo_ta.utility.pump_dump_protection

================================================================================
Testing pump_dump_protection...
================================================================================

=== Pump Dump Protection Test Results ===

Indicator Description:
Name:
    Pump and Dump Protection

Description:
    This indicator helps detect potential pump-and-dump schemes in cryptocurrency markets
    by monitoring abnormal volume activity and rapid price movements. It calculates several
    metrics including short and long-term volume averages, the relative change in volume,
    and the RSI to identify suspicious market behavior.
    
    Pump-and-dump schemes typically involve artificially inflating an asset's price through
    false recommendations and heavy volume (the "pump") followed by selling off shares at
    the higher price (the "dump"). This indicator can help traders avoid being caught in
    such manipulative schemes.

More info:
    Key warning signs that this indicator identifies:
    - Abnormal increases in trading volume (compared to recent history)
    - Extreme RSI values indicating overbought conditions
    - Sudden, dramatic price increases with volume spikes
    
    When the indicator detects these conditions, it sets the 'pnd_volume_warn' flag to -1,
    suggesting caution and potential manipulation in the market.

Parameters:
    - df (pd.DataFrame): Input DataFrame with required OHLCV columns.
    - rsi_period (int, default=14): Period for RSI calculation.
    - short_volume_window (int, default=4): Period for short-term volume average.
    - long_volume_window (int, default=48): Period for long-term volume average.
    - volume_warn_threshold (float, default=5.0): Threshold for volume spike warning.

Call with:
    # Get pump and dump protection indicators
    pnd_data = bta.pump_dump_protection(
        df,
        rsi_period=14,
        short_volume_window=6,
        long_volume_window=72,
        volume_warn_threshold=4.0
    )
    
    # Add results to the original dataframe
    df['vol_short'] = pnd_data['volume_mean_short']
    df['vol_long'] = pnd_data['volume_mean_long']
    df['vol_change'] = pnd_data['volume_change_percentage']
    df['rsi'] = pnd_data['rsi']
    df['pnd_warning'] = pnd_data['pnd_volume_warn']

Returns:
    pd.DataFrame: A DataFrame with the following columns:
    - 'volume_mean_short': Short-term volume average
    - 'volume_mean_long': Long-term volume average
    - 'volume_change_percentage': Ratio between short and long-term volume
    - 'rsi': Relative Strength Index values
    - 'pnd_volume_warn': Warning flag (-1 for potential pump-and-dump, 0 otherwise)

Last 32 rows of data with pump_dump_protection values:
           date       open       high        low      close         volume  volume_mean_short  volume_mean_long  volume_change_percentage        rsi  pnd_volume_warn
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060       28043.396570      38000.502953                  0.737974  62.059810                0
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520       21989.690865      37568.599876                  0.585321  65.155210                0
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810       24275.722425      37449.323118                  0.648229  60.788942                0
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830       26307.107555      37572.012022                  0.700178  57.666840                0
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280       33643.783610      37957.893452                  0.886345  59.019627                0
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662       56889.564896      39649.478758                  1.434812  46.803389                0
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100       58662.280718      40417.309294                  1.451415  51.792876                0
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900       53438.436486      40469.173296                  1.320473  54.789695                0
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880       46129.051386      40119.976943                  1.149778  56.801597                0
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950       32135.897958      40731.438469                  0.788970  59.465381                0
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330       33800.687015      41276.822816                  0.818878  60.434438                0
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910       39506.146268      41592.738319                  0.949833  61.534249                0
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450       43160.918910      41483.412823                  1.040438  59.194532                0
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230       35149.649730      41693.019730                  0.843058  58.501366                0
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260       25770.403213      41808.405299                  0.616393  61.254037                0
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775       21889.187929      41666.367116                  0.525344  64.833880                0
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740       24906.766751      41482.487882                  0.600416  70.613754                0
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466       26696.991060      41527.882589                  0.642869  70.691812                0
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550       35726.064633      41964.463726                  0.851341  52.882558                0
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000       43955.683689      42315.412277                  1.038763  50.885682                0
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700       49351.116929      43406.296928                  1.136958  46.374496                0
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430       47955.768170      43374.793574                  1.105614  45.316031                0
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360       40217.226373      43157.156876                  0.931878  39.400642                0
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030       34633.068630      43145.817254                  0.802698  45.094939                0
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880       24830.590925      41469.717881                  0.598764  53.763021                0
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100       22578.246843      40836.483355                  0.552894  46.430169                0
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270       23037.881070      40517.134765                  0.568596  41.979956                0
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290       21460.505385      40716.284456                  0.527074  36.472533                0
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900       17638.422390      39602.863465                  0.445383  38.804676                0
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780       17413.882560      38170.620549                  0.456212  29.254313                0
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500       19020.646368      36718.944186                  0.518006  23.679586                0
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890       17298.338768      35319.947931                  0.489761  25.767550                0

Testing indicator 154/201: bamboo_ta.utility.quantile

================================================================================
Testing quantile...
================================================================================

=== Quantile Test Results ===

Indicator Description:
Name:
    Quantile

Description:
    The Quantile indicator calculates the specified quantile of a price series over a rolling
    window. Quantiles divide a dataset into equal parts, with the quantile value representing
    the threshold that divides the data in the specified proportion.
    
    Common quantiles include:
    - 0.5 (median): The middle value, dividing the dataset into two equal halves
    - 0.25 (first quartile): Divides the bottom 25% from the top 75%
    - 0.75 (third quartile): Divides the bottom 75% from the top 25%
    
    In financial markets, rolling quantiles can be used to:
    - Identify price levels that are historically significant
    - Develop trading systems based on statistical thresholds
    - Create adaptive indicators that adjust to changing market conditions
    - Filter outliers by focusing on specific segments of the price distribution

More info:
    https://en.wikipedia.org/wiki/Quantile
    https://www.investopedia.com/terms/q/quantile.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which must contain the specified column.
    - length (int): The rolling window period for the quantile calculation. Default is 30.
    - q (float): The quantile to calculate, must be between 0 and 1. Default is 0.5 (median).
    - min_periods (int): Minimum number of observations required to calculate the quantile.
      Default is the same as length.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    # Calculate the median (50th percentile)
    result = bta.quantile(df, length=30, q=0.5)
    df['quantile_0_5'] = result['quantile_0_5']
    
    # Calculate the first quartile (25th percentile)
    result = bta.quantile(df, length=30, q=0.25)
    df['quantile_0_25'] = result['quantile_0_25']

Returns:
    pd.DataFrame: DataFrame with a quantile column (name depends on the q parameter).

Last 32 rows of data with quantile values:
           date       open       high        low      close         volume  quantile_0_5
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060     90419.640
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520     90525.500
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810     90809.495
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830     91498.615
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280     92137.975
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662     92660.400
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100     93648.285
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900     94965.270
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880     95742.300
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950     95845.155
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330     95856.400
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910     96135.550
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450     96500.495
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230     96769.315
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260     97065.405
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775     97230.825
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740     97368.235
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466     97566.200
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550     97786.220
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000     97786.220
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700     97852.740
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430     97738.920
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360     97567.130
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030     97460.930
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880     97460.930
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100     97633.650
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270     97633.650
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290     97633.650
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900     97633.650
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780     97633.650
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500     97633.650
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890     97633.650

Testing indicator 155/201: bamboo_ta.utility.quarter_to_date

================================================================================
Testing quarter_to_date...
================================================================================
Original DataFrame shape: (455, 2)
Quarter-to-Date DataFrame shape: (90, 2)

Current Quarter: Q1 (starts 2025-01-01)

First few rows of Original DataFrame:
                close  volume
2023-01-01  73.643391   53583
2023-01-02  40.677201   82584
2023-01-03  10.761168   46415
2023-01-04  61.935034   71965
2023-01-05  78.259597   17793

First few rows of Quarter-to-Date DataFrame:
                close  volume
2025-01-01  67.814925   33255
2025-01-02  71.027542   19408
2025-01-03  25.853653   85149
2025-01-04  35.598805   26120
2025-01-05   5.869982   37170

Testing indicator 156/201: bamboo_ta.utility.regression_slope

================================================================================
Testing regression_slope...
================================================================================
Error: regression_slope did not return a DataFrame

Testing indicator 157/201: bamboo_ta.utility.same_length

================================================================================
Testing same_length...
================================================================================
Error during testing: same_length() missing 1 required positional argument: 'shorter'

Testing indicator 158/201: bamboo_ta.utility.sharpe_ratio

================================================================================
Testing sharpe_ratio...
================================================================================
Sharpe Ratio Test Results (benchmark rate = 2%):
High performance portfolio (15% return, 10% volatility):
  Sharpe ratio: 1.2477
  Sharpe ratio (log returns): 1.2009

Medium performance portfolio (15% return, 20% volatility):
  Sharpe ratio: 0.5767
  Sharpe ratio (log returns): 0.4814

Low performance portfolio (5% return, 20% volatility):
  Sharpe ratio: 0.0605
  Sharpe ratio (log returns): -0.0358

Testing indicator 159/201: bamboo_ta.utility.skew

================================================================================
Testing skew...
================================================================================

=== Skew Test Results ===

Indicator Description:
Name:
    Rolling Skew

Description:
    Calculates the rolling skew of a price series over a specified window length.
    Skew measures the asymmetry of the distribution of returns around its mean.
    Positive skew indicates a distribution with a long right tail, while negative 
    skew indicates a distribution with a long left tail.

More info:
    https://en.wikipedia.org/wiki/Skewness

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the column specified.
    - length (int): The window size for the rolling calculation. Default is 30.
    - min_periods (int, optional): Minimum number of observations required to calculate
      a value. If None, defaults to the length parameter value.
    - column (str): The column to calculate skew on. Default is 'close'.

Call with:
    df['skew_30'] = bta.skew(df)['skew_30']

Returns:
    pd.DataFrame: DataFrame with skew values in a column named 'skew_{length}'.

Last 32 rows of data with skew values:
           date       open       high        low      close         volume   skew_30
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060 -0.646070
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520 -0.788697
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810 -0.942521
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830 -1.085160
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280 -1.133449
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662 -1.134551
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100 -1.249298
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900 -1.333413
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880 -1.291040
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950 -0.966983
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -0.431024
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910 -0.473317
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450 -0.527553
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230 -0.599479
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260 -0.453368
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775 -0.272791
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  0.024629
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  0.298424
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  0.437490
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  0.558446
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  0.569634
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  0.596394
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  0.646767
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  0.658262
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  0.634655
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  0.684699
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  1.048884
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  0.961742
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  0.949429
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  0.842096
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  0.680708
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  0.633664

Testing indicator 160/201: bamboo_ta.utility.st_dev

================================================================================
Testing st_dev...
================================================================================
Error during testing: st_dev() missing 1 required positional argument: 'period'

Testing indicator 161/201: bamboo_ta.utility.symmetric_triangle

================================================================================
Testing symmetric_triangle...
================================================================================
Symmetric Triangle n=4:
   symtri
0       1
1       2
2       2
3       1

Symmetric Triangle n=4 (weighted):
   symtri_weights
0        0.166667
1        0.333333
2        0.333333
3        0.166667

Symmetric Triangle n=5:
   symtri
0       1
1       2
2       3
3       2
4       1

Symmetric Triangle n=5 (weighted):
   symtri_weights
0        0.111111
1        0.222222
2        0.333333
3        0.222222
4        0.111111

Testing indicator 162/201: bamboo_ta.utility.top_percent_change

================================================================================
Testing top_percent_change...
================================================================================
Error: top_percent_change did not return a DataFrame

Testing indicator 163/201: bamboo_ta.utility.tos_standard_deviation_all

================================================================================
Testing tos_standard_deviation_all...
================================================================================

=== Tos Standard Deviation All Test Results ===

Indicator Description:
Name:
    TD Ameritrade's Think or Swim Standard Deviation All

Description:
    A port of TD Ameritrade's Think or Swim Standard Deviation All indicator which
    returns the standard deviation of data for the entire plot or for the interval
    of the last bars defined by the length parameter.
    
    This indicator creates a linear regression line along with upper and lower bands
    at specified standard deviation levels. It can be used to identify potential
    price targets and areas of support and resistance.

More info:
    https://tlc.thinkorswim.com/center/reference/thinkScript/Functions/Statistical/StDevAll

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the column specified.
    - length (int, optional): Number of bars from current bar to use for calculations.
      If None, all available data is used. Default is None.
    - stds (list, optional): List of Standard Deviations in ascending order from the
      central Linear Regression line. Default is [1, 2, 3].
    - ddof (int): Delta Degrees of Freedom. The divisor used in calculations is N - ddof,
      where N represents the number of elements. Default is 1.
    - column (str): The column to calculate on. Default is 'close'.

Call with:
    tos_sd = bta.tos_standard_deviation_all(df)
    df['tos_lr'] = tos_sd['TOS_STDEVALL_LR']
    df['tos_lower_1'] = tos_sd['TOS_STDEVALL_L_1']
    df['tos_upper_1'] = tos_sd['TOS_STDEVALL_U_1']
    # ...and so on for other bands

Returns:
    pd.DataFrame: DataFrame with columns for the central linear regression line and
    pairs of lower and upper bands based on multiples of the standard deviation.

Last 32 rows of data with tos_standard_deviation_all values:
           date       open       high        low      close         volume  TOS_STDEVALL_LR  TOS_STDEVALL_L_1  TOS_STDEVALL_U_1  TOS_STDEVALL_L_2  TOS_STDEVALL_U_2  TOS_STDEVALL_L_3  TOS_STDEVALL_U_3
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060     55686.838559      33631.544921      77742.132198      11576.251282      99797.425837     -10479.042357     121852.719476
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520     55708.624600      33653.330961      77763.918239      11598.037323      99819.211878     -10457.256316     121874.505516
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810     55730.410641      33675.117002      77785.704280      11619.823363      99840.997918     -10435.470275     121896.291557
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830     55752.196682      33696.903043      77807.490320      11641.609404      99862.783959     -10413.684235     121918.077598
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280     55773.982722      33718.689084      77829.276361      11663.395445      99884.570000     -10391.898194     121939.863639
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662     55795.768763      33740.475124      77851.062402      11685.181486      99906.356041     -10370.112153     121961.649679
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100     55817.554804      33762.261165      77872.848443      11706.967526      99928.142081     -10348.326112     121983.435720
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900     55839.340845      33784.047206      77894.634483      11728.753567      99949.928122     -10326.540072     122005.221761
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880     55861.126885      33805.833247      77916.420524      11750.539608      99971.714163     -10304.754031     122027.007802
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950     55882.912926      33827.619287      77938.206565      11772.325649      99993.500204     -10282.967990     122048.793842
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330     55904.698967      33849.405328      77959.992606      11794.111689     100015.286244     -10261.181949     122070.579883
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910     55926.485008      33871.191369      77981.778646      11815.897730     100037.072285     -10239.395909     122092.365924
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450     55948.271048      33892.977410      78003.564687      11837.683771     100058.858326     -10217.609868     122114.151965
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230     55970.057089      33914.763450      78025.350728      11859.469812     100080.644367     -10195.823827     122135.938005
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260     55991.843130      33936.549491      78047.136769      11881.255852     100102.430407     -10174.037786     122157.724046
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775     56013.629171      33958.335532      78068.922809      11903.041893     100124.216448     -10152.251746     122179.510087
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740     56035.415211      33980.121573      78090.708850      11924.827934     100146.002489     -10130.465705     122201.296128
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466     56057.201252      34001.907613      78112.494891      11946.613975     100167.788530     -10108.679664     122223.082168
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550     56078.987293      34023.693654      78134.280932      11968.400015     100189.574570     -10086.893623     122244.868209
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000     56100.773334      34045.479695      78156.066972      11990.186056     100211.360611     -10065.107583     122266.654250
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700     56122.559374      34067.265736      78177.853013      12011.972097     100233.146652     -10043.321542     122288.440291
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430     56144.345415      34089.051776      78199.639054      12033.758138     100254.932693     -10021.535501     122310.226331
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360     56166.131456      34110.837817      78221.425095      12055.544178     100276.718733      -9999.749460     122332.012372
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030     56187.917497      34132.623858      78243.211135      12077.330219     100298.504774      -9977.963419     122353.798413
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880     56209.703537      34154.409899      78264.997176      12099.116260     100320.290815      -9956.177379     122375.584454
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100     56231.489578      34176.195940      78286.783217      12120.902301     100342.076856      -9934.391338     122397.370494
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270     56253.275619      34197.981980      78308.569258      12142.688342     100363.862896      -9912.605297     122419.156535
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290     56275.061660      34219.768021      78330.355298      12164.474382     100385.648937      -9890.819256     122440.942576
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900     56296.847701      34241.554062      78352.141339      12186.260423     100407.434978      -9869.033216     122462.728617
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780     56318.633741      34263.340103      78373.927380      12208.046464     100429.221019      -9847.247175     122484.514657
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500     56340.419782      34285.126143      78395.713421      12229.832505     100451.007060      -9825.461134     122506.300698
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890     56362.205823      34306.912184      78417.499462      12251.618545     100472.793100      -9803.675093     122528.086739

Testing indicator 164/201: bamboo_ta.utility.variance

================================================================================
Testing variance...
================================================================================

=== Variance Test Results ===

Indicator Description:
Name:
    Rolling Variance

Description:
    Calculates the rolling variance of a price series over a specified window length.
    Variance measures how far a set of numbers is spread out from their average value.
    It is the square of the standard deviation.

More info:
    https://en.wikipedia.org/wiki/Variance

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the column specified.
    - length (int): The window size for the rolling calculation. Default is 30.
    - ddof (int): Delta Degrees of Freedom. The divisor used in calculations is N - ddof, 
      where N represents the number of elements. Default is 1.
    - min_periods (int, optional): Minimum number of observations required to calculate
      a value. If None, defaults to the length parameter value.
    - column (str): The column to calculate variance on. Default is 'close'.

Call with:
    df['var_30'] = bta.variance(df)['var_30']

Returns:
    pd.DataFrame: DataFrame with variance values in a column named 'var_{length}'.

Last 32 rows of data with variance values:
           date       open       high        low      close         volume        var_30
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  1.101759e+08
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  1.032090e+08
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  9.356463e+07
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  8.148219e+07
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  6.764246e+07
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  5.326531e+07
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  4.672269e+07
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  3.921784e+07
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  3.178040e+07
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  2.187876e+07
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  1.507731e+07
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  1.494615e+07
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  1.372463e+07
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  1.377565e+07
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  1.194917e+07
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  1.291018e+07
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  1.411640e+07
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  1.442330e+07
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  1.252833e+07
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  1.127894e+07
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  1.067180e+07
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  1.072728e+07
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  1.110332e+07
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  1.151239e+07
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  1.150783e+07
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  1.050356e+07
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  9.242009e+06
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  9.632012e+06
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  9.707755e+06
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  1.047726e+07
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  1.144353e+07
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  1.218373e+07

Testing indicator 165/201: bamboo_ta.utility.year_to_date

================================================================================
Testing year_to_date...
================================================================================
Original DataFrame shape: (48, 2)
Year-to-Date DataFrame shape: (12, 2)

First few rows of Original DataFrame:
                close  volume
2021-01-01  95.486528   73369
2021-02-01  73.789692   12938
2021-03-01  55.435405   36195
2021-04-01  61.172075   92680
2021-05-01  41.960006    5000

First few rows of Year-to-Date DataFrame:
                close  volume
2025-01-01  87.747201    8357
2025-02-01  73.507104   33479
2025-03-01  80.348093   62476
2025-04-01  28.203457   45811
2025-05-01  17.743954   37208

Testing indicator 166/201: bamboo_ta.utility.z_score

================================================================================
Testing z_score...
================================================================================
Error during testing: Cannot aggregate non-numeric type: datetime64[ns]

Testing indicator 167/201: bamboo_ta.volatility.aberration_bands

================================================================================
Testing aberration_bands...
================================================================================

=== Aberration Bands Test Results ===

Indicator Description:
Name:
    Aberration Bands (ABER)

Description:
    Aberration Bands are a volatility-based indicator similar to Keltner Channels.
    The indicator consists of three bands:
    - Middle band: Simple Moving Average of the typical price (HLC3)
    - Upper band: Middle band + Average True Range
    - Lower band: Middle band - Average True Range
    
    These bands can be used to identify overbought and oversold conditions,
    as well as potential breakout opportunities when price moves outside the bands.

More info:
    There are few definitive resources on this indicator, as it is less commonly used
    than other volatility-based bands like Bollinger Bands or Keltner Channels.

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', and 'close' columns.
    - length (int): The period for the SMA calculation. Default is 5.
    - atr_length (int): The period for the ATR calculation. Default is 15.

Call with:
    result = bta.aberration_bands(df)
    df['aber_middle'] = result['aber_middle']
    df['aber_upper'] = result['aber_upper']
    df['aber_lower'] = result['aber_lower']
    df['aber_atr'] = result['aber_atr']

Returns:
    pd.DataFrame: DataFrame with 'aber_middle', 'aber_upper', 'aber_lower', and 'aber_atr' columns.

Last 32 rows of data with aberration_bands values:
           date       open       high        low      close         volume    aber_middle     aber_upper    aber_lower     aber_atr
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   95390.000000   98655.728667  92124.271333  3265.728667
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   96255.695333   99549.332667  92962.058000  3293.637333
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   96489.172667   99849.944000  93128.401333  3360.771333
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   96414.866000   99742.987333  93086.744667  3328.121333
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   96463.544000   99849.242667  93077.845333  3385.698667
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   96568.189333  100637.623333  92498.755333  4069.434000
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   97028.622000  101162.674000  92894.570000  4134.052000
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   97745.258667  101821.262667  93669.254667  4076.004000
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   98770.919333  102908.286667  94633.552000  4137.367333
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   98802.072667  103221.883333  94382.262000  4419.810667
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   98641.133333  102910.400667  94371.866000  4269.267333
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   98711.112667  103116.879333  94305.346000  4405.766667
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   98893.830000  103153.749333  94633.910667  4259.919333
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   98987.578000  103298.581333  94676.574667  4311.003333
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   99790.042000  104020.084667  95559.999333  4230.042667
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  101245.481333  105651.585333  96839.377333  4406.104000
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  102479.714000  107040.348000  97919.080000  4560.634000
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  103676.534000  108190.268667  99162.799333  4513.734667
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  103956.832667  108723.742667  99189.922667  4766.910000
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  103375.670000  108321.776000  98429.564000  4946.106000
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  101863.660000  106303.930000  97423.390000  4440.270000
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  100266.744000  104522.010667  96011.477333  4255.266667
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   98071.842000  102433.945333  93709.738667  4362.103333
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   96552.602000  101003.080000  92102.124000  4450.478000
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   96269.843333  100643.860667  91895.826000  4374.017333
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   96827.162667  101062.758000  92591.567333  4235.595333
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   96675.392667  100813.308000  92537.477333  4137.915333
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   96572.654000  100764.983333  92380.324667  4192.329333
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   96654.604667  100774.138667  92535.070667  4119.534000
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   96012.413333  100151.273333  91873.553333  4138.860000
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   94860.162000   98964.434667  90755.889333  4104.272667
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   94253.848000   98341.867333  90165.828667  4088.019333

Testing indicator 168/201: bamboo_ta.volatility.acceleration_bands

================================================================================
Testing acceleration_bands...
================================================================================

=== Acceleration Bands Test Results ===

Indicator Description:
Name:
    Acceleration Bands (ACCBANDS)

Description:
    Acceleration Bands, created by Price Headley, are volatility-based envelopes
    plotted above and below a simple moving average. The bands are based on a multiple
    of the high-low range, adjusted by the sum of the high and low.
    
    The bands widen and narrow based on market volatility, providing potential
    overbought and oversold levels. They can be used to identify potential
    price targets for trending markets or potential reversal points when the price
    reaches the upper or lower bands.

More info:
    https://www.tradingtechnologies.com/help/x-study/technical-indicator-definitions/acceleration-bands-abands/
    https://library.tradingtechnologies.com/trade/chrt-ti-acceleration-bands.html

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', and 'close' columns.
    - length (int): The period for the moving average calculation. Default is 20.
    - c (float): The multiplier for the high-low ratio. Default is 4.0.
    - ma_type (str): The type of moving average to use ('SMA' or 'EMA'). Default is 'SMA'.

Call with:
    result = bta.acceleration_bands(df)
    df['accbands_lower'] = result['accbands_lower']
    df['accbands_middle'] = result['accbands_middle']
    df['accbands_upper'] = result['accbands_upper']

Returns:
    pd.DataFrame: DataFrame with 'accbands_lower', 'accbands_middle', and 'accbands_upper' columns.

Last 32 rows of data with acceleration_bands values:
           date       open       high        low      close         volume  accbands_lower  accbands_middle  accbands_upper
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060    83223.789498       93298.4505   103274.919498
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520    84666.183270       93725.3100   102924.210770
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810    85239.338743       94119.7405   103214.116243
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830    86028.396080       94393.4650   102900.598580
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280    86490.695456       94956.5515   103185.492956
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662    85863.021019       95252.2295   104760.663519
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100    85755.981490       95709.9255   105702.068990
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900    86372.508907       96208.7255   106035.393907
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880    86886.868106       96741.0010   106418.803106
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950    86743.505372       96989.2850   107154.782872
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330    86815.591742       97104.6070   107397.241742
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910    86775.290231       97245.0010   107677.380231
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450    86810.592902       97300.6155   107903.297902
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230    86824.297650       97488.2080   108146.355150
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260    87144.822559       97664.2060   108269.720059
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775    87789.801151       98236.9050   108350.011151
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740    88389.122224       98941.5800   109018.782224
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466    89292.826175       99455.1115   109326.346175
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550    89119.407256       99683.1130   110303.172256
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000    88771.581219       99683.2060   110916.623719
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700    88133.687232       99753.0785   111435.859732
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430    88071.570781       99758.4190   111623.768281
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360    88116.153499       99725.7015   111534.033499
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030    87938.713853       99677.2905   111679.486353
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880    87745.184404       99681.1035   111862.656904
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100    89173.890824       99805.3020   110378.645824
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270    89243.970124       99607.8400   110160.547624
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290    88739.117433       99331.1920   110268.042433
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900    88620.231139       99040.7125   109875.413639
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780    89014.072728       98863.7990   109085.405228
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500    88927.886784       98673.7515   108869.366784
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890    88937.805863       98296.3015   108375.913363

Testing indicator 169/201: bamboo_ta.volatility.average_true_range

================================================================================
Testing average_true_range...
================================================================================

=== Average True Range Test Results ===

Indicator Description:
Name:
    Average True Range (ATR)

Description:
    The Average True Range (ATR), smoothed by the Moving Average, is a measure of volatility. 
    It was introduced by Welles Wilder in his book 'New Concepts in Technical Trading Systems'.
    ATR is a volatility indicator that measures market volatility by decomposing the entire
    range of an asset price for a specific period.

More info:
    https://www.investopedia.com/terms/a/atr.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain columns 'high', 'low', and 'close'.
    - period (int): Period for the ATR calculation. Default is 14.

Call with:
    df['atr'] = bta.average_true_range(df, 14)['atr']

Returns:
    pd.DataFrame: DataFrame with 'atr' column.

Last 32 rows of data with average_true_range values:
           date       open       high        low      close         volume          atr
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  3375.888571
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  3334.040714
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  3371.033571
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  3312.379286
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  3389.536429
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  4006.679286
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  4253.205714
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  4240.515000
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  4230.805714
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  4287.539286
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  4275.481429
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  4333.602143
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  4426.770714
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  4386.432143
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  4434.192857
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  4567.817143
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  4619.607857
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  4641.333571
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  4792.248571
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  4328.827857
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  4334.770000
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  4445.272857
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  4481.303571
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  4263.663571
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  4399.771429
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  4093.155000
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  4202.883571
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  4299.620000
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  4268.030000
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  4147.860000
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  4078.858571
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  4163.484286

Testing indicator 170/201: bamboo_ta.volatility.bbw_expansion

================================================================================
Testing bbw_expansion...
================================================================================
Error during testing: 'bb_upper'

Testing indicator 171/201: bamboo_ta.volatility.bollinger_bands

================================================================================
Testing bollinger_bands...
================================================================================

=== Bollinger Bands Test Results ===

Indicator Description:
Name:
    Bollinger Bands (BBANDS)

Description:
    Bollinger Bands are a type of statistical chart characterizing the prices and 
    volatility over time of a financial instrument or commodity. Bollinger Bands 
    consist of three lines: a middle band (SMA), an upper band, and a lower band.
    The upper and lower bands are calculated by adding and subtracting a standard
    deviation multiple from the middle band.

More info:
    https://www.investopedia.com/terms/b/bollingerbands.asp

Parameters:
    - df (pandas.DataFrame): DataFrame containing the data.
    - column (str): The column name on which the BBANDS is to be applied. Default is 'close'.
    - period (int): Look-back period to compute the moving average. Default is 20.
    - std_dev (float): Number of standard deviations to compute the upper and lower bands. Default is 2.0.
    - ddof (int): Degrees of Freedom to use in standard deviation calculation. Default is 0.

Call with:
    bb_result = bta.bollinger_bands(df, 'close', 20, 2, 0)
    df['bb_upper'] = bb_result['bb_upper']
    df['bb_middle'] = bb_result['bb_middle']
    df['bb_lower'] = bb_result['bb_lower']

Returns:
    pd.DataFrame: DataFrame with 'bb_upper', 'bb_middle', 'bb_lower' columns.

Last 32 rows of data with bollinger_bands values:
           date       open       high        low      close         volume       bb_upper   bb_middle      bb_lower
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  100598.656600  93298.4505  85998.244400
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  100884.929379  93725.3100  86565.690621
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  100817.990769  94119.7405  87421.490231
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  100902.004360  94393.4650  87884.925640
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  100840.387963  94956.5515  89072.715037
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  100907.386903  95252.2295  89597.072097
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  101261.444665  95709.9255  90158.406335
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  101343.774698  96208.7255  91073.676302
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  101582.381549  96741.0010  91899.620451
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  101385.235107  96989.2850  92593.334893
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  101328.544093  97104.6070  92880.669907
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  101794.888590  97245.0010  92695.113410
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  101955.647101  97300.6155  92645.583899
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  102478.376633  97488.2080  92498.039367
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  102940.166419  97664.2060  92388.245581
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  103843.947551  98236.9050  92629.862449
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  104757.220286  98941.5800  93125.939714
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  105875.146634  99455.1115  93035.076366
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  105865.033212  99683.1130  93501.192788
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  105864.992487  99683.2060  93501.419513
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  105815.647969  99753.0785  93690.509031
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  105812.112523  99758.4190  93704.725477
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  105870.130116  99725.7015  93581.272884
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  105956.880555  99677.2905  93397.700445
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  105958.133670  99681.1035  93404.073330
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  105957.983890  99805.3020  93652.620110
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  106004.765758  99607.8400  93210.914242
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  106131.277791  99331.1920  92531.106209
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  106006.429642  99040.7125  92074.995358
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  106171.113089  98863.7990  91556.484911
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  106393.485210  98673.7515  90954.017790
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  106234.821814  98296.3015  90357.781186

Testing indicator 172/201: bamboo_ta.volatility.donchian_channel

================================================================================
Testing donchian_channel...
================================================================================

=== Donchian Channel Test Results ===

Indicator Description:
Name:
    Donchian Channel

Description:
    The Donchian Channel is a volatility indicator composed of three lines: 
    an upper band, a middle band, and a lower band. The upper band represents 
    the highest price of a security over a specified period, while the lower band 
    represents the lowest price. The middle band is simply the average of the 
    upper and lower bands.
    
    Donchian Channels are used to identify potential breakouts, determine market 
    volatility, and identify trend strength. They are particularly popular in trend-following 
    systems like the Turtle Trading system.

More info:
    https://www.investopedia.com/terms/d/donchianchannels.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain columns 'high' and 'low'.
    - period (int): The lookback period to calculate the highest high and lowest low. Default is 20.

Call with:
    dc_result = bta.donchian_channel(df, 20)
    df['dc_upper'] = dc_result['dc_upper']
    df['dc_middle'] = dc_result['dc_middle']
    df['dc_lower'] = dc_result['dc_lower']
    df['dc_width'] = dc_result['dc_width']

Returns:
    pd.DataFrame: DataFrame with 'dc_upper', 'dc_middle', 'dc_lower', and 'dc_width' columns.

Last 32 rows of data with donchian_channel values:
           date       open       high        low      close         volume   dc_upper   dc_middle  dc_lower  dc_width
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   99588.01   89902.010  80216.01  0.200938
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   99588.01   92330.005  85072.00  0.149364
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   99588.01   92858.000  86127.99  0.140442
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   99588.01   93128.110  86668.21  0.134792
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   99588.01   93330.695  87073.38  0.126940
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  104088.00   96405.000  88722.00  0.158501
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  104088.00   96405.000  88722.00  0.154059
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  104088.00   96732.450  89376.90  0.147359
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  104088.00   97222.500  90357.00  0.135803
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  104088.00   97294.000  90500.00  0.139684
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  104088.00   97294.000  90500.00  0.140673
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  104088.00   97294.000  90500.00  0.134368
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  104088.00   97294.000  90500.00  0.135874
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  104088.00   97294.000  90500.00  0.133972
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  104088.00   97294.000  90500.00  0.133978
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  105250.00   97875.000  90500.00  0.141197
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  107793.07   99146.535  90500.00  0.163052
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  108353.00   99426.500  90500.00  0.168212
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  108353.00   99426.500  90500.00  0.178167
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  108353.00   99426.500  90500.00  0.183179
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  108353.00   99426.500  90500.00  0.182536
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  108353.00   99426.500  90500.00  0.183499
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  108353.00   99426.500  90500.00  0.187559
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  108353.00   99426.500  90500.00  0.188161
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  108353.00   99426.500  90500.00  0.180948
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  108353.00  100292.770  92232.54  0.162129
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  108353.00  100292.770  92232.54  0.168287
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  108353.00  100292.770  92232.54  0.170950
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  108353.00  100292.770  92232.54  0.169155
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  108353.00  100292.770  92232.54  0.171973
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  108353.00   99941.725  91530.45  0.181293
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  108353.00   99941.725  91530.45  0.179774

Testing indicator 173/201: bamboo_ta.volatility.hurst_winter_channel

================================================================================
Testing hurst_winter_channel...
================================================================================

=== Hurst Winter Channel Test Results ===

Indicator Description:
Name:
    Hurst-Winter Channel (HWC)

Description:
    The Hurst-Winter Channel (HWC) is a volatility-based channel indicator based on 
    the Holt-Winters triple exponential smoothing method. It creates a middle line using 
    the Holt-Winters Moving Average (HWMA) and upper/lower bands based on price deviation.
    
    The channel adapts to price movements using four smoothing parameters (na, nb, nc, nd)
    and can be adjusted with a scalar multiplier. It can also provide channel width and
    relative price position information for additional analysis.
    
    The Holt-Winters method is particularly good at capturing trends, seasonality, and
    adapting to changes in volatility, making this channel useful for identifying potential
    support/resistance levels and overbought/oversold conditions.

More info:
    https://www.mql5.com/en/code/20857
    https://en.wikipedia.org/wiki/Exponential_smoothing#Triple_exponential_smoothing

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain the specified column.
    - na (float): Parameter of the equation that describes a smoothed series (from 0 to 1). Default is 0.2.
    - nb (float): Parameter of the equation to assess the trend (from 0 to 1). Default is 0.1.
    - nc (float): Parameter of the equation to assess seasonality (from 0 to 1). Default is 0.1.
    - nd (float): Parameter of the channel equation (from 0 to 1). Default is 0.1.
    - scalar (float): Multiplier for the width of the channel calculated. Default is 1.0.
    - channel_eval (bool): Whether to return width and percentage price position metrics. Default is False.
    - column (str): The column name to use for calculations. Default is 'close'.

Call with:
    result = bta.hurst_winter_channel(df)
    df['hwc_middle'] = result['hwc_middle']
    df['hwc_upper'] = result['hwc_upper']
    df['hwc_lower'] = result['hwc_lower']
    
    # If channel_eval is True:
    df['hwc_width'] = result['hwc_width']
    df['hwc_pct_width'] = result['hwc_pct_width']

Returns:
    pd.DataFrame: DataFrame with 'hwc_middle', 'hwc_upper', 'hwc_lower' columns,
                  and optionally 'hwc_width' and 'hwc_pct_width' if channel_eval is True.

Last 32 rows of data with hurst_winter_channel values:
           date       open       high        low      close         volume     hwc_middle      hwc_upper     hwc_lower
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  102659.593852  108723.071777  96596.115927
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  102423.343850  108505.896206  96340.791494
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  101774.861985  107778.322229  95771.401741
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  101068.916621  107065.490993  95072.342248
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  100924.122065  106847.554046  95000.690084
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  100316.623980  105984.463620  94648.784340
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  100290.659579  105772.294883  94809.024275
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  100190.913000  105394.154605  94987.671395
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  100297.923642  105235.456777  95360.390508
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   99467.634233  104158.816422  94776.452043
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   98515.221452  103019.285325  94011.157579
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   98618.384810  102934.334968  94302.434652
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   98415.191828  102585.682826  94244.700831
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   98512.213705  102500.473845  94523.953566
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   98568.578956  102462.624742  94674.533169
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   99270.724608  103073.393871  95468.055345
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  100229.923138  104193.666913  96266.179363
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  101085.462612  105273.249090  96897.676134
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  100526.063992  104807.688740  96244.439244
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   99424.919634  103488.102047  95361.737222
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   98532.261467  102436.600911  94627.922023
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   97640.112958  101351.218830  93929.007086
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   96402.329291   99924.714147  92879.944435
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   95263.421073   98627.102922  91899.739223
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   95121.733484   98315.087315  91928.379654
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   95200.401492   98430.297077  91970.505907
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   94504.921611   97848.215637  91161.627585
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   93603.806995   96801.526116  90406.087873
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   93076.655668   96118.234258  90035.077077
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   92317.818004   95287.734887  89347.901121
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   91494.274584   94347.363115  88641.186053
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   90999.828601   93737.441585  88262.215617

Testing indicator 174/201: bamboo_ta.volatility.keltner_channel

================================================================================
Testing keltner_channel...
================================================================================

=== Keltner Channel Test Results ===

Indicator Description:
Name:
    Keltner Channel

Description:
    The Keltner Channel is a volatility-based indicator that consists of three lines: 
    a middle line (typically an EMA), an upper band, and a lower band. The upper and 
    lower bands are calculated by adding and subtracting a multiple of the Average 
    True Range (ATR) from the middle line. 
    
    Unlike Bollinger Bands which use standard deviation, Keltner Channels use ATR, 
    making them more responsive to volatility changes based on trading ranges 
    rather than closing prices.

More info:
    https://www.investopedia.com/terms/k/keltnerchannel.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain columns 'high', 'low', and 'close'.
    - column (str): The column name to use for the middle line calculation. Default is 'close'.
    - ema_length (int): Period for the EMA calculation for the middle line. Default is 20.
    - atr_length (int): Period for the ATR calculation. Default is 10.
    - atr_mult (float): Multiplier for the ATR to determine the channel width. Default is 2.0.

Call with:
    kc_result = bta.keltner_channel(df, 'close', 20, 10, 2.0)
    df['kc_middle'] = kc_result['kc_middle']
    df['kc_upper'] = kc_result['kc_upper']
    df['kc_lower'] = kc_result['kc_lower']
    df['kc_width'] = kc_result['kc_width']

Returns:
    pd.DataFrame: DataFrame with 'kc_middle', 'kc_upper', 'kc_lower', and 'kc_width' columns.

Last 32 rows of data with keltner_channel values:
           date       open       high        low      close         volume     kc_middle       kc_upper      kc_lower  kc_width
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  91598.915053   98486.289053  84711.541053  0.150381
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  92130.940286   98457.138286  85804.742286  0.137331
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  92484.243116   99064.261116  85904.225116  0.142295
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  92804.761867   99575.679867  86033.843867  0.145917
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  93355.481689  100442.987689  86267.975689  0.151839
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  93697.400576  102248.184576  85146.616576  0.182519
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  94272.966235  103170.750235  85375.182235  0.188766
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  94802.397070  102936.003070  86668.791070  0.171591
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  95403.082111  103690.548111  87115.616111  0.173736
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  95581.500005  104631.142005  86531.858005  0.189360
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  95677.833338  105255.779338  86099.887338  0.200212
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  96196.611115  106592.085115  85801.137115  0.216130
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  96559.247200  106853.393200  86265.101200  0.213219
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  97022.580800  107309.308800  86735.852800  0.212048
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  97441.382628  107253.794628  87628.970628  0.201401
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  98110.202378  106007.586378  90212.818378  0.160990
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  98867.198342  106473.142342  91261.254342  0.153862
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  99559.249928  107452.459928  91666.039928  0.158563
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  99620.655650  108280.201650  90961.109650  0.173850
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  99415.056064  108081.448064  90748.664064  0.174348
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  99261.759296  108325.551296  90197.967296  0.182624
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  99074.162220  107520.446220  90627.878220  0.170504
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  98703.886771  107144.044771  90263.728771  0.171020
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  98339.847078  107045.737078  89633.957078  0.177057
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  98370.678785  107852.244785  88889.112785  0.192772
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  98471.528424  107537.948424  89405.108424  0.184143
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  98216.297146  107343.615146  89088.979146  0.185862
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  97843.224084  107173.154084  88513.294084  0.190712
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  97601.012267  105945.612267  89256.412267  0.170994
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  97233.125384  104623.799384  89842.451384  0.152020
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  96810.165824  103699.557824  89920.773824  0.142328
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  96502.150031  103606.352031  89397.948031  0.147234

Testing indicator 175/201: bamboo_ta.volatility.mass_index

================================================================================
Testing mass_index...
================================================================================

=== Mass Index Test Results ===

Indicator Description:
Name:
    Mass Index (MASSI)

Description:
    The Mass Index is a non-directional volatility indicator that utilizes the
    High-Low Range to identify trend reversals based on range expansions.
    
    Unlike many other technical indicators, the Mass Index doesn't follow price
    direction but instead identifies reversals by tracking changes in the range 
    between high and low prices. A Mass Index above 27 followed by a drop below 
    26.5 is often considered a "reversal bulge" signaling a potential trend change.
    
    The indicator is based on the idea that reversals are often preceded by 
    widening ranges as volatility increases, followed by narrowing ranges as 
    the market prepares to reverse.

More info:
    https://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:mass_index

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high' and 'low' columns.
    - fast_length (int): The period for the first and second EMA calculations. Default is 9.
    - slow_length (int): The period for summing the EMA ratio. Default is 25.

Call with:
    result = bta.mass_index(df)
    df['mass_index'] = result['mass_index']

Returns:
    pd.DataFrame: DataFrame with 'mass_index' column.

Last 32 rows of data with mass_index values:
           date       open       high        low      close         volume  mass_index
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   26.873056
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   26.356131
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   26.046936
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   25.873898
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   25.901889
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   26.213952
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   26.131128
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   25.909257
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   25.558797
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   25.392570
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   25.247138
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   25.309787
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   25.358366
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   25.358545
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   25.288020
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   25.255455
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   25.200204
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   25.179298
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   25.349892
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   25.610705
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700   25.719872
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   25.720061
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   25.602492
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   25.589282
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   25.655674
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   25.711317
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   25.830644
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   25.886061
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   25.851465
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   25.701466
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   25.142515
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   24.734138

Testing indicator 176/201: bamboo_ta.volatility.normalized_average_true_range

================================================================================
Testing normalized_average_true_range...
================================================================================

=== Normalized Average True Range Test Results ===

Indicator Description:
Name:
    Normalized Average True Range (NATR)

Description:
    The Normalized Average True Range (NATR) is a modification of the Average True Range
    (ATR) indicator that attempts to normalize the average true range by dividing it by 
    the closing price and multiplying by a scalar (usually 100).
    
    Unlike the ATR, which is an absolute value that can vary significantly across different
    securities based on their price, the NATR expresses volatility as a percentage of the
    closing price. This makes it easier to compare volatility across different securities
    regardless of their price levels.
    
    The NATR is useful for:
    - Comparing volatility across different securities
    - Setting position sizes based on volatility
    - Identifying periods of high or low volatility

More info:
    https://www.tradingtechnologies.com/help/x-study/technical-indicator-definitions/normalized-average-true-range-natr/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', and 'close' columns.
    - length (int): The period for calculating ATR. Default is 14.
    - scalar (float): Multiplier to scale the result (typically 100 for percentage). Default is 100.
    - column (str): The column name to use for normalization. Default is 'close'.

Call with:
    result = bta.normalized_average_true_range(df)
    df['natr'] = result['natr']

Returns:
    pd.DataFrame: DataFrame with 'natr' column.

Last 32 rows of data with normalized_average_true_range values:
           date       open       high        low      close         volume      natr
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  3.493956
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  3.297768
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  3.417774
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  3.341183
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  3.412002
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  4.875958
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  4.898422
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  4.454471
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  4.166926
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  4.722133
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  4.675476
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  4.691876
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  4.542291
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  4.235203
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  3.938932
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  3.826452
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  3.827101
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  3.695316
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  4.260352
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  4.767526
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  4.935354
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  4.730504
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  4.638392
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  4.597617
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  4.631744
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  4.243018
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  4.480123
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  4.516109
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  4.096472
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  3.940916
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  3.952348
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  3.997434

Testing indicator 177/201: bamboo_ta.volatility.percentage_distance

================================================================================
Testing percentage_distance...
================================================================================

=== Percentage Distance Test Results ===

Indicator Description:
Name:
    Price Distance (PDIST)

Description:
    The Price Distance indicator measures the "distance" covered by price movements.
    It considers not only the high-low range, but also the relationship between opening
    and closing prices, both current and from a previous period (drift).
    
    This indicator is useful for analyzing volatility and understanding the magnitude
    of price movements within a given period. High PDIST values indicate more significant
    price movement or volatility, while low values indicate more stable or range-bound
    price action.
    
    The calculation weighs the high-low range more heavily (multiplier of 2) to emphasize
    the overall range of the period.

More info:
    https://www.prorealcode.com/prorealtime-indicators/pricedistance/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'open', 'high', 'low', and 'close' columns.
    - drift (int): The difference period for comparing with previous closes. Default is 1.

Call with:
    result = bta.percentage_distance(df)
    df['pdist'] = result['pdist']

Returns:
    pd.DataFrame: DataFrame with 'pdist' column.

Last 32 rows of data with percentage_distance values:
           date       open       high        low      close         volume     pdist
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   1691.87
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   3507.05
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   6125.46
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   5445.63
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   6086.71
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  25534.31
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   9039.33
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   3099.21
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   4109.00
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  10298.64
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   7343.45
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   7927.52
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   5336.01
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   3960.56
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   4076.95
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   4981.73
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   7325.47
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   5987.94
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   7120.23
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  11458.07
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  11657.34
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   5770.99
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   4289.74
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   7733.04
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   8055.83
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   3108.24
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   5891.12
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   6596.57
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   2195.69
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   3099.16
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   6041.97
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   7648.59

Testing indicator 178/201: bamboo_ta.volatility.relative_volatility_index

================================================================================
Testing relative_volatility_index...
================================================================================

=== Relative Volatility Index Test Results ===

Indicator Description:
Name:
    Relative Volatility Index (RVI)

Description:
    The Relative Volatility Index (RVI) was created by Donald Dorsey in 1993 and 
    revised in 1995. It's a volatility indicator that works similarly to the 
    Relative Strength Index (RSI) but uses standard deviation instead of price changes.
    
    Instead of adding up price changes like RSI based on price direction, the RVI 
    adds up standard deviations based on price direction. This makes it more of a 
    measure of the "quality" of volatility rather than just the amount of volatility.
    
    The indicator has three calculation modes:
    - Standard: Uses only close prices
    - Refined: Uses the average of high and low calculations
    - Thirds: Uses the average of high, low, and close calculations
    
    The RVI oscillates between 0 and 100, with readings above 50 suggesting that 
    upward volatility is stronger, while readings below 50 suggest that downward 
    volatility is stronger.

More info:
    https://www.tradingview.com/wiki/Relative_Volatility_Index_(RVI)

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'close' column, 
      and 'high' and 'low' columns if using refined or thirds modes.
    - length (int): The period for calculations. Default is 14.
    - scalar (float): A multiplier for scaling the result. Default is 100.
    - refined (bool): Whether to use the 'refined' calculation (average of high and low). Default is False.
    - thirds (bool): Whether to use the 'thirds' calculation (average of high, low, and close). Default is False.
    - column (str): The column to use for calculations if not using refined or thirds modes. Default is 'close'.

Call with:
    # Standard mode
    result = bta.relative_volatility_index(df)
    df['rvi'] = result['rvi']
    
    # Refined mode
    result = bta.relative_volatility_index(df, refined=True)
    df['rvi_r'] = result['rvi_r']
    
    # Thirds mode
    result = bta.relative_volatility_index(df, thirds=True)
    df['rvi_t'] = result['rvi_t']

Returns:
    pd.DataFrame: DataFrame with 'rvi', 'rvi_r', or 'rvi_t' column depending on the mode.

Last 32 rows of data with relative_volatility_index values:
           date       open       high        low      close         volume        rvi
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  53.565596
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  57.541710
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  53.136456
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  56.546160
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  59.942265
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  55.129369
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  59.102937
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  63.185275
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  67.430034
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  60.218533
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  55.038586
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  59.500349
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  53.468297
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  58.751172
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  51.779591
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  58.590079
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  65.100019
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  70.699959
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  59.832217
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  50.943384
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  58.332114
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  49.380387
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  41.361686
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  34.516969
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  44.761500
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  53.194728
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  44.901981
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  37.709825
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  47.579333
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  40.446750
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  35.172573
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  41.188557

Testing indicator 179/201: bamboo_ta.volatility.thermometer

================================================================================
Testing thermometer...
================================================================================

=== Thermometer Test Results ===

Indicator Description:
Name:
    Elders Thermometer (THERMO)

Description:
    Elder's Thermometer is a volatility indicator created by Dr. Alexander Elder. 
    It measures price volatility by comparing the current price range to historical 
    ranges.
    
    The indicator calculates the absolute change in high and low prices between 
    consecutive periods and selects the larger of the two. This value is then 
    compared to its moving average to determine if the market is experiencing 
    normal volatility, high volatility (potentially overbought), or low volatility 
    (potentially oversold).
    
    The indicator generates two signals:
    - Long signal: When the thermometer reading is less than a fraction (long_factor) 
      of its moving average, indicating low volatility.
    - Short signal: When the thermometer reading is greater than a multiple (short_factor) 
      of its moving average, indicating high volatility.

More info:
    https://www.motivewave.com/studies/elders_thermometer.htm
    https://www.tradingview.com/script/HqvTuEMW-Elder-s-Market-Thermometer-LazyBear/

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high' and 'low' columns.
    - length (int): The period for the EMA calculation. Default is 20.
    - long_factor (float): The buy factor - thermometer < (thermometer_ma * long_factor). Default is 2.0.
    - short_factor (float): The sell factor - thermometer > (thermometer_ma * short_factor). Default is 0.5.
    - drift (int): The difference period for price changes. Default is 1.
    - as_int (bool): Whether to convert signal outputs to integers (0, 1). Default is True.

Call with:
    result = bta.thermometer(df)
    df['thermo'] = result['thermo']
    df['thermo_ma'] = result['thermo_ma']
    df['thermo_long'] = result['thermo_long']
    df['thermo_short'] = result['thermo_short']

Returns:
    pd.DataFrame: DataFrame with 'thermo', 'thermo_ma', 'thermo_long', 'thermo_short' columns.

Last 32 rows of data with thermometer values:
           date       open       high        low      close         volume   thermo    thermo_ma  thermo_long  thermo_short
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  1156.04  2288.695699            1             1
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   398.13  2108.641823            1             0
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  1298.88  2031.521649            1             1
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  1824.48  2011.803397            1             1
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  2694.48  2076.820216            1             1
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  5088.00  2363.599243            0             1
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  5481.72  2660.563125            0             1
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  2862.28  2679.774256            1             1
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   911.82  2511.397660            1             0
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  4507.65  2701.516931            1             1
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  2945.93  2724.794366            1             1
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  3618.00  2809.861569            1             1
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  3653.40  2890.198562            1             1
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   644.74  2676.345366            1             0
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  1404.41  2555.208664            1             1
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  2600.00  2559.474506            1             1
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  2543.07  2557.912172            1             1
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  1988.49  2503.681489            1             1
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  5321.49  2772.044204            1             1
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  4300.00  2917.563804            1             1
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  4567.11  3074.663442            1             1
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  4165.85  3178.585971            1             1
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  2148.04  3080.438736            1             1
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  1730.35  2951.858856            1             1
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  2949.07  2951.593251            1             1
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  4063.00  3057.441513            1             1
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  2432.88  2997.959464            1             1
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  2419.12  2942.831896            1             1
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  1810.59  2834.999334            1             1
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  1126.14  2672.250826            1             0
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  1479.07  2558.614557            1             1
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  1225.50  2431.651266            1             1

Testing indicator 180/201: bamboo_ta.volatility.true_range

================================================================================
Testing true_range...
================================================================================

=== True Range Test Results ===

Indicator Description:
Name:
    True Range (TR)

Description:
    The True Range indicator measures market volatility. True Range is defined as the greatest of the following:
    - The current high minus the current low
    - The absolute value of the current high minus the previous close
    - The absolute value of the current low minus the previous close
    
    This measure accounts for gaps in price movement and provides a more comprehensive 
    measure of price volatility than simply looking at the high-low range.

More info:
    https://www.investopedia.com/terms/a/atr.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', and 'close' columns.

Call with:
    df['true_range'] = bta.true_range(df)['true_range']

Returns:
    pd.DataFrame: DataFrame with 'true_range' column.

Last 32 rows of data with true_range values:
           date       open       high        low      close         volume  true_range
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060     1371.94
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520     2142.12
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810     3735.00
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830     2727.35
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280     4412.17
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662    13588.00
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100     5917.27
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900     1595.18
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880     2693.30
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950     7065.88
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330     4013.46
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910     6229.76
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450     3228.36
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230     2690.26
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260     2040.59
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775     4012.86
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740     4460.07
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466     3031.51
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550     6524.98
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000     7100.11
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700     6000.46
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430     3142.22
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360     3197.73
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030     4018.92
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880     5918.97
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100     1937.13
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270     4764.56
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290     4044.57
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900     1598.33
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780     2330.48
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500     3494.05
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890     4216.27

Testing indicator 181/201: bamboo_ta.volatility.ulcer_index

================================================================================
Testing ulcer_index...
================================================================================

=== Ulcer Index Test Results ===

Indicator Description:
Name:
    Ulcer Index

Description:
    The Ulcer Index is a volatility indicator that measures downside risk. Unlike 
    standard deviation, which measures all volatility (both up and down), the 
    Ulcer Index only considers drawdowns from recent highs. This makes it a 
    better measure of investor pain because it focuses on losses.
    
    The indicator was created by Peter Martin and Byron McCann in 1987 and named 
    for the stomach ulcers that investors might get from worrying about downside 
    volatility in their investments.

More info:
    https://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:ulcer_index

Parameters:
    - df (pandas.DataFrame): Input DataFrame containing price data.
    - column (str): The column name to use for the calculation. Default is 'close'.
    - period (int): The lookback period for the calculation. Default is 14.

Call with:
    df['ui'] = bta.ulcer_index(df, 'close', 14)['ulcer_index']

Returns:
    pd.DataFrame: DataFrame with 'ulcer_index' column.

Last 32 rows of data with ulcer_index values:
           date       open       high        low      close         volume  ulcer_index
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060     2.898272
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520     2.914367
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810     3.024199
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830     3.133974
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280     3.135056
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662     3.178878
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100     3.178878
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900     3.161745
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880     3.150359
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950     2.902478
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330     2.518975
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910     2.382262
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450     2.234362
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230     2.200591
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260     2.095694
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775     2.044299
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740     1.870590
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466     1.680205
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550     2.246319
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000     3.088343
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700     3.733108
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430     4.346648
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360     5.147133
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030     5.787496
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880     5.967273
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100     6.201482
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270     6.719605
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290     7.350814
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900     7.840728
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780     8.439200
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500     9.083353
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890     9.253780

Testing indicator 182/201: bamboo_ta.volume.accumulation_distribution_index

================================================================================
Testing accumulation_distribution_index...
================================================================================

=== Accumulation Distribution Index Test Results ===

Indicator Description:
Name:
    Accumulation/Distribution Index (ADI)

Description:
    The ADI acts as a leading indicator of price movements. It is calculated using the
    high, low, close, and volume data. The indicator evaluates the relationship between 
    price and volume, aiming to identify divergences that may precede price movements.

More info:
    https://www.investopedia.com/terms/a/accumulationdistribution.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', 'close', and 'volume' columns.
    - fillna (bool): If True, fill NaN values.

Call with:
    df['adi'] = bta.accumulation_distribution_index(df, fillna=True)['adi']

Returns:
    pd.DataFrame: DataFrame with 'adi' column.

Last 32 rows of data with accumulation_distribution_index values:
           date       open       high        low      close         volume           adi
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  1.221801e+07
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  1.222466e+07
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  1.221608e+07
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  1.223994e+07
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  1.227558e+07
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  1.226995e+07
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  1.228214e+07
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  1.228570e+07
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  1.229769e+07
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  1.229149e+07
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  1.229998e+07
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  1.232849e+07
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  1.231180e+07
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  1.232603e+07
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  1.232312e+07
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  1.233664e+07
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  1.234582e+07
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  1.233233e+07
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  1.228517e+07
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  1.225739e+07
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  1.231131e+07
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  1.230118e+07
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  1.229316e+07
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  1.229891e+07
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  1.231599e+07
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  1.232837e+07
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  1.231245e+07
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  1.229642e+07
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  1.230025e+07
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  1.229517e+07
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  1.228749e+07
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  1.228223e+07

Testing indicator 183/201: bamboo_ta.volume.accumulation_distribution_oscillator

================================================================================
Testing accumulation_distribution_oscillator...
================================================================================

=== Accumulation Distribution Oscillator Test Results ===

Indicator Description:
Name:
    Accumulation/Distribution Oscillator (ADOSC)

Description:
    The Accumulation/Distribution Oscillator, also known as the Chaikin Oscillator, 
    measures the momentum of the Accumulation/Distribution Index (ADI) using the 
    difference between fast and slow exponential moving averages of the ADI.
    
    The indicator helps identify when the Accumulation/Distribution Index is 
    changing direction, which can signal potential price reversals. It's particularly 
    useful for spotting divergences between price and volume flow.

More info:
    https://www.investopedia.com/articles/active-trading/031914/understanding-chaikin-oscillator.asp
    https://school.stockcharts.com/doku.php?id=technical_indicators:chaikin_oscillator

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', 'close', and 'volume' columns.
    - fast_length (int): The period for the fast EMA calculation. Default is 3.
    - slow_length (int): The period for the slow EMA calculation. Default is 10.
    - fillna (bool): If True, fill NaN values with 0. Default is False.

Call with:
    result = bta.accumulation_distribution_oscillator(df)
    df['adosc'] = result['adosc']

Returns:
    pd.DataFrame: DataFrame with 'adosc' column.

Last 32 rows of data with accumulation_distribution_oscillator values:
           date       open       high        low      close         volume         adosc
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   5261.856928
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   5859.372683
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   2842.699048
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   8939.282787
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  21963.115664
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  23501.012998
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  25871.872614
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  25623.953543
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  27009.153338
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  23145.274467
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  22163.869051
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  28817.537643
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  23609.739038
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  23861.978247
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  20867.800250
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  22047.922227
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  23447.078148
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  17595.678245
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  -1403.818265
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -17887.252564
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  -5847.178629
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  -3612.299305
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  -4922.975790
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  -3182.813465
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   3252.774236
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   9531.679736
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   6167.734261
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   -869.715155
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  -2450.366578
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  -4492.599066
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  -7361.455923
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  -9540.846648

Testing indicator 184/201: bamboo_ta.volume.accumulation_on_balance_volume

================================================================================
Testing accumulation_on_balance_volume...
================================================================================

=== Accumulation On Balance Volume Test Results ===

Indicator Description:
Name:
    Accumulation On Balance Volume (AOBV)

Description:
    The Accumulation On Balance Volume (AOBV) is an enhanced version of the classic
    On Balance Volume (OBV) indicator. It uses multiple moving averages of the OBV 
    to generate trading signals based on the relationship between these averages.
    
    This indicator also incorporates min/max values over specified lookback periods,
    as well as 'run' signals that indicate when the fast MA has been consistently above
    (long run) or below (short run) the slow MA for a specified number of periods.

More info:
    https://www.investopedia.com/terms/o/onbalancevolume.asp
    https://school.stockcharts.com/doku.php?id=technical_indicators:on_balance_volume_obv

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'close' and 'volume' columns.
    - fast_length (int): The fast period for the MA calculation. Default is 4.
    - slow_length (int): The slow period for the MA calculation. Default is 12.
    - max_lookback (int): The period for the rolling maximum calculation. Default is 2.
    - min_lookback (int): The period for the rolling minimum calculation. Default is 2.
    - ma_type (str): The type of moving average to use ('EMA' or 'SMA'). Default is 'EMA'.
    - run_length (int): The number of consecutive periods the fast MA must be above/below
                        the slow MA to trigger a long/short run signal. Default is 2.

Call with:
    result = bta.accumulation_on_balance_volume(df)
    df['obv'] = result['obv']
    df['obv_fast'] = result['obv_fast']
    df['obv_slow'] = result['obv_slow']
    df['obv_long_run'] = result['obv_long_run']
    df['obv_short_run'] = result['obv_short_run']

Returns:
    pd.DataFrame: DataFrame with columns 'obv', 'obv_min', 'obv_max', 
                 'obv_fast', 'obv_slow', 'obv_long_run', and 'obv_short_run'.

Last 32 rows of data with accumulation_on_balance_volume values:
           date       open       high        low      close         volume            obv        obv_min        obv_max       obv_fast       obv_slow  obv_long_run  obv_short_run
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060 -560541.616165 -560541.616165 -546037.783105 -555683.477128 -576388.264982             1              0
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520 -543603.011645 -560541.616165 -543603.011645 -550851.290935 -571344.379853             1              0
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810 -581561.681455 -581561.681455 -543603.011645 -563135.447143 -572916.272408             1              0
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830 -545734.358625 -581561.681455 -545734.358625 -556175.011736 -568734.439518             1              0
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280 -501883.821345 -545734.358625 -501883.821345 -534458.535579 -558449.729030             1              0
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662 -611805.551007 -611805.551007 -501883.821345 -565397.341750 -566658.317026             1              0
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100 -566756.017907 -611805.551007 -566756.017907 -565940.812213 -566673.347931             1              0
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900 -551824.072007 -566756.017907 -551824.072007 -560294.116131 -564388.843943             1              0
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880 -537211.075127 -551824.072007 -537211.075127 -551060.899729 -560207.648740             1              0
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950 -591160.191077 -591160.191077 -537211.075127 -567100.616268 -564969.578331             0              0
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -642868.880407 -642868.880407 -591160.191077 -597407.921924 -576954.086342             0              1
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910 -605115.097497 -642868.880407 -605115.097497 -600490.792153 -581286.549597             0              1
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450 -634347.184947 -634347.184947 -605115.097497 -614033.349271 -589449.724266             0              1
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230 -612443.145717 -634347.184947 -612443.145717 -613397.267849 -592987.173720             0              1
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260 -626634.848977 -626634.848977 -612443.145717 -618692.300300 -598163.739144             0              1
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775 -604405.927202 -626634.848977 -604405.927202 -612977.751061 -599124.075769             0              1
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740 -563103.524462 -604405.927202 -563103.524462 -593028.060421 -593582.452491             0              0
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466 -534038.587996 -563103.524462 -534038.587996 -569432.271451 -584421.857953             1              0
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550 -584346.585546 -584346.585546 -534038.587996 -575397.997089 -584410.277583             1              0
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -639493.983546 -639493.983546 -584346.585546 -601036.391672 -592884.693885             0              0
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -576609.847846 -639493.983546 -576609.847846 -591265.774142 -590380.871417             0              1
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -600093.389276 -600093.389276 -576609.847846 -594796.820195 -591875.104934             0              1
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -619447.219636 -619447.219636 -600093.389276 -604656.979972 -596116.968734             0              1
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -652257.986666 -652257.986666 -619447.219636 -623697.382649 -604754.048416             0              1
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -628583.761786 -652257.986666 -628583.761786 -625651.934304 -608420.158165             0              1
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -614109.596686 -628583.761786 -614109.596686 -621034.999257 -609295.456399             0              1
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -635301.963956 -635301.963956 -614109.596686 -626741.785136 -613296.457562             0              1
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -661803.228246 -661803.228246 -635301.963956 -640766.362380 -620759.037667             0              1
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -653417.335346 -661803.228246 -653417.335346 -645826.751567 -625783.391156             0              1
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -666993.341126 -666993.341126 -653417.335346 -654293.387390 -632123.383459             0              1
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -694612.763626 -694612.763626 -666993.341126 -670421.137885 -641737.134254             0              1
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -675000.729736 -694612.763626 -675000.729736 -672252.974625 -646854.610482             0              1

Testing indicator 185/201: bamboo_ta.volume.chaikin_money_flow

================================================================================
Testing chaikin_money_flow...
================================================================================

=== Chaikin Money Flow Test Results ===

Indicator Description:
Name:
    Chaikin Money Flow (CMF)

Description:
    The Chaikin Money Flow measures the amount of Money Flow Volume over a specific period.
    It combines price and volume to form an indicator used to measure buying and selling 
    pressure. A positive value indicates buying pressure, while a negative value suggests 
    selling pressure.

More info:
    https://www.investopedia.com/terms/c/chaikinmoneyflow.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', 'close', and 'volume' columns.
    - window (int): Number of periods for the calculation. Default is 20.
    - fillna (bool): If True, fill NaN values with 0.

Call with:
    df['cmf'] = bta.chaikin_money_flow(df, window=20, fillna=True)['cmf']

Returns:
    pd.DataFrame: DataFrame with 'cmf' column.

Last 32 rows of data with chaikin_money_flow values:
           date       open       high        low      close         volume       cmf
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  0.132908
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  0.074308
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  0.047405
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  0.060154
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.164418
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  0.106381
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  0.128502
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.139040
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  0.178577
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  0.163143
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  0.136900
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  0.114442
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  0.069082
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  0.100696
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  0.076974
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  0.160194
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  0.213078
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  0.167339
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  0.094379
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  0.042614
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  0.118281
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  0.096218
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  0.099231
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  0.076219
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  0.053617
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  0.088785
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  0.047801
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  0.016602
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  0.004002
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  0.006144
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -0.021718
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -0.083059

Testing indicator 186/201: bamboo_ta.volume.ease_of_movement

================================================================================
Testing ease_of_movement...
================================================================================

=== Ease Of Movement Test Results ===

Indicator Description:
Name:
    Ease of Movement (EoM, EMV)

Description:
    Ease of Movement (EoM, EMV) and Signal Ease of Movement (SMA of EoM)

    Relates an asset's price change to its volume and is useful for assessing trend strength.
    The SMA of the EoM serves as a signal line for the indicator. Positive values indicate 
    the price is increasing with relative ease, while negative values suggest price is 
    decreasing with relative ease.

More info:
    https://www.investopedia.com/terms/e/easeofmovement.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', and 'volume' columns.
    - eom_length (int): Period for the EoM calculation. Default is 14.
    - seom_length (int): Period for the SMA of EoM calculation. Default is 14.
    - fillna (bool): If True, fill NaN values.

Call with:
    eom_df = bta.ease_of_movement(df, eom_length=14, seom_length=14, fillna=True)
    df['eom'] = eom_df['eom']
    df['seom'] = eom_df['seom']

Returns:
    pd.DataFrame: DataFrame with 'eom' and 'seom' columns.

Last 32 rows of data with ease_of_movement values:
           date       open       high        low      close         volume            eom           seom
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  -20290.832650   30391.795473
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   -1649.087725   37065.857650
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  -49438.334098   29093.938314
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830 -100534.679394   15261.008134
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  186352.282065   22736.699225
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   61818.122776   10059.802432
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  216249.234575   18485.581663
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   74912.945358   25537.877558
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   66859.762992   35968.230376
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950 -304035.588127   26703.538109
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -110194.040983   33566.939074
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  414150.899084   47939.726769
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  237741.850762   59666.224748
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  -46142.347025   44700.013401
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  155229.425876   57237.174724
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  291341.809983   78165.095989
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  250469.115022   99587.056640
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  132901.730634  116261.085928
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550 -463648.048339   69832.490899
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -516592.457687   28517.449438
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -383332.897602  -14309.845718
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  366188.709920    6495.566036
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -350323.363744  -23303.228731
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -161653.939993  -13133.111007
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  499796.189469   30437.619740
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  277313.979955   20663.554088
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -229133.099221  -12684.656625
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -314259.542870  -31835.884900
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -111970.297772  -50921.579446
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -130474.037055  -81051.282806
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -113512.824327 -107049.992760
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  185829.865772 -103269.411678

Testing indicator 187/201: bamboo_ta.volume.force_index

================================================================================
Testing force_index...
================================================================================

=== Force Index Test Results ===

Indicator Description:
Name:
    Force Index (FI)

Description:
    The Force Index (FI) illustrates how strong the actual buying or selling pressure is.
    It combines price movement and volume to quantify the force behind a price move.
    A rising FI indicates increasing buying pressure, while a falling FI suggests 
    increasing selling pressure.

More info:
    https://www.investopedia.com/terms/f/force-index.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'close' and 'volume' columns.
    - window (int): Period for calculating the exponential moving average of the Force Index. Default is 13.
    - fillna (bool): If True, fill NaN values.

Call with:
    df['fi'] = bta.force_index(df, window=13, fillna=True)['fi']

Returns:
    pd.DataFrame: DataFrame with 'fi' column.

Last 32 rows of data with force_index values:
           date       open       high        low      close         volume            fi
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  2.269875e+07
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  2.133672e+07
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  1.099751e+07
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  9.472863e+06
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  2.526910e+07
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662 -4.120398e+06
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  1.445722e+07
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  1.258634e+07
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  1.345537e+07
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950 -1.800875e+07
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -2.048483e+07
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  6.884451e+06
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  1.220859e+06
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  5.489716e+06
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  4.696855e+06
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  1.369225e+07
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  2.114531e+07
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  1.843630e+07
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550 -2.681358e+07
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -4.458627e+07
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -3.513027e+07
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -3.183418e+07
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -3.310840e+07
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -2.980731e+07
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -1.275790e+07
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -9.351417e+06
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -1.902948e+07
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -2.196169e+07
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -1.762516e+07
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -1.813628e+07
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -1.927854e+07
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -1.432806e+07

Testing indicator 188/201: bamboo_ta.volume.klinger_volume_oscillator

================================================================================
Testing klinger_volume_oscillator...
================================================================================

=== Klinger Volume Oscillator Test Results ===

Indicator Description:
Name:
    Klinger Volume Oscillator (KVO)

Description:
    The Klinger Volume Oscillator (KVO) was developed by Stephen J. Klinger. It is designed 
    to predict price reversals in a market by comparing volume to price. The KVO attempts to 
    determine long-term trends of money flow while remaining sensitive enough to detect 
    short-term fluctuations.
    
    The oscillator does this by using volume to emphasize price movements and divergences.
    It uses two EMAs of a volume force, which is calculated using volume and price changes,
    then finds the difference between these EMAs.

More info:
    https://www.investopedia.com/terms/k/klingeroscillator.asp
    https://www.daytrading.com/klinger-volume-oscillator

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', 'close', and 'volume' columns.
    - fast_length (int): The fast period for the EMA calculation. Default is 34.
    - slow_length (int): The slow period for the EMA calculation. Default is 55.
    - signal_length (int): The period for the signal line EMA calculation. Default is 13.

Call with:
    result = bta.klinger_volume_oscillator(df)
    df['kvo'] = result['kvo']
    df['kvo_signal'] = result['kvo_signal']
    df['kvo_hist'] = result['kvo_hist']

Returns:
    pd.DataFrame: DataFrame with 'kvo', 'kvo_signal', and 'kvo_hist' columns.

Last 32 rows of data with klinger_volume_oscillator values:
           date       open       high        low      close         volume          kvo   kvo_signal     kvo_hist
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  1158.822056  3050.340636 -1891.518580
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  1179.241004  2783.040689 -1603.799684
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810    19.028800  2388.181847 -2369.153047
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  -990.184306  1905.558111 -2895.742418
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  -198.340885  1605.001112 -1803.341997
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662 -2773.125004   979.554524 -3752.679527
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100 -1787.604474   584.246095 -2371.850570
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900 -1533.313995   281.737511 -1815.051506
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880 -1305.822653    54.943202 -1360.765855
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950 -2565.514427  -319.407888 -2246.106539
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -3657.560736  -796.286866 -2861.273869
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910 -2725.914024 -1071.947889 -1653.966135
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450 -2055.920714 -1212.515435  -843.405279
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230 -1599.607584 -1267.814314  -331.793270
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260 -1346.734973 -1279.088693   -67.646279
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  -941.852773 -1230.912133   289.059360
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  -163.100890 -1078.367670   915.266780
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   283.029046  -883.882425  1166.911471
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550 -1012.783096  -902.296807  -110.486289
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -2292.548873 -1100.904245 -1191.644628
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -3617.199589 -1460.375008 -2156.824581
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -2963.432414 -1675.097495 -1288.334919
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -3280.933832 -1904.502686 -1376.431147
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -3851.268084 -2182.612028 -1668.656055
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -3151.554259 -2321.032347  -830.521912
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -2706.098268 -2376.041764  -330.056504
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -3059.857141 -2473.729675  -586.127466
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -3489.006405 -2618.769208  -870.237197
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -3483.874958 -2742.355744  -741.519214
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -3583.316286 -2862.492964  -720.823322
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -3967.344186 -3020.328853  -947.015333
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -3296.296825 -3059.752849  -236.543976

Testing indicator 189/201: bamboo_ta.volume.money_flow_index

================================================================================
Testing money_flow_index...
================================================================================

=== Money Flow Index Test Results ===

Indicator Description:
Name:
    Money Flow Index (MFI)

Description:
    The Money Flow Index (MFI) uses both price and volume to measure buying and selling pressure.
    It is often referred to as volume-weighted RSI. MFI is a momentum indicator that analyzes
    the flow of money into and out of an asset. Values above 80 are considered overbought,
    while values below 20 are considered oversold.

More info:
    https://www.investopedia.com/terms/m/mfi.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', 'close', and 'volume' columns.
    - window (int): Period for calculating MFI. Default is 14.
    - fillna (bool): If True, fill NaN values.

Call with:
    df['mfi'] = bta.money_flow_index(df, window=14, fillna=True)['mfi']

Returns:
    pd.DataFrame: DataFrame with 'mfi' column.

Last 32 rows of data with money_flow_index values:
           date       open       high        low      close         volume        mfi
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  63.107465
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  66.914925
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  59.375864
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  52.100093
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  52.405602
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  36.293403
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  36.197609
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  39.607621
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  43.624753
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  43.258095
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  43.567928
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  43.405968
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  43.608115
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  43.081348
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  45.837592
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  46.523283
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  54.124051
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  60.320785
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  51.373296
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  56.939702
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  46.198269
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  47.053279
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  43.831723
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  45.762112
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  53.384360
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  50.916947
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  45.137400
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  39.723376
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  36.950720
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  32.338848
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  22.856740
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  20.351917

Testing indicator 190/201: bamboo_ta.volume.negative_volume_index

================================================================================
Testing negative_volume_index...
================================================================================

=== Negative Volume Index Test Results ===

Indicator Description:
Name:
    Negative Volume Index (NVI)

Description:
    The Negative Volume Index (NVI) measures price changes on days when trading volume 
    decreases compared to the previous day. Informed traders are thought to be more 
    active on low volume days, hence the NVI accumulates price rate of change only 
    on such days. The indicator can help identify trends led by smart money.

More info:
    https://www.investopedia.com/terms/n/nvi.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'close' and 'volume' columns.
    - signal_type (str): Type of signal smoothing ('EMA' or 'SMA'). Default is 'EMA'.
    - signal_length (int): Length for the EMA/SMA calculation. Default is 255.
    - fillna (bool): If True, fill NaN values.

Call with:
    nvi_df = bta.negative_volume_index(df, signal_type='EMA', signal_length=255, fillna=True)
    df['nvi'] = nvi_df['nvi']
    df['nvi_signal'] = nvi_df['nvi_signal']

Returns:
    pd.DataFrame: DataFrame with 'nvi' and 'nvi_signal' columns.

Last 32 rows of data with negative_volume_index values:
           date       open       high        low      close         volume          nvi   nvi_signal
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  1442.827627  1415.528273
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  1442.827627  1415.741549
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  1442.827627  1415.953159
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  1442.837091  1416.163190
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  1442.837091  1416.371580
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  1442.837091  1416.578341
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  1445.720367  1416.806013
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  1445.811754  1417.032621
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  1447.091504  1417.267456
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  1447.091504  1417.500456
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  1446.388898  1417.726147
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  1451.080749  1417.986730
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  1449.972507  1418.236619
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  1451.392406  1418.495648
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  1451.388216  1418.752622
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  1451.388216  1419.007587
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  1451.388216  1419.260561
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  1451.459007  1419.512111
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  1451.459007  1419.761696
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  1451.459007  1420.009332
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  1451.459007  1420.255032
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  1450.934036  1420.494712
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  1448.769706  1420.715610
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  1448.769706  1420.934783
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  1452.755848  1421.183385
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  1453.532244  1421.436110
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  1453.532244  1421.686861
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  1453.532244  1421.935653
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  1454.593729  1422.190795
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  1454.593729  1422.443943
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  1454.593729  1422.695113
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  1455.438575  1422.950921

Testing indicator 191/201: bamboo_ta.volume.on_balance_volume

================================================================================
Testing on_balance_volume...
================================================================================

=== On Balance Volume Test Results ===

Indicator Description:
Name:
    On Balance Volume (OBV)

Description:
    The On Balance Volume (OBV) indicator measures buying and selling pressure by accumulating 
    volume based on price movements. When the close price is higher than the previous close, 
    the volume is added to the OBV; when lower, it's subtracted. Rising OBV indicates buying 
    pressure, and falling OBV suggests selling pressure. This implementation includes an 
    optional signal line for additional trend confirmation.

More info:
    https://www.investopedia.com/terms/o/onbalancevolume.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'close' and 'volume' columns.
    - signal_type (str): Type of signal smoothing ('EMA' or 'SMA'). Default is 'SMA'.
    - signal_length (int): Length for the signal smoothing. Default is 21.
    - show_signal (bool): If True, calculate and return the signal line. Default is True.
    - fillna (bool): If True, fill nan values with 0. Default is False.

Call with:
    obv_df = bta.on_balance_volume(df, signal_type='SMA', signal_length=21, show_signal=True, fillna=True)
    df['obv'] = obv_df['obv']
    df['signal'] = obv_df['signal']

Returns:
    pd.DataFrame: DataFrame with 'obv' and 'signal' columns.

Last 32 rows of data with on_balance_volume values:
           date       open       high        low      close         volume            obv         signal
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060 -560541.616165 -617883.869268
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520 -543603.011645 -608148.679817
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810 -581561.681455 -604141.220632
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830 -545734.358625 -593794.370459
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280 -501883.821345 -585491.011565
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662 -611805.551007 -579720.615470
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100 -566756.017907 -574087.286880
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900 -551824.072007 -566661.109585
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880 -537211.075127 -557402.525006
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950 -591160.191077 -552929.376162
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330 -642868.880407 -552997.595706
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910 -605115.097497 -553277.692192
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450 -634347.184947 -558246.381438
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230 -612443.145717 -564371.512112
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260 -626634.848977 -569993.493243
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775 -604405.927202 -576042.715165
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740 -563103.524462 -577703.848815
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466 -534038.587996 -575225.760187
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550 -584346.585546 -577102.977506
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000 -639493.983546 -580234.140274
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700 -576609.847846 -581689.952881
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430 -600093.389276 -583573.370648
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360 -619447.219636 -587184.999600
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030 -652257.986666 -590551.490325
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880 -628583.761786 -594496.699999
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100 -614109.596686 -599840.784539
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270 -635301.963956 -600959.661346
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290 -661803.228246 -605485.718981
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900 -653417.335346 -610323.493426
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780 -666993.341126 -616503.601331
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500 -694612.763626 -621429.914309
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890 -675000.729736 -622960.002372

Testing indicator 192/201: bamboo_ta.volume.on_balance_volume_oscillator

================================================================================
Testing on_balance_volume_oscillator...
================================================================================

=== On Balance Volume Oscillator Test Results ===

Indicator Description:
Name:
    On Balance Volume (OBV) Oscillator

Description:
    The On Balance Volume (OBV) Oscillator measures the difference between the OBV and its 
    Exponential Moving Average (EMA). It helps in identifying trends and confirming price 
    movements. An increasing OBV oscillator indicates buying pressure, while a decreasing 
    one indicates selling pressure. Crossovers of the zero line can be used as potential 
    trading signals.

More info:
    https://www.investopedia.com/terms/o/onbalancevolume.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'close' and 'volume' columns.
    - length (int): Length for the EMA calculation. Default is 20.
    - fillna (bool): If True, fill nan values with 0.

Call with:
    df['obv_oscillator'] = bta.on_balance_volume_oscillator(df, length=20, fillna=True)['obv_oscillator']

Returns:
    pd.DataFrame: DataFrame with 'obv_oscillator' column.

Last 32 rows of data with on_balance_volume_oscillator values:
           date       open       high        low      close         volume  obv_oscillator
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060    63639.967932
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520    72904.422695
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810    31617.585944
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830    61021.584128
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280    94884.300322
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   -13605.293212
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100    28449.550374
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900    39249.925201
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880    48733.119978
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950    -4719.234451
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   -51053.835802
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   -12033.381188
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   -37335.424006
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   -13961.729083
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   -25472.153072
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775    -2934.352126
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740    34713.950556
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466    57704.707305
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550     6692.261207
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000   -43840.361860
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700    17230.081093
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430    -5657.892686
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   -22629.654184
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   -50160.381099
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   -23963.665150
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100    -8585.738141
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   -26942.095372
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   -48353.515884
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   -36161.182700
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   -45000.313387
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   -65703.570564
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   -41701.866515

Testing indicator 193/201: bamboo_ta.volume.positive_volume_index

================================================================================
Testing positive_volume_index...
================================================================================

=== Positive Volume Index Test Results ===

Indicator Description:
Name:
    Positive Volume Index (PVI)

Description:
    The Positive Volume Index (PVI) measures price changes on days when the trading volume 
    increases compared to the previous day. It accumulates the price rate of change on those 
    days, helping to identify trends driven by high-volume activity. The PVI is often used 
    in conjunction with the Negative Volume Index (NVI) to understand different aspects of 
    market behavior.

More info:
    https://school.stockcharts.com/doku.php?id=technical_indicators:positive_volume_index

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'close' and 'volume' columns.
    - signal_type (str): Type of signal smoothing ('EMA' or 'SMA'). Default is 'EMA'.
    - signal_length (int): Length for the EMA/SMA calculation. Default is 255.
    - fillna (bool): If True, fill nan values.

Call with:
    pvi_df = bta.positive_volume_index(df, signal_type='EMA', signal_length=255, fillna=True)
    df['pvi'] = pvi_df['pvi']
    df['pvi_signal'] = pvi_df['pvi_signal']

Returns:
    pd.DataFrame: DataFrame with 'pvi' and 'pvi_signal' columns.

Last 32 rows of data with positive_volume_index values:
           date       open       high        low      close         volume        pvi  pvi_signal
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  57.511091   38.251001
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  57.511091   38.401470
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  58.317238   38.557062
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  56.933734   38.700630
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  56.933734   38.843076
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  59.789904   39.006723
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  58.124690   39.156082
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  58.124690   39.304275
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  58.124690   39.451309
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  58.124690   39.597195
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  54.333635   39.712323
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  54.333635   39.826552
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  54.333635   39.939889
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  54.333635   40.052340
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  54.333635   40.163913
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  54.333635   40.274614
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  57.335006   40.407898
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  58.861532   40.552067
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  58.861532   40.695110
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  53.274496   40.793386
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  50.537929   40.869515
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  50.890457   40.947804
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  50.890457   41.025481
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  50.890457   41.102551
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  50.570242   41.176517
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  50.570242   41.249906
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  50.570242   41.322721
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  46.911372   41.366382
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  45.353229   41.397530
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  45.353229   41.428434
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  43.714405   41.446293
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  42.705051   41.456127

Testing indicator 194/201: bamboo_ta.volume.price_volume

================================================================================
Testing price_volume...
================================================================================

=== Price Volume Test Results ===

Indicator Description:
Name:
    Price-Volume (PVOL)

Description:
    The Price-Volume indicator is a simple measure that calculates the product of price 
    and volume. This gives a measure of the monetary value of transactions at each time period.
    
    When the 'signed' parameter is set to True, the indicator also takes into account 
    the direction of price movement, multiplying by +1 for price increases and -1 for 
    price decreases, which can help identify buying and selling pressure.

More info:
    https://www.investopedia.com/articles/technical/02/082702.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain specified price column and 'volume' column.
    - signed (bool): Whether to apply the sign of price changes to the result. Default is False.
    - column (str): The price column to use for calculations. Default is 'close'.

Call with:
    result = bta.price_volume(df)
    df['pvol'] = result['pvol']

Returns:
    pd.DataFrame: DataFrame with 'pvol' column.

Last 32 rows of data with price_volume values:
           date       open       high        low      close         volume          pvol
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  1.398285e+09
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  1.646181e+09
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  3.637982e+09
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  3.434038e+09
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  4.323107e+09
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  1.065643e+10
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  4.493278e+09
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  1.490686e+09
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  1.477514e+09
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  5.247980e+09
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  4.994697e+09
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  3.817851e+09
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  2.923334e+09
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  2.221601e+09
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  1.439323e+09
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  2.322122e+09
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  4.380477e+09
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  3.084770e+09
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  5.041063e+09
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  5.374768e+09
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  6.150411e+09
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  2.284760e+09
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  1.842219e+09
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  3.113134e+09
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  2.335784e+09
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  1.439160e+09
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  2.030051e+09
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  2.499044e+09
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  7.991756e+08
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  1.272590e+09
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  2.562863e+09
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  1.835216e+09

Testing indicator 195/201: bamboo_ta.volume.price_volume_rank

================================================================================
Testing price_volume_rank...
================================================================================

=== Price Volume Rank Test Results ===

Indicator Description:
Name:
    Price Volume Rank (PVR)

Description:
    The Price Volume Rank indicator was developed by Anthony J. Macek to classify price and 
    volume behavior into four distinct categories. It provides a simple numerical classification 
    that can help identify potential market turning points and trend continuations.
    
    The indicator assigns values from 1 to 4 based on the combination of price change and 
    volume change directions:
    
    1: Price up, Volume up (strong bullish)
    2: Price up, Volume down (weak bullish)
    3: Price down, Volume up (strong bearish)
    4: Price down, Volume down (weak bearish)
    
    The basic interpretation is to consider buying when the PVR is below 2.5 and 
    selling when it is above 2.5.

More info:
    https://www.fmlabs.com/reference/default.htm?url=PVrank.htm
    Technical Analysis of Stocks & Commodities Magazine, June 1994

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'close' and 'volume' columns.

Call with:
    result = bta.price_volume_rank(df)
    df['pvr'] = result['pvr']

Returns:
    pd.DataFrame: DataFrame with 'pvr' column.

Last 32 rows of data with price_volume_rank values:
           date       open       high        low      close         volume  pvr
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  4.0
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  1.0
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  3.0
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  2.0
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  1.0
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  3.0
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  2.0
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  2.0
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  2.0
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  3.0
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  4.0
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  2.0
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  4.0
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  2.0
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  4.0
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  1.0
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  1.0
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  2.0
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  3.0
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  3.0
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  1.0
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  4.0
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  4.0
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  3.0
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  2.0
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  2.0
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  3.0
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  3.0
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  2.0
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  3.0
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  3.0
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  2.0

Testing indicator 196/201: bamboo_ta.volume.price_volume_trend

================================================================================
Testing price_volume_trend...
================================================================================

=== Price Volume Trend Test Results ===

Indicator Description:
Name:
    Price Volume Trend (PVT)

Description:
    Based on cumulative volume that adds or subtracts a multiple of the percentage change in 
    share price trend. The PVT is similar to On Balance Volume (OBV) but instead of adding 
    or subtracting the entire volume, it adds or subtracts a portion of the volume based on 
    the percentage price change. This creates a more refined volume-based indicator that 
    responds proportionally to price movements.

More info:
    https://www.investopedia.com/terms/p/pvtrend.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'close' and 'volume' columns.
    - fillna (bool): If True, fill nan values.
    - smoothing_factor (int, optional): Will smooth PVT implementation with SMA.
    - signal_type (str): Type of signal smoothing ('SMA' or 'EMA').
    - signal_length (int): Length of the signal smoothing.
    - dropnans (bool): Drop NaN values after indicator calculated.

Call with:
    pvt_df = bta.price_volume_trend(df, fillna=True, signal_type='EMA', signal_length=21, dropnans=True)
    df['pvt'] = pvt_df['price_volume_trend']
    df['pvt_signal'] = pvt_df['signal']

Returns:
    pd.DataFrame: DataFrame with 'price_volume_trend' and 'signal' columns.

Last 32 rows of data with price_volume_trend values:
           date       open       high        low      close         volume  price_volume_trend         signal
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060       281614.105525  279048.729119
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520       281750.655556  279716.495808
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810       281225.496174  279955.483318
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830       281228.886738  280231.008784
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280       282481.332587  280452.343348
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662       280650.900394  280677.670373
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100       281949.802732  280867.979801
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900       281963.448565  281064.229089
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880       282150.458408  281278.554232
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950       280105.217840  281380.487533
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330       279741.909653  281422.679266
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910       281513.261037  281506.207048
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450       281189.298686  281433.385548
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230       281500.313939  281362.513432
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260       281499.719261  281306.152508
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775       282166.891570  281278.098908
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740       282797.383499  281401.011123
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466       282817.958862  281555.854059
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550       280007.233052  281493.791431
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000       278498.087486  281363.001212
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700       278719.771449  281217.720620
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430       278596.489714  281074.024629
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360       278177.608903  280903.879550
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030       278072.544151  280753.738977
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880       279016.232341  280648.374482
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100       279128.609167  280488.720986
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270       278353.207957  280379.307061
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290       277940.280393  280188.377425
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900       278029.295383  280001.036798
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780       277806.808438  279794.196323
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500       277528.030773  279671.473129
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890       277693.722273  279573.940397

Testing indicator 197/201: bamboo_ta.volume.relative_volume

================================================================================
Testing relative_volume...
================================================================================

=== Relative Volume Test Results ===

Indicator Description:
Name:
    Relative Volume (RVOL)

Description:
    Computes the Relative Volume (RVOL) indicator, which compares the current volume
    to a moving average of volume over a specified window. This helps identify periods
    of unusually high or low trading activity. Values greater than 1 indicate above-average 
    volume, while values less than 1 indicate below-average volume. Traders often look for 
    high relative volume to confirm breakouts or significant price movements.

More info:
    https://www.investopedia.com/terms/r/relative-volume.asp

Parameters:
    - df (pd.DataFrame): Input DataFrame containing a volume column.
    - volume_col (str): Name of the column containing volume data. Default is 'volume'.
    - window (int): Lookback window for calculating the Simple Moving Average (SMA) of volume. Default is 24.

Call with:
    df['rvol'] = bta.relative_volume(df, volume_col='volume', window=24)['rvol']

Returns:
    pd.DataFrame: DataFrame with an additional column:
        - 'rvol': The Relative Volume values.

Last 32 rows of data with relative_volume values:
           date       open       high        low      close         volume      rvol
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  0.315742
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  0.378331
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  0.846690
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  0.785364
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  0.977289
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  2.388590
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  1.027533
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  0.365536
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  0.373786
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  1.371166
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  1.275077
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  0.917869
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  0.723377
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  0.554475
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  0.370183
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  0.611043
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  1.141738
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  0.799487
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  1.354163
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  1.477303
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  1.675160
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  0.638089
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  0.531571
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  0.895940
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  0.639780
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  0.392243
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  0.585385
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  0.739973
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  0.244229
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  0.447732
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  0.933231
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  0.658332

Testing indicator 198/201: bamboo_ta.volume.time_relative_volume_oscillator

================================================================================
Testing time_relative_volume_oscillator...
================================================================================

=== Time Relative Volume Oscillator Test Results ===

Indicator Description:
Name:
    Time Relative Volume Oscillator (TRVO)

Description:
    Time Relative Volume Oscillator (TRVO) - Delta Mode
    
    This indicator measures relative volume compared to historical values and differentiates
    between buy and sell volumes. It first calculates a relative volume by comparing current
    volume to a historical average, then applies a sigmoid-like transformation to normalize
    the values. The volume is then split into buy and sell components based on where the close
    price sits within the high-low range. Finally, the indicator creates a "delta" or difference
    between short and long EMAs of the buy/sell percentage differences.

More info:
    This is a custom indicator inspired by volume profile analysis techniques used by 
    professional traders. The sigmoid transformation helps normalize volume spikes.

Parameters:
    - df (pd.DataFrame): Input DataFrame containing 'high', 'low', 'close', and 'volume'.
    - column (str): Column name for price source (default: "close").
    - relative_len (int): Number of previous periods used for relative volume calculation (default: 6).
    - delta_smoothing (int): Smoothing factor for the buy/sell volume difference (default: 9).
    - smoothing_line (bool): If True, applies EMA smoothing to buy/sell volume difference (default: True).
    - show_total_volume (bool): If True, includes the 'total_volume' column in the output DataFrame (default: False).

Call with:
    trvo_result = bta.time_relative_volume_oscillator(
        df,
        column="close",
        relative_len=6,
        delta_smoothing=9,
        smoothing_line=True,
        show_total_volume=False,
    )
    df["relative_buy_volume"] = trvo_result["relative_buy_volume"]
    df["relative_sell_volume"] = trvo_result["relative_sell_volume"]
    df["buy_vs_sell"] = trvo_result["buy_vs_sell"]
    df["smoothed_delta"] = trvo_result["smoothed_delta"]

Returns:
    pd.DataFrame: A DataFrame containing:
        - "relative_buy_volume": Volume attributed to buyers.
        - "relative_sell_volume": Volume attributed to sellers (negative).
        - "buy_vs_sell": Difference between buy and sell volume percentages.
        - "smoothed_delta": EMA-smoothed buy/sell volume difference.
        - "total_volume" (optional): Raw total volume for each period (if show_total_volume=True).

Last 32 rows of data with time_relative_volume_oscillator values:
           date       open       high        low      close         volume  relative_buy_volume  relative_sell_volume  buy_vs_sell  smoothed_delta
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060          1336.163731          -4465.268225    -0.539368    -9774.160667
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520          5437.992096          -2373.200574     0.392359   -10455.565090
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810         14551.153318         -23044.174392    -0.225906   -12190.297894
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830         34545.790040          -6932.365761     0.665734   -10692.183218
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280         55933.832996          -5771.429407     0.812936    -6348.077068
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662         54142.786018         -59995.347324    -0.051276    -3951.588729
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100         18535.182757         -10641.241745     0.270559    -1563.678740
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900          2948.497734          -1812.061194     0.238719      592.072514
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880          4248.692162           -418.320877     0.820733     5093.787082
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950         17064.751877         -21502.519633    -0.115066     6935.542325
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330         18580.565919         -13336.247591     0.164312     8120.099322
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910         15600.139984          -2177.323828     0.755047    11444.340707
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450          4020.950200         -14720.224689    -0.570897    10196.663373
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230         10968.770699          -2327.994001     0.649841    11286.671143
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260          2695.479686          -4090.156569    -0.205534    10106.653202
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775         10379.045560          -2528.172552     0.608254    11032.449271
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740         30041.322678         -19116.093154     0.222250    11650.142968
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466          7892.938402         -21565.383168    -0.464128     8949.778355
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550          2483.010514         -76932.674727    -0.937468     1889.914426
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000         19002.072259         -57574.275049    -0.503709    -6038.320160
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700         67812.517890          -5202.662913     0.857491    -8122.057928
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430          2911.297482          -7325.874824    -0.431230   -11943.935828
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360          2264.718734          -5473.078341    -0.414635   -16744.118176
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030         11550.254192          -8106.801615     0.175176   -19383.655100
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880          9827.502314          -1590.302437     0.721435   -17929.695361
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100          6262.319723           -486.157343     0.855921   -13086.013444
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270          1976.850235         -13920.968279    -0.751305   -13367.707197
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290          7323.398672         -29747.010790    -0.604892   -16496.789819
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900          4358.567510          -1624.589650     0.456946   -16599.725552
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780          4112.542750          -9040.279652    -0.374652   -18383.825414
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500         20980.076926         -37125.057652    -0.277858   -20821.417300
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890         10992.376897         -19058.670546    -0.268420   -23558.719860

Testing indicator 199/201: bamboo_ta.volume.volume_profile

================================================================================
Testing volume_profile...
================================================================================

=== Volume Profile Test Results ===

Indicator Description:
Name:
    Volume Profile (VP)

Description:
    The Volume Profile indicator divides the price range into a specified number of 
    price levels and calculates the trading volume that occurred at each level. This 
    provides insight into which price levels had the most trading activity.
    
    It differentiates between positive and negative volume based on whether the price 
    was rising or falling, allowing for more detailed analysis of buying and selling 
    pressure at different price levels.
    
    Note: Value Area is not calculated in this implementation.

More info:
    https://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:volume_by_price
    https://www.tradingview.com/wiki/Volume_Profile

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'close' and 'volume' columns.
    - width (int): How many price ranges to divide the data into. Default is 10.
    - sort_close (bool): Whether to sort data by close price before splitting into ranges. 
                          When False (default), data is split chronologically. When True, 
                          it's split by price level.

Call with:
    result = bta.volume_profile(df)
    # Access results with:
    low_prices = result['low_price']
    mean_prices = result['mean_price']
    high_prices = result['high_price']
    pos_volumes = result['pos_volume']
    neg_volumes = result['neg_volume']
    total_volumes = result['total_volume']

Returns:
    pd.DataFrame: DataFrame with columns 'low_price', 'mean_price', 'high_price', 
                 'pos_volume', 'neg_volume', and 'total_volume'.

Last 32 rows of data with volume_profile values:
           date       open       high        low      close         volume  low_price  mean_price  high_price  pos_volume  neg_volume  total_volume
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060        NaN         NaN         NaN         NaN         NaN           NaN
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520        NaN         NaN         NaN         NaN         NaN           NaN
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810        NaN         NaN         NaN         NaN         NaN           NaN
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830        NaN         NaN         NaN         NaN         NaN           NaN
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280        NaN         NaN         NaN         NaN         NaN           NaN
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662        NaN         NaN         NaN         NaN         NaN           NaN
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100        NaN         NaN         NaN         NaN         NaN           NaN
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900        NaN         NaN         NaN         NaN         NaN           NaN
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880        NaN         NaN         NaN         NaN         NaN           NaN
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950        NaN         NaN         NaN         NaN         NaN           NaN
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330        NaN         NaN         NaN         NaN         NaN           NaN
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910        NaN         NaN         NaN         NaN         NaN           NaN
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450        NaN         NaN         NaN         NaN         NaN           NaN
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230        NaN         NaN         NaN         NaN         NaN           NaN
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260        NaN         NaN         NaN         NaN         NaN           NaN
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775        NaN         NaN         NaN         NaN         NaN           NaN
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740        NaN         NaN         NaN         NaN         NaN           NaN
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466        NaN         NaN         NaN         NaN         NaN           NaN
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550        NaN         NaN         NaN         NaN         NaN           NaN
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000        NaN         NaN         NaN         NaN         NaN           NaN
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700        NaN         NaN         NaN         NaN         NaN           NaN
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430        NaN         NaN         NaN         NaN         NaN           NaN
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360        NaN         NaN         NaN         NaN         NaN           NaN
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030        NaN         NaN         NaN         NaN         NaN           NaN
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880        NaN         NaN         NaN         NaN         NaN           NaN
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100        NaN         NaN         NaN         NaN         NaN           NaN
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270        NaN         NaN         NaN         NaN         NaN           NaN
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290        NaN         NaN         NaN         NaN         NaN           NaN
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900        NaN         NaN         NaN         NaN         NaN           NaN
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780        NaN         NaN         NaN         NaN         NaN           NaN
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500        NaN         NaN         NaN         NaN         NaN           NaN
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890        NaN         NaN         NaN         NaN         NaN           NaN

Testing indicator 200/201: bamboo_ta.volume.volume_weighted_average_price

================================================================================
Testing volume_weighted_average_price...
================================================================================

=== Volume Weighted Average Price Test Results ===

Indicator Description:
Name:
    Volume Weighted Average Price (VWAP)

Description:
    The Volume Weighted Average Price (VWAP) equals the dollar value of all trading periods 
    divided by the total trading volume for the current day. VWAP is often used by institutional 
    traders to determine the quality of execution. This implementation provides a rolling VWAP 
    over a specified window period, making it usable across multiple timeframes.

More info:
    https://www.investopedia.com/terms/v/vwap.asp

Parameters:
    - df (pandas.DataFrame): Input DataFrame which should contain 'high', 'low', 'close', and 'volume' columns.
    - window (int): n period for rolling calculation. Default is 14.
    - fillna (bool): If True, fill nan values.

Call with:
    df['vwap'] = bta.volume_weighted_average_price(df, window=14, fillna=True)['vwap']

Returns:
    pd.DataFrame: DataFrame with 'vwap' column.

Last 32 rows of data with volume_weighted_average_price values:
           date       open       high        low      close         volume           vwap
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060   94833.227676
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520   95110.604201
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810   95558.021517
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830   95816.532567
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280   96130.049010
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662   96212.846660
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100   96261.716515
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900   96280.965225
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880   96327.061821
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950   96588.717421
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330   97000.311366
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910   97339.041573
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450   97611.578341
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230   97769.833432
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260   97902.376983
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775   98173.733111
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740   98900.538086
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466   99570.445530
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550   99999.401771
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  100489.551425
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  100051.124888
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430   99954.585652
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360   99779.287871
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030   99681.608571
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880   99926.085688
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100   99923.235194
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270   99732.039730
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290   99396.113519
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900   99240.366736
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780   98840.574050
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500   97757.044096
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890   96925.763902

Testing indicator 201/201: bamboo_ta.volume.volume_weighted_average_price_bands

================================================================================
Testing volume_weighted_average_price_bands...
================================================================================

=== Volume Weighted Average Price Bands Test Results ===

Indicator Description:
Name:
    Volume-Weighted Average Price Bands (VWAPB)

Description:
    Calculates the Volume-Weighted Average Price (VWAP) along with upper and lower bands
    based on a rolling standard deviation. The VWAP provides a cumulative weighted average 
    price, while the bands create a channel that can help identify potential support and 
    resistance levels. Price movement outside these bands may indicate overbought or 
    oversold conditions.

More info:
    https://www.investopedia.com/terms/v/vwap.asp

Parameters:
    - df (pd.DataFrame): Input DataFrame containing the following required columns:
        - 'close': Closing price.
        - 'high': High price for each interval.
        - 'low': Low price for each interval.
        - 'volume': Trading volume for each interval.
    - window_size (int, default=20): The rolling window size for VWAP and standard deviation calculations.
    - num_of_std (float, default=1.0): The number of standard deviations to calculate the upper and lower bands.

Call with:
    vwapb_result = bta.volume_weighted_average_price_bands(df, window_size=20, num_of_std=1.0)
    df['vwap_low'] = vwapb_result['vwap_low']
    df['vwap'] = vwapb_result['vwap']
    df['vwap_high'] = vwapb_result['vwap_high']

Returns:
    pd.DataFrame: A DataFrame containing the following columns:
        - 'vwap': The Volume-Weighted Average Price (VWAP).
        - 'vwap_low': The lower band (VWAP - num_of_std × rolling std deviation).
        - 'vwap_high': The upper band (VWAP + num_of_std × rolling std deviation).

Last 32 rows of data with volume_weighted_average_price_bands values:
           date       open       high        low      close         volume      vwap_low          vwap     vwap_high
2662 2024-11-30   97460.00   97463.95   96092.01   96407.99   14503.833060  24748.444397  24846.431785  24944.419172
2663 2024-12-01   96407.99   97836.00   95693.88   97185.18   16938.604520  24759.596477  24853.120811  24946.645145
2664 2024-12-02   97185.17   98130.00   94395.00   95840.62   37958.669810  24777.310700  24867.943239  24958.575778
2665 2024-12-03   95840.61   96305.52   93578.17   95849.69   35827.322830  24792.640941  24881.755542  24970.870142
2666 2024-12-04   95849.69   99000.00   94587.83   98587.32   43850.537280  24810.864510  24899.169289  24987.474068
2667 2024-12-05   98587.32  104088.00   90500.00   96945.63  109921.729662  24852.394422  24942.655564  25032.916706
2668 2024-12-06   96945.63  101898.99   95981.72   99740.84   45049.533100  24869.237221  24960.962806  25052.688392
2669 2024-12-07   99740.84  100439.18   98844.00   99831.99   14931.945900  24875.547871  24967.069540  25058.591210
2670 2024-12-08   99831.99  101351.00   98657.70  101109.59   14612.996880  24882.570375  24973.098251  25063.626127
2671 2024-12-09  101109.60  101215.93   94150.05   97276.47   53949.115950  24904.436802  24994.513372  25084.589941
2672 2024-12-10   97276.48   98270.00   94256.54   96593.00   51708.689330  24924.683346  25014.695268  25104.707190
2673 2024-12-11   96593.00  101888.00   95658.24  101125.00   37753.782910  24939.108439  25030.080503  25121.052567
2674 2024-12-12  101125.00  102540.00   99311.64  100004.29   29232.087450  24950.241289  25042.158277  25134.075264
2675 2024-12-13  100004.29  101895.26   99205.00  101424.25   21904.039230  24959.348838  25051.232483  25143.116128
2676 2024-12-14  101424.24  102650.00  100609.41  101420.00   14191.703260  24966.294217  25057.166242  25148.038267
2677 2024-12-15  101420.00  105250.00  101237.14  104463.99   22228.921775  24976.825293  25066.712562  25156.599830
2678 2024-12-16  104463.99  107793.07  103333.00  106058.66   41302.402740  24995.068326  25084.912768  25174.757210
2679 2024-12-17  106058.65  108353.00  105321.49  106133.74   29064.936466  25007.995320  25097.854356  25187.713393
2680 2024-12-18  106133.74  106524.98  100000.00  100204.01   50307.997550  25028.839507  25119.047329  25209.255150
2681 2024-12-19  100204.01  102800.11   95700.00   97461.86   55147.398000  25050.300110  25141.185120  25232.070129
2682 2024-12-20   97461.86   98233.00   92232.54   97805.44   62884.135700  25074.018477  25165.532636  25257.046796
2683 2024-12-21   97805.44   99540.61   96398.39   97291.99   23483.541430  25084.175272  25174.832576  25265.489881
2684 2024-12-22   97292.00   97448.08   94250.35   95186.27   19353.830360  25093.342697  25182.271906  25271.201115
2685 2024-12-23   95186.28   96538.92   92520.00   94881.47   32810.767030  25108.014900  25194.704640  25281.394380
2686 2024-12-24   94881.47   99487.99   93569.02   98663.58   23674.224880  25119.953517  25204.007440  25288.061363
2687 2024-12-25   98663.58   99569.15   97632.02   99429.60   14474.165100  25126.386148  25209.823089  25293.260031
2688 2024-12-26   99429.61   99963.70   95199.14   95791.60   21192.367270  25135.247510  25218.117762  25300.988014
2689 2024-12-27   95791.60   97544.58   93500.01   94299.03   26501.264290  25146.741460  25228.217390  25309.693321
2690 2024-12-28   94299.03   95733.99   94135.66   95300.00    8385.892900  25152.772092  25231.409994  25310.047896
2691 2024-12-29   95300.00   95340.00   93009.52   93738.20   13576.005780  25160.493792  25236.501879  25312.509967
2692 2024-12-30   93738.19   95024.50   91530.45   92792.05   27619.422500  25172.767684  25246.721095  25320.674506
2693 2024-12-31   92792.05   96250.00   92033.73   93576.00   19612.033890  25182.156787  25254.065230  25325.973673

================================================================================
TESTING COMPLETE: 201/201 indicators passed
================================================================================

All indicators passed their tests!
